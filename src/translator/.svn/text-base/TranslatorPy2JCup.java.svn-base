
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 01 11:47:42 CET 2012
//----------------------------------------------------

package translator;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 01 11:47:42 CET 2012
  */
public class TranslatorPy2JCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TranslatorPy2JCup() {super();}

  /** Constructor which sets the default scanner. */
  public TranslatorPy2JCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TranslatorPy2JCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\116\005" +
    "\000\002\116\007\000\002\116\010\000\002\117\003\000" +
    "\002\117\004\000\002\103\004\000\002\103\004\000\002" +
    "\101\007\000\002\120\004\000\002\120\005\000\002\040" +
    "\003\000\002\040\006\000\002\040\006\000\002\040\011" +
    "\000\002\040\004\000\002\040\007\000\002\040\004\000" +
    "\002\041\005\000\002\041\003\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\005\000\002\044" +
    "\005\000\002\044\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\107\004\000\002\107\005\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\106\003\000" +
    "\002\106\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\004\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\007\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\005\000\002\046\006\000\002\046" +
    "\010\000\002\046\012\000\002\010\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\051\004\000\002\052\004\000\002" +
    "\052\006\000\002\052\010\000\002\012\004\000\002\012" +
    "\006\000\002\012\010\000\002\012\006\000\002\012\007" +
    "\000\002\012\011\000\002\012\007\000\002\012\007\000" +
    "\002\012\011\000\002\012\007\000\002\055\005\000\002" +
    "\055\003\000\002\054\005\000\002\054\003\000\002\053" +
    "\005\000\002\053\003\000\002\057\005\000\002\057\003" +
    "\000\002\056\005\000\002\056\003\000\002\060\004\000" +
    "\002\060\003\000\002\014\004\000\002\045\005\000\002" +
    "\045\003\000\002\015\004\000\002\015\006\000\002\015" +
    "\010\000\002\013\004\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\074\006\000\002\074\011\000\002\074\007\000\002\074" +
    "\012\000\002\074\006\000\002\074\007\000\002\074\012" +
    "\000\002\074\011\000\002\111\006\000\002\111\007\000" +
    "\002\111\006\000\002\075\006\000\002\075\011\000\002" +
    "\075\006\000\002\076\010\000\002\076\010\000\002\076" +
    "\010\000\002\076\010\000\002\077\010\000\002\077\006" +
    "\000\002\077\011\000\002\077\011\000\002\077\014\000" +
    "\002\113\005\000\002\113\006\000\002\112\003\000\002" +
    "\112\004\000\002\112\006\000\002\112\006\000\002\100" +
    "\007\000\002\114\003\000\002\114\005\000\002\115\004" +
    "\000\002\115\005\000\002\104\003\000\002\104\006\000" +
    "\002\105\004\000\002\105\003\000\002\050\005\000\002" +
    "\050\004\000\002\025\003\000\002\025\003\000\002\021" +
    "\005\000\002\021\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\023\003\000\002\023\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\004\000\002\024\004\000\002\024\005" +
    "\000\002\024\005\000\002\024\004\000\002\024\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\027\003\000\002\027\004\000\002\031\004\000" +
    "\002\031\002\000\002\032\005\000\002\032\007\000\002" +
    "\030\004\000\002\030\003\000\002\033\005\000\002\033" +
    "\003\000\002\034\003\000\002\034\005\000\002\022\005" +
    "\000\002\022\006\000\002\026\004\000\002\026\005\000" +
    "\002\026\004\000\002\026\005\000\002\026\004\000\002" +
    "\062\003\000\002\062\004\000\002\064\004\000\002\064" +
    "\005\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\004\000\002\063\005\000\002\063\006\000" +
    "\002\063\005\000\002\063\004\000\002\063\005\000\002" +
    "\063\004\000\002\065\003\000\002\065\004\000\002\102" +
    "\006\000\002\102\010\000\002\102\011\000\002\061\003" +
    "\000\002\061\004\000\002\061\004\000\002\061\005\000" +
    "\002\061\007\000\002\061\007\000\002\061\004\000\002" +
    "\067\004\000\002\067\005\000\002\067\003\000\002\066" +
    "\003\000\002\066\004\000\002\066\005\000\002\035\003" +
    "\000\002\035\003\000\002\036\006\000\002\036\007\000" +
    "\002\036\007\000\002\037\004\000\002\037\005\000\002" +
    "\071\003\000\002\071\003\000\002\070\006\000\002\070" +
    "\007\000\002\072\004\000\002\072\005\000\002\110\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d3\000\124\002\ufffd\006\103\007\070\010\046\011" +
    "\100\012\035\013\031\017\056\020\072\023\062\024\007" +
    "\025\110\026\101\027\075\032\021\035\023\036\033\041" +
    "\016\045\074\046\020\047\063\050\065\051\057\052\120" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\110\005\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\040\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\004\132\233\001\002\000\006" +
    "\041\uffd4\072\uffd4\001\002\000\006\062\u01b0\132\233\001" +
    "\002\000\046\003\u01a4\032\021\054\054\055\077\075\025" +
    "\077\010\100\u01a2\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\116\132\022\133\112" +
    "\001\002\000\124\002\ufffd\006\103\007\070\010\046\011" +
    "\100\012\035\013\031\017\056\020\072\023\062\024\007" +
    "\025\110\026\101\027\075\032\021\035\023\036\033\041" +
    "\016\045\074\046\020\047\063\050\065\051\057\052\120" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\110\005\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\142\003" +
    "\uff2e\004\uff2e\005\uff2e\023\uff2e\026\uff2e\030\uff2e\031\uff2e" +
    "\033\uff2e\034\uff2e\040\uff2e\041\uff2e\042\uff2e\054\uff2e\055" +
    "\uff2e\056\uff2e\057\uff2e\060\uff2e\061\uff2e\062\uff2e\063\uff2e" +
    "\064\uff2e\065\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e\072" +
    "\uff2e\073\uff2e\074\uff2e\075\uff2e\076\uff2e\100\uff2e\101\uff2e" +
    "\102\uff2e\104\uff2e\105\uff2e\106\uff2e\107\uff2e\111\uff2e\112" +
    "\uff2e\113\uff2e\114\uff2e\115\uff2e\116\uff2e\117\uff2e\120\uff2e" +
    "\121\uff2e\122\uff2e\001\002\000\006\041\uffd6\072\uffd6\001" +
    "\002\000\134\003\uff62\004\uff62\005\uff62\023\uff62\026\uff62" +
    "\030\uff62\031\uff62\033\uff62\034\uff62\040\uff62\041\uff62\042" +
    "\uff62\054\uff62\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62" +
    "\063\uff62\064\uff62\065\uff62\066\uff62\067\uff62\070\uff62\071" +
    "\uff62\072\uff62\073\uff62\074\uff62\076\uff62\100\uff62\102\uff62" +
    "\104\uff62\105\uff62\106\uff62\107\uff62\111\uff62\112\uff62\113" +
    "\uff62\114\uff62\115\uff62\116\uff62\117\uff62\120\uff62\121\uff62" +
    "\122\uff62\001\002\000\006\041\uffb8\072\uffb8\001\002\000" +
    "\124\002\ufffd\006\103\007\070\010\046\011\100\012\035" +
    "\013\031\017\056\020\072\023\062\024\007\025\110\026" +
    "\101\027\075\032\021\035\023\036\033\041\016\045\074" +
    "\046\020\047\063\050\065\051\057\052\120\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\110\005" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\116\132\022\133\112\001\002\000\126\002\uff8e\006\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\017\uff8e\020" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\032\uff8e" +
    "\035\uff8e\036\uff8e\041\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\075\uff8e\077\uff8e\101\uff8e\103\uff8e\110\uff8e\123\uff8e\124" +
    "\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e\131\uff8e\132\uff8e" +
    "\133\uff8e\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\116\132\022\133\112\001" +
    "\002\000\014\042\u0159\056\u0156\074\u0196\101\u015c\132\u015d" +
    "\001\002\000\142\003\uff46\004\uff46\005\uff46\023\uff46\026" +
    "\uff46\030\uff46\031\uff46\033\uff46\034\uff46\040\uff46\041\uff46" +
    "\042\uff46\054\uff46\055\uff46\056\uff46\057\uff46\060\uff46\061" +
    "\uff46\062\uff46\063\uff46\064\uff46\065\uff46\066\uff46\067\uff46" +
    "\070\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075\uff46\076" +
    "\uff46\100\uff46\101\uff46\102\uff46\104\uff46\105\uff46\106\uff46" +
    "\107\uff46\111\uff46\112\uff46\113\uff46\114\uff46\115\uff46\116" +
    "\uff46\117\uff46\120\uff46\121\uff46\122\uff46\001\002\000\006" +
    "\041\uffd7\072\uffd7\001\002\000\142\003\uff2d\004\uff2d\005" +
    "\uff2d\023\uff2d\026\uff2d\030\uff2d\031\uff2d\033\uff2d\034\uff2d" +
    "\040\uff2d\041\uff2d\042\uff2d\054\uff2d\055\uff2d\056\uff2d\057" +
    "\uff2d\060\uff2d\061\uff2d\062\uff2d\063\uff2d\064\uff2d\065\uff2d" +
    "\066\uff2d\067\uff2d\070\uff2d\071\uff2d\072\uff2d\073\uff2d\074" +
    "\uff2d\075\uff2d\076\uff2d\100\uff2d\101\uff2d\102\uff2d\104\uff2d" +
    "\105\uff2d\106\uff2d\107\uff2d\111\uff2d\112\uff2d\113\uff2d\114" +
    "\uff2d\115\uff2d\116\uff2d\117\uff2d\120\uff2d\121\uff2d\122\uff2d" +
    "\001\002\000\046\003\u0190\032\021\054\054\055\077\075" +
    "\025\076\uff28\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\006\041\uffda\072\uffda\001\002\000\006" +
    "\041\uffd3\072\uffd3\001\002\000\050\003\u017a\032\021\036" +
    "\033\054\054\055\077\075\025\077\010\101\030\102\u0178" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\116\132\022\133\112\001\002\000\040\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\116\132\022" +
    "\133\112\001\002\000\006\041\uffdb\072\uffdb\001\002\000" +
    "\052\003\uff2b\032\021\041\uff2b\054\054\055\077\072\uff2b" +
    "\075\025\077\010\101\030\102\uff2b\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\116\132\022" +
    "\133\112\001\002\000\040\054\uff33\055\uff33\075\uff33\077" +
    "\uff33\101\uff33\103\uff33\123\uff33\124\uff33\125\uff33\126\uff33" +
    "\127\uff33\130\uff33\131\uff33\132\uff33\133\uff33\001\002\000" +
    "\004\132\u0152\001\002\000\142\003\uff48\004\uff48\005\uff48" +
    "\023\uff48\026\uff48\030\uff48\031\uff48\033\uff48\034\uff48\040" +
    "\uff48\041\uff48\042\uff48\054\uff48\055\uff48\056\uff48\057\uff48" +
    "\060\uff48\061\uff48\062\u011b\063\uff48\064\uff48\065\uff48\066" +
    "\uff48\067\uff48\070\uff48\071\uff48\072\uff48\073\uff48\074\uff48" +
    "\075\u0118\076\uff48\100\uff48\101\u011a\102\uff48\104\uff48\105" +
    "\uff48\106\uff48\107\uff48\111\uff48\112\uff48\113\uff48\114\uff48" +
    "\115\uff48\116\uff48\117\uff48\120\uff48\121\uff48\122\uff48\001" +
    "\002\000\006\041\uffd1\072\uffd1\001\002\000\126\002\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\017" +
    "\uff8f\020\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f" +
    "\032\uff8f\035\uff8f\036\uff8f\041\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f" +
    "\055\uff8f\075\uff8f\077\uff8f\101\uff8f\103\uff8f\110\uff8f\123" +
    "\uff8f\124\uff8f\125\uff8f\126\uff8f\127\uff8f\130\uff8f\131\uff8f" +
    "\132\uff8f\133\uff8f\001\002\000\142\003\uff32\004\uff32\005" +
    "\uff32\023\uff32\026\uff32\030\uff32\031\uff32\033\uff32\034\uff32" +
    "\040\uff32\041\uff32\042\uff32\054\uff32\055\uff32\056\uff32\057" +
    "\uff32\060\uff32\061\uff32\062\uff32\063\uff32\064\uff32\065\uff32" +
    "\066\uff32\067\uff32\070\uff32\071\uff32\072\uff32\073\uff32\074" +
    "\uff32\075\uff32\076\uff32\100\uff32\101\uff32\102\uff32\104\uff32" +
    "\105\uff32\106\uff32\107\uff32\111\uff32\112\uff32\113\uff32\114" +
    "\uff32\115\uff32\116\uff32\117\uff32\120\uff32\121\uff32\122\uff32" +
    "\001\002\000\006\041\uffd5\072\uffd5\001\002\000\006\041" +
    "\uffb9\072\uffb9\001\002\000\126\002\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\017\uff94\020\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\032\uff94\035\uff94" +
    "\036\uff94\041\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\075\uff94" +
    "\077\uff94\101\uff94\103\uff94\110\uff94\123\uff94\124\uff94\125" +
    "\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132\uff94\133\uff94" +
    "\001\002\000\126\002\uff95\006\uff95\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\017\uff95\020\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\032\uff95\035\uff95\036\uff95\041" +
    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\075\uff95\077\uff95\101" +
    "\uff95\103\uff95\110\uff95\123\uff95\124\uff95\125\uff95\126\uff95" +
    "\127\uff95\130\uff95\131\uff95\132\uff95\133\uff95\001\002\000" +
    "\004\132\u010d\001\002\000\010\010\ufff9\012\ufff9\110\ufff9" +
    "\001\002\000\004\002\000\001\002\000\036\041\uffd0\071" +
    "\172\072\uffd0\073\u0105\111\u0101\112\u0102\113\377\114\376" +
    "\115\u0109\116\u0100\117\u0103\120\u0108\121\375\122\u0104\001" +
    "\002\000\126\002\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\017\uff91\020\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\032\uff91\035\uff91\036\uff91\041\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\075\uff91\077\uff91\101\uff91" +
    "\103\uff91\110\uff91\123\uff91\124\uff91\125\uff91\126\uff91\127" +
    "\uff91\130\uff91\131\uff91\132\uff91\133\uff91\001\002\000\134" +
    "\003\uff65\004\343\005\uff65\023\uff65\026\uff65\030\352\031" +
    "\345\033\353\034\347\040\351\041\uff65\042\361\054\346" +
    "\055\366\056\362\057\364\060\342\061\350\063\365\064" +
    "\355\065\367\066\356\067\370\070\371\071\uff65\072\uff65" +
    "\073\uff65\074\uff65\076\uff65\100\uff65\102\uff65\104\363\105" +
    "\344\106\360\107\354\111\uff65\112\uff65\113\uff65\114\uff65" +
    "\115\uff65\116\uff65\117\uff65\120\uff65\121\uff65\122\uff65\001" +
    "\002\000\040\054\uff34\055\uff34\075\uff34\077\uff34\101\uff34" +
    "\103\uff34\123\uff34\124\uff34\125\uff34\126\uff34\127\uff34\130" +
    "\uff34\131\uff34\132\uff34\133\uff34\001\002\000\126\002\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\017" +
    "\uffe2\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\032\uffe2\035\uffe2\036\uffe2\041\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\075\uffe2\077\uffe2\101\uffe2\103\uffe2\110\uffe2\123" +
    "\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2" +
    "\132\uffe2\133\uffe2\001\002\000\040\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\116\132\022\133\112\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\142" +
    "\003\uff2f\004\uff2f\005\uff2f\023\uff2f\026\uff2f\030\uff2f\031" +
    "\uff2f\033\uff2f\034\uff2f\040\uff2f\041\uff2f\042\uff2f\054\uff2f" +
    "\055\uff2f\056\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063" +
    "\uff2f\064\uff2f\065\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f" +
    "\072\uff2f\073\uff2f\074\uff2f\075\uff2f\076\uff2f\100\uff2f\101" +
    "\uff2f\102\uff2f\104\uff2f\105\uff2f\106\uff2f\107\uff2f\111\uff2f" +
    "\112\uff2f\113\uff2f\114\uff2f\115\uff2f\116\uff2f\117\uff2f\120" +
    "\uff2f\121\uff2f\122\uff2f\001\002\000\142\003\uff30\004\uff30" +
    "\005\uff30\023\uff30\026\uff30\030\uff30\031\uff30\033\uff30\034" +
    "\uff30\040\uff30\041\uff30\042\uff30\054\uff30\055\uff30\056\uff30" +
    "\057\uff30\060\uff30\061\uff30\062\uff30\063\uff30\064\uff30\065" +
    "\uff30\066\uff30\067\uff30\070\uff30\071\uff30\072\uff30\073\uff30" +
    "\074\uff30\075\uff30\076\uff30\100\uff30\101\uff30\102\uff30\104" +
    "\uff30\105\uff30\106\uff30\107\uff30\111\uff30\112\uff30\113\uff30" +
    "\114\uff30\115\uff30\116\uff30\117\uff30\120\uff30\121\uff30\122" +
    "\uff30\001\002\000\040\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\042" +
    "\032\021\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\116\132\022\133\112\001\002\000\010\010\046\012" +
    "\035\110\005\001\002\000\004\074\247\001\002\000\006" +
    "\041\uffd9\072\uffd9\001\002\000\052\003\uff22\023\uff22\026" +
    "\uff22\041\uff22\071\uff22\072\uff22\073\uff22\074\uff22\076\uff22" +
    "\102\uff22\111\uff22\112\uff22\113\uff22\114\uff22\115\uff22\116" +
    "\uff22\117\uff22\120\uff22\121\uff22\122\uff22\001\002\000\006" +
    "\041\uffbb\072\uffbb\001\002\000\006\041\uffd8\072\uffd8\001" +
    "\002\000\006\041\ufeeb\072\ufeeb\001\002\000\142\003\uff2c" +
    "\004\uff2c\005\uff2c\023\uff2c\026\uff2c\030\uff2c\031\uff2c\033" +
    "\uff2c\034\uff2c\040\uff2c\041\uff2c\042\uff2c\054\uff2c\055\uff2c" +
    "\056\uff2c\057\uff2c\060\uff2c\061\uff2c\062\uff2c\063\uff2c\064" +
    "\uff2c\065\uff2c\066\uff2c\067\uff2c\070\uff2c\071\uff2c\072\uff2c" +
    "\073\uff2c\074\uff2c\075\uff2c\076\uff2c\100\uff2c\101\uff2c\102" +
    "\uff2c\104\uff2c\105\uff2c\106\uff2c\107\uff2c\111\uff2c\112\uff2c" +
    "\113\uff2c\114\uff2c\115\uff2c\116\uff2c\117\uff2c\120\uff2c\121" +
    "\uff2c\122\uff2c\001\002\000\050\032\021\041\uffc3\054\054" +
    "\055\077\072\uffc3\075\025\077\010\101\030\103\034\107" +
    "\243\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\116\132\022\133\112\001\002\000\004\132\233\001" +
    "\002\000\126\002\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\017\uff93\020\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\032\uff93\035\uff93\036\uff93\041\uff93" +
    "\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052" +
    "\uff93\053\uff93\054\uff93\055\uff93\075\uff93\077\uff93\101\uff93" +
    "\103\uff93\110\uff93\123\uff93\124\uff93\125\uff93\126\uff93\127" +
    "\uff93\130\uff93\131\uff93\132\uff93\133\uff93\001\002\000\040" +
    "\054\uff35\055\uff35\075\uff35\077\uff35\101\uff35\103\uff35\123" +
    "\uff35\124\uff35\125\uff35\126\uff35\127\uff35\130\uff35\131\uff35" +
    "\132\uff35\133\uff35\001\002\000\006\041\uffba\072\uffba\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\004" +
    "\002\174\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\116\132\022\133\112\001" +
    "\002\000\126\002\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\013\uff90\017\uff90\020\uff90\023\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\032\uff90\035\uff90\036\uff90\041\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\055\uff90\075\uff90\077\uff90\101\uff90" +
    "\103\uff90\110\uff90\123\uff90\124\uff90\125\uff90\126\uff90\127" +
    "\uff90\130\uff90\131\uff90\132\uff90\133\uff90\001\002\000\006" +
    "\041\uffb7\072\uffb7\001\002\000\060\003\uff64\005\uff64\023" +
    "\uff64\026\uff64\041\uff64\042\uff64\071\uff64\072\uff64\073\uff64" +
    "\074\uff64\076\uff64\100\uff64\102\uff64\111\uff64\112\uff64\113" +
    "\uff64\114\uff64\115\uff64\116\uff64\117\uff64\120\uff64\121\uff64" +
    "\122\uff64\001\002\000\126\002\uff92\006\uff92\007\uff92\010" +
    "\uff92\011\uff92\012\uff92\013\uff92\017\uff92\020\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\032\uff92\035\uff92\036" +
    "\uff92\041\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\075\uff92\077" +
    "\uff92\101\uff92\103\uff92\110\uff92\123\uff92\124\uff92\125\uff92" +
    "\126\uff92\127\uff92\130\uff92\131\uff92\132\uff92\133\uff92\001" +
    "\002\000\004\132\165\001\002\000\142\003\uff45\004\uff45" +
    "\005\uff45\023\uff45\026\uff45\030\uff45\031\uff45\033\uff45\034" +
    "\uff45\040\uff45\041\uff45\042\uff45\054\uff45\055\uff45\056\uff45" +
    "\057\uff45\060\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065" +
    "\uff45\066\uff45\067\uff45\070\uff45\071\uff45\072\uff45\073\uff45" +
    "\074\uff45\075\uff45\076\uff45\100\uff45\101\uff45\102\uff45\104" +
    "\uff45\105\uff45\106\uff45\107\uff45\111\uff45\112\uff45\113\uff45" +
    "\114\uff45\115\uff45\116\uff45\117\uff45\120\uff45\121\uff45\122" +
    "\uff45\001\002\000\142\003\uff44\004\uff44\005\uff44\023\uff44" +
    "\026\uff44\030\uff44\031\uff44\033\uff44\034\uff44\040\uff44\041" +
    "\uff44\042\uff44\054\uff44\055\uff44\056\uff44\057\uff44\060\uff44" +
    "\061\uff44\062\uff44\063\uff44\064\uff44\065\uff44\066\uff44\067" +
    "\uff44\070\uff44\071\uff44\072\uff44\073\uff44\074\uff44\075\uff44" +
    "\076\uff44\100\uff44\101\uff44\102\uff44\104\uff44\105\uff44\106" +
    "\uff44\107\uff44\111\uff44\112\uff44\113\uff44\114\uff44\115\uff44" +
    "\116\uff44\117\uff44\120\uff44\121\uff44\122\uff44\001\002\000" +
    "\004\101\154\001\002\000\006\041\144\072\143\001\002" +
    "\000\126\002\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\017\uffe3\020\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\032\uffe3\035\uffe3\036\uffe3\041\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\075\uffe3\077\uffe3\101\uffe3\103" +
    "\uffe3\110\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3" +
    "\130\uffe3\131\uffe3\132\uffe3\133\uffe3\001\002\000\142\003" +
    "\uff31\004\uff31\005\uff31\023\uff31\026\uff31\030\uff31\031\uff31" +
    "\033\uff31\034\uff31\040\uff31\041\uff31\042\uff31\054\uff31\055" +
    "\uff31\056\uff31\057\uff31\060\uff31\061\uff31\062\uff31\063\uff31" +
    "\064\uff31\065\uff31\066\uff31\067\uff31\070\uff31\071\uff31\072" +
    "\uff31\073\uff31\074\uff31\075\uff31\076\uff31\100\uff31\101\uff31" +
    "\102\uff31\104\uff31\105\uff31\106\uff31\107\uff31\111\uff31\112" +
    "\uff31\113\uff31\114\uff31\115\uff31\116\uff31\117\uff31\120\uff31" +
    "\121\uff31\122\uff31\001\002\000\006\041\uffd2\072\uffd2\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\010" +
    "\005\141\071\uff6f\074\uff6f\001\002\000\004\071\123\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\006" +
    "\071\125\074\126\001\002\000\042\032\021\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\102\006\103\007\070\011\100\013\031" +
    "\017\056\020\072\024\007\025\110\027\075\032\021\035" +
    "\023\036\033\041\130\045\074\046\020\047\063\053\113" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\126\002\uff70\006\uff70\007" +
    "\uff70\010\uff70\011\uff70\012\uff70\013\uff70\017\uff70\020\uff70" +
    "\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\032\uff70\035" +
    "\uff70\036\uff70\041\uff70\044\uff70\045\uff70\046\uff70\047\uff70" +
    "\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70\075" +
    "\uff70\077\uff70\101\uff70\103\uff70\110\uff70\123\uff70\124\uff70" +
    "\125\uff70\126\uff70\127\uff70\130\uff70\131\uff70\132\uff70\133" +
    "\uff70\001\002\000\004\043\132\001\002\000\136\002\uff6b" +
    "\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014" +
    "\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\022\uff6b\023\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\032\uff6b\035\uff6b\036" +
    "\uff6b\041\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b" +
    "\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\075\uff6b\077" +
    "\uff6b\101\uff6b\103\uff6b\110\uff6b\123\uff6b\124\uff6b\125\uff6b" +
    "\126\uff6b\127\uff6b\130\uff6b\131\uff6b\132\uff6b\133\uff6b\001" +
    "\002\000\120\006\103\007\070\010\046\011\100\012\035" +
    "\013\031\017\056\020\072\023\062\024\007\025\110\026" +
    "\101\027\075\032\021\035\023\036\033\045\074\046\020" +
    "\047\063\050\065\051\057\052\120\053\113\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\110\005\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\122\006\uff68\007\uff68\010\uff68" +
    "\011\uff68\012\uff68\013\uff68\017\uff68\020\uff68\023\uff68\024" +
    "\uff68\025\uff68\026\uff68\027\uff68\032\uff68\035\uff68\036\uff68" +
    "\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052" +
    "\uff68\053\uff68\054\uff68\055\uff68\075\uff68\077\uff68\101\uff68" +
    "\103\uff68\110\uff68\123\uff68\124\uff68\125\uff68\126\uff68\127" +
    "\uff68\130\uff68\131\uff68\132\uff68\133\uff68\001\002\000\122" +
    "\006\103\007\070\010\046\011\100\012\035\013\031\017" +
    "\056\020\072\023\062\024\007\025\110\026\101\027\075" +
    "\032\021\035\023\036\033\044\136\045\074\046\020\047" +
    "\063\050\065\051\057\052\120\053\113\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\110\005\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\116\132\022" +
    "\133\112\001\002\000\122\006\uff69\007\uff69\010\uff69\011" +
    "\uff69\012\uff69\013\uff69\017\uff69\020\uff69\023\uff69\024\uff69" +
    "\025\uff69\026\uff69\027\uff69\032\uff69\035\uff69\036\uff69\044" +
    "\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69" +
    "\053\uff69\054\uff69\055\uff69\075\uff69\077\uff69\101\uff69\103" +
    "\uff69\110\uff69\123\uff69\124\uff69\125\uff69\126\uff69\127\uff69" +
    "\130\uff69\131\uff69\132\uff69\133\uff69\001\002\000\136\002" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a" +
    "\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\022\uff6a\023" +
    "\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\032\uff6a\035\uff6a" +
    "\036\uff6a\041\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050" +
    "\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\075\uff6a" +
    "\077\uff6a\101\uff6a\103\uff6a\110\uff6a\123\uff6a\124\uff6a\125" +
    "\uff6a\126\uff6a\127\uff6a\130\uff6a\131\uff6a\132\uff6a\133\uff6a" +
    "\001\002\000\006\071\uff6c\074\uff6c\001\002\000\006\071" +
    "\uff6d\074\uff6d\001\002\000\040\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\116\132\022\133\112\001\002" +
    "\000\006\071\uff6e\074\uff6e\001\002\000\102\006\103\007" +
    "\070\011\100\013\031\017\056\020\072\024\007\025\110" +
    "\027\075\032\021\035\023\036\033\041\152\045\074\046" +
    "\020\047\063\053\113\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\136" +
    "\002\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\032\uffe1\035" +
    "\uffe1\036\uffe1\041\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\075" +
    "\uffe1\077\uffe1\101\uffe1\103\uffe1\110\uffe1\123\uffe1\124\uffe1" +
    "\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133" +
    "\uffe1\001\002\000\006\041\147\072\146\001\002\000\102" +
    "\006\103\007\070\011\100\013\031\017\056\020\072\024" +
    "\007\025\110\027\075\032\021\035\023\036\033\041\150" +
    "\045\074\046\020\047\063\053\113\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\116\132\022\133\112\001" +
    "\002\000\136\002\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\032\uffdf\035\uffdf\036\uffdf\041\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\075\uffdf\077\uffdf\101\uffdf\103\uffdf\110\uffdf\123" +
    "\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf" +
    "\132\uffdf\133\uffdf\001\002\000\136\002\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\032\uffde\035\uffde\036\uffde\041\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\075\uffde\077\uffde\101\uffde" +
    "\103\uffde\110\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127" +
    "\uffde\130\uffde\131\uffde\132\uffde\133\uffde\001\002\000\006" +
    "\041\uffdc\072\uffdc\001\002\000\136\002\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\032\uffe0\035\uffe0\036\uffe0\041\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\075\uffe0\077\uffe0\101\uffe0" +
    "\103\uffe0\110\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127" +
    "\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\001\002\000\006" +
    "\041\uffdd\072\uffdd\001\002\000\040\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\116\132\022\133\112\001" +
    "\002\000\006\071\156\102\157\001\002\000\040\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\116\132\022" +
    "\133\112\001\002\000\016\003\uffbf\023\uffbf\026\uffbf\041" +
    "\uffbf\072\uffbf\074\uffbf\001\002\000\006\071\161\102\162" +
    "\001\002\000\040\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\016\003" +
    "\uffbe\023\uffbe\026\uffbe\041\uffbe\072\uffbe\074\uffbe\001\002" +
    "\000\004\102\164\001\002\000\016\003\uffbd\023\uffbd\026" +
    "\uffbd\041\uffbd\072\uffbd\074\uffbd\001\002\000\010\041\uff9a" +
    "\071\uff9a\072\uff9a\001\002\000\010\041\uff9c\071\167\072" +
    "\uff9c\001\002\000\004\132\170\001\002\000\010\041\uff9b" +
    "\071\uff9b\072\uff9b\001\002\000\010\041\uff96\071\172\072" +
    "\uff96\001\002\000\042\032\021\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\116\132\022\133\112\001\002" +
    "\000\052\003\uff23\023\uff23\026\uff23\041\uff23\071\uff23\072" +
    "\uff23\073\uff23\074\uff23\076\uff23\102\uff23\111\uff23\112\uff23" +
    "\113\uff23\114\uff23\115\uff23\116\uff23\117\uff23\120\uff23\121" +
    "\uff23\122\uff23\001\002\000\004\002\001\001\002\000\006" +
    "\003\176\074\177\001\002\000\102\006\103\007\070\011" +
    "\100\013\031\017\056\020\072\024\007\025\110\027\075" +
    "\032\021\035\023\036\033\041\130\045\074\046\020\047" +
    "\063\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\116\132\022\133\112\001\002\000\102\006\103" +
    "\007\070\011\100\013\031\017\056\020\072\024\007\025" +
    "\110\027\075\032\021\035\023\036\033\041\130\045\074" +
    "\046\020\047\063\053\113\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\132\002\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\013\uff8d\014\202\015\201\017\uff8d\020\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\032\uff8d\035\uff8d\036\uff8d" +
    "\041\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\075\uff8d\077\uff8d" +
    "\101\uff8d\103\uff8d\110\uff8d\123\uff8d\124\uff8d\125\uff8d\126" +
    "\uff8d\127\uff8d\130\uff8d\131\uff8d\132\uff8d\133\uff8d\001\002" +
    "\000\006\003\220\074\221\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\132\002\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\205\015\204\017" +
    "\uff8b\020\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\032\uff8b\035\uff8b\036\uff8b\041\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\075\uff8b\077\uff8b\101\uff8b\103\uff8b\110\uff8b\123" +
    "\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b" +
    "\132\uff8b\133\uff8b\001\002\000\004\074\211\001\002\000" +
    "\042\032\021\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\116\132\022\133\112\001\002\000\004\074\207" +
    "\001\002\000\102\006\103\007\070\011\100\013\031\017" +
    "\056\020\072\024\007\025\110\027\075\032\021\035\023" +
    "\036\033\041\130\045\074\046\020\047\063\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\132\002\uff84\006\uff84\007\uff84" +
    "\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\017" +
    "\uff84\020\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\032\uff84\035\uff84\036\uff84\041\uff84\044\uff84\045\uff84\046" +
    "\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\075\uff84\077\uff84\101\uff84\103\uff84\110\uff84\123" +
    "\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84\131\uff84" +
    "\132\uff84\133\uff84\001\002\000\102\006\103\007\070\011" +
    "\100\013\031\017\056\020\072\024\007\025\110\027\075" +
    "\032\021\035\023\036\033\041\130\045\074\046\020\047" +
    "\063\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\116\132\022\133\112\001\002\000\126\002\uff8a" +
    "\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\017" +
    "\uff8a\020\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\032\uff8a\035\uff8a\036\uff8a\041\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\075\uff8a\077\uff8a\101\uff8a\103\uff8a\110\uff8a\123" +
    "\uff8a\124\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a" +
    "\132\uff8a\133\uff8a\001\002\000\006\003\214\074\215\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\110\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\116\132\022" +
    "\133\112\001\002\000\102\006\103\007\070\011\100\013" +
    "\031\017\056\020\072\024\007\025\110\027\075\032\021" +
    "\035\023\036\033\041\130\045\074\046\020\047\063\053" +
    "\113\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\116\132\022\133\112\001\002\000\132\002\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015" +
    "\uff85\017\uff85\020\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\032\uff85\035\uff85\036\uff85\041\uff85\044\uff85\045" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\055\uff85\075\uff85\077\uff85\101\uff85\103\uff85\110" +
    "\uff85\123\uff85\124\uff85\125\uff85\126\uff85\127\uff85\130\uff85" +
    "\131\uff85\132\uff85\133\uff85\001\002\000\132\002\uff83\006" +
    "\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83" +
    "\015\uff83\017\uff83\020\uff83\023\uff83\024\uff83\025\uff83\026" +
    "\uff83\027\uff83\032\uff83\035\uff83\036\uff83\041\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053" +
    "\uff83\054\uff83\055\uff83\075\uff83\077\uff83\101\uff83\103\uff83" +
    "\110\uff83\123\uff83\124\uff83\125\uff83\126\uff83\127\uff83\130" +
    "\uff83\131\uff83\132\uff83\133\uff83\001\002\000\102\006\103" +
    "\007\070\011\100\013\031\017\056\020\072\024\007\025" +
    "\110\027\075\032\021\035\023\036\033\041\130\045\074" +
    "\046\020\047\063\053\113\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\102\006\103\007\070\011\100\013\031\017\056\020\072" +
    "\024\007\025\110\027\075\032\021\035\023\036\033\041" +
    "\130\045\074\046\020\047\063\053\113\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\116\132\022\133\112" +
    "\001\002\000\126\002\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\012\uff8c\013\uff8c\017\uff8c\020\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\032\uff8c\035\uff8c\036\uff8c\041" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\075\uff8c\077\uff8c\101" +
    "\uff8c\103\uff8c\110\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c" +
    "\127\uff8c\130\uff8c\131\uff8c\132\uff8c\133\uff8c\001\002\000" +
    "\126\002\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\013\uff86\017\uff86\020\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\032\uff86\035\uff86\036\uff86\041\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\054\uff86\055\uff86\075\uff86\077\uff86\101\uff86\103\uff86" +
    "\110\uff86\123\uff86\124\uff86\125\uff86\126\uff86\127\uff86\130" +
    "\uff86\131\uff86\132\uff86\133\uff86\001\002\000\130\002\uff89" +
    "\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014" +
    "\202\017\uff89\020\uff89\023\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\032\uff89\035\uff89\036\uff89\041\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\075\uff89\077\uff89\101\uff89\103\uff89\110" +
    "\uff89\123\uff89\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89" +
    "\131\uff89\132\uff89\133\uff89\001\002\000\132\002\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\205" +
    "\015\226\017\uff88\020\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\032\uff88\035\uff88\036\uff88\041\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053" +
    "\uff88\054\uff88\055\uff88\075\uff88\077\uff88\101\uff88\103\uff88" +
    "\110\uff88\123\uff88\124\uff88\125\uff88\126\uff88\127\uff88\130" +
    "\uff88\131\uff88\132\uff88\133\uff88\001\002\000\004\074\227" +
    "\001\002\000\102\006\103\007\070\011\100\013\031\017" +
    "\056\020\072\024\007\025\110\027\075\032\021\035\023" +
    "\036\033\041\130\045\074\046\020\047\063\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\126\002\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\013\uff87\017\uff87\020\uff87\023" +
    "\uff87\024\uff87\025\uff87\026\uff87\027\uff87\032\uff87\035\uff87" +
    "\036\uff87\041\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\075\uff87" +
    "\077\uff87\101\uff87\103\uff87\110\uff87\123\uff87\124\uff87\125" +
    "\uff87\126\uff87\127\uff87\130\uff87\131\uff87\132\uff87\133\uff87" +
    "\001\002\000\012\005\241\041\uffa5\071\uffa5\072\uffa5\001" +
    "\002\000\010\041\uffb2\071\237\072\uffb2\001\002\000\020" +
    "\005\uffa3\027\uffa3\041\uffa3\062\235\071\uffa3\072\uffa3\101" +
    "\uffa3\001\002\000\010\041\uffa7\071\uffa7\072\uffa7\001\002" +
    "\000\004\132\233\001\002\000\016\005\uffa4\027\uffa4\041" +
    "\uffa4\071\uffa4\072\uffa4\101\uffa4\001\002\000\004\132\233" +
    "\001\002\000\010\041\uffa8\071\uffa8\072\uffa8\001\002\000" +
    "\004\132\242\001\002\000\010\041\uffa6\071\uffa6\072\uffa6" +
    "\001\002\000\042\032\021\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\010\041\uffc2\071\245\072\uffc2\001\002\000\046\032\021" +
    "\041\uffc1\054\054\055\077\072\uffc1\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\010\041" +
    "\uffc0\071\172\072\uffc0\001\002\000\102\006\103\007\070" +
    "\011\100\013\031\017\056\020\072\024\007\025\110\027" +
    "\075\032\021\035\023\036\033\041\130\045\074\046\020" +
    "\047\063\053\113\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\006\016" +
    "\253\022\252\001\002\000\134\002\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\011\uff7a\012\uff7a\013\uff7a\015\267\016\253\017" +
    "\uff7a\020\uff7a\022\266\023\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\027\uff7a\032\uff7a\035\uff7a\036\uff7a\041\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\055\uff7a\075\uff7a\077\uff7a\101\uff7a\103\uff7a\110" +
    "\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a\127\uff7a\130\uff7a" +
    "\131\uff7a\132\uff7a\133\uff7a\001\002\000\004\074\264\001" +
    "\002\000\044\032\021\054\054\055\077\074\uff74\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\116\132\022\133\112\001\002" +
    "\000\004\074\255\001\002\000\102\006\103\007\070\011" +
    "\100\013\031\017\056\020\072\024\007\025\110\027\075" +
    "\032\021\035\023\036\033\041\130\045\074\046\020\047" +
    "\063\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\116\132\022\133\112\001\002\000\134\002\uff76" +
    "\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\015" +
    "\uff76\016\uff76\017\uff76\020\uff76\022\uff76\023\uff76\024\uff76" +
    "\025\uff76\026\uff76\027\uff76\032\uff76\035\uff76\036\uff76\041" +
    "\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76" +
    "\052\uff76\053\uff76\054\uff76\055\uff76\075\uff76\077\uff76\101" +
    "\uff76\103\uff76\110\uff76\123\uff76\124\uff76\125\uff76\126\uff76" +
    "\127\uff76\130\uff76\131\uff76\132\uff76\133\uff76\001\002\000" +
    "\010\005\261\071\260\074\uff73\001\002\000\042\032\021" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\042\032\021\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\004\074\uff72\001\002\000\004\074\uff71" +
    "\001\002\000\102\006\103\007\070\011\100\013\031\017" +
    "\056\020\072\024\007\025\110\027\075\032\021\035\023" +
    "\036\033\041\130\045\074\046\020\047\063\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\126\002\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\011\uff7b\012\uff7b\013\uff7b\017\uff7b\020\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\032\uff7b\035\uff7b" +
    "\036\uff7b\041\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\075\uff7b" +
    "\077\uff7b\101\uff7b\103\uff7b\110\uff7b\123\uff7b\124\uff7b\125" +
    "\uff7b\126\uff7b\127\uff7b\130\uff7b\131\uff7b\132\uff7b\133\uff7b" +
    "\001\002\000\004\074\300\001\002\000\004\074\273\001" +
    "\002\000\004\074\271\001\002\000\102\006\103\007\070" +
    "\011\100\013\031\017\056\020\072\024\007\025\110\027" +
    "\075\032\021\035\023\036\033\041\130\045\074\046\020" +
    "\047\063\053\113\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\134\002" +
    "\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75" +
    "\015\uff75\016\uff75\017\uff75\020\uff75\022\uff75\023\uff75\024" +
    "\uff75\025\uff75\026\uff75\027\uff75\032\uff75\035\uff75\036\uff75" +
    "\041\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\075\uff75\077\uff75" +
    "\101\uff75\103\uff75\110\uff75\123\uff75\124\uff75\125\uff75\126" +
    "\uff75\127\uff75\130\uff75\131\uff75\132\uff75\133\uff75\001\002" +
    "\000\102\006\103\007\070\011\100\013\031\017\056\020" +
    "\072\024\007\025\110\027\075\032\021\035\023\036\033" +
    "\041\130\045\074\046\020\047\063\053\113\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\130\002\uff79\006\uff79\007\uff79\010\uff79" +
    "\011\uff79\012\uff79\013\uff79\017\uff79\020\uff79\022\275\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\027\uff79\032\uff79\035\uff79" +
    "\036\uff79\041\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\075\uff79" +
    "\077\uff79\101\uff79\103\uff79\110\uff79\123\uff79\124\uff79\125" +
    "\uff79\126\uff79\127\uff79\130\uff79\131\uff79\132\uff79\133\uff79" +
    "\001\002\000\004\074\276\001\002\000\102\006\103\007" +
    "\070\011\100\013\031\017\056\020\072\024\007\025\110" +
    "\027\075\032\021\035\023\036\033\041\130\045\074\046" +
    "\020\047\063\053\113\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\126" +
    "\002\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013" +
    "\uff77\017\uff77\020\uff77\023\uff77\024\uff77\025\uff77\026\uff77" +
    "\027\uff77\032\uff77\035\uff77\036\uff77\041\uff77\044\uff77\045" +
    "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77" +
    "\054\uff77\055\uff77\075\uff77\077\uff77\101\uff77\103\uff77\110" +
    "\uff77\123\uff77\124\uff77\125\uff77\126\uff77\127\uff77\130\uff77" +
    "\131\uff77\132\uff77\133\uff77\001\002\000\102\006\103\007" +
    "\070\011\100\013\031\017\056\020\072\024\007\025\110" +
    "\027\075\032\021\035\023\036\033\041\130\045\074\046" +
    "\020\047\063\053\113\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\126" +
    "\002\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013" +
    "\uff78\017\uff78\020\uff78\023\uff78\024\uff78\025\uff78\026\uff78" +
    "\027\uff78\032\uff78\035\uff78\036\uff78\041\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\075\uff78\077\uff78\101\uff78\103\uff78\110" +
    "\uff78\123\uff78\124\uff78\125\uff78\126\uff78\127\uff78\130\uff78" +
    "\131\uff78\132\uff78\133\uff78\001\002\000\010\010\ufff8\012" +
    "\ufff8\110\ufff8\001\002\000\126\002\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\017\ufff6\020\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6\035\ufff6" +
    "\036\ufff6\041\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\075\ufff6" +
    "\077\ufff6\101\ufff6\103\ufff6\110\ufff6\123\ufff6\124\ufff6\125" +
    "\ufff6\126\ufff6\127\ufff6\130\ufff6\131\ufff6\132\ufff6\133\ufff6" +
    "\001\002\000\126\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\017\ufff7\020\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\032\ufff7\035\ufff7\036\ufff7\041" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\075\ufff7\077\ufff7\101" +
    "\ufff7\103\ufff7\110\ufff7\123\ufff7\124\ufff7\125\ufff7\126\ufff7" +
    "\127\ufff7\130\ufff7\131\ufff7\132\ufff7\133\ufff7\001\002\000" +
    "\010\041\uffb6\071\172\072\uffb6\001\002\000\006\030\311" +
    "\071\310\001\002\000\012\030\uff21\041\uff21\071\uff21\072" +
    "\uff21\001\002\000\040\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\044" +
    "\032\021\053\113\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\006\003" +
    "\320\074\321\001\002\000\010\003\314\071\172\074\315" +
    "\001\002\000\102\006\103\007\070\011\100\013\031\017" +
    "\056\020\072\024\007\025\110\027\075\032\021\035\023" +
    "\036\033\041\130\045\074\046\020\047\063\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\102\006\103\007\070\011\100" +
    "\013\031\017\056\020\072\024\007\025\110\027\075\032" +
    "\021\035\023\036\033\041\130\045\074\046\020\047\063" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\116\132\022\133\112\001\002\000\126\002\uff7f\006" +
    "\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\017\uff7f" +
    "\020\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\032" +
    "\uff7f\035\uff7f\036\uff7f\041\uff7f\044\uff7f\045\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055" +
    "\uff7f\075\uff7f\077\uff7f\101\uff7f\103\uff7f\110\uff7f\123\uff7f" +
    "\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130\uff7f\131\uff7f\132" +
    "\uff7f\133\uff7f\001\002\000\126\002\uff7d\006\uff7d\007\uff7d" +
    "\010\uff7d\011\uff7d\012\uff7d\013\uff7d\017\uff7d\020\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\032\uff7d\035\uff7d" +
    "\036\uff7d\041\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050" +
    "\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\075\uff7d" +
    "\077\uff7d\101\uff7d\103\uff7d\110\uff7d\123\uff7d\124\uff7d\125" +
    "\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d\132\uff7d\133\uff7d" +
    "\001\002\000\102\006\103\007\070\011\100\013\031\017" +
    "\056\020\072\024\007\025\110\027\075\032\021\035\023" +
    "\036\033\041\130\045\074\046\020\047\063\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\102\006\103\007\070\011\100" +
    "\013\031\017\056\020\072\024\007\025\110\027\075\032" +
    "\021\035\023\036\033\041\130\045\074\046\020\047\063" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\116\132\022\133\112\001\002\000\126\002\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\017\uff7e" +
    "\020\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\032" +
    "\uff7e\035\uff7e\036\uff7e\041\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055" +
    "\uff7e\075\uff7e\077\uff7e\101\uff7e\103\uff7e\110\uff7e\123\uff7e" +
    "\124\uff7e\125\uff7e\126\uff7e\127\uff7e\130\uff7e\131\uff7e\132" +
    "\uff7e\133\uff7e\001\002\000\126\002\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\011\uff7c\012\uff7c\013\uff7c\017\uff7c\020\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\032\uff7c\035\uff7c" +
    "\036\uff7c\041\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\075\uff7c" +
    "\077\uff7c\101\uff7c\103\uff7c\110\uff7c\123\uff7c\124\uff7c\125" +
    "\uff7c\126\uff7c\127\uff7c\130\uff7c\131\uff7c\132\uff7c\133\uff7c" +
    "\001\002\000\012\030\uff20\041\uff20\071\uff20\072\uff20\001" +
    "\002\000\006\003\326\074\327\001\002\000\102\006\103" +
    "\007\070\011\100\013\031\017\056\020\072\024\007\025" +
    "\110\027\075\032\021\035\023\036\033\041\130\045\074" +
    "\046\020\047\063\053\113\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\102\006\103\007\070\011\100\013\031\017\056\020\072" +
    "\024\007\025\110\027\075\032\021\035\023\036\033\041" +
    "\130\045\074\046\020\047\063\053\113\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\116\132\022\133\112" +
    "\001\002\000\130\002\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\015\331\017\uff82\020\uff82\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\027\uff82\032\uff82\035\uff82\036" +
    "\uff82\041\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82" +
    "\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\075\uff82\077" +
    "\uff82\101\uff82\103\uff82\110\uff82\123\uff82\124\uff82\125\uff82" +
    "\126\uff82\127\uff82\130\uff82\131\uff82\132\uff82\133\uff82\001" +
    "\002\000\004\074\332\001\002\000\102\006\103\007\070" +
    "\011\100\013\031\017\056\020\072\024\007\025\110\027" +
    "\075\032\021\035\023\036\033\041\130\045\074\046\020" +
    "\047\063\053\113\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\126\002" +
    "\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81" +
    "\017\uff81\020\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\032\uff81\035\uff81\036\uff81\041\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\075\uff81\077\uff81\101\uff81\103\uff81\110\uff81" +
    "\123\uff81\124\uff81\125\uff81\126\uff81\127\uff81\130\uff81\131" +
    "\uff81\132\uff81\133\uff81\001\002\000\126\002\uff80\006\uff80" +
    "\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\017\uff80\020" +
    "\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\032\uff80" +
    "\035\uff80\036\uff80\041\uff80\044\uff80\045\uff80\046\uff80\047" +
    "\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80" +
    "\075\uff80\077\uff80\101\uff80\103\uff80\110\uff80\123\uff80\124" +
    "\uff80\125\uff80\126\uff80\127\uff80\130\uff80\131\uff80\132\uff80" +
    "\133\uff80\001\002\000\010\030\336\041\uff99\072\uff99\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\010" +
    "\041\uff98\071\340\072\uff98\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\006\041\uff97\072\uff97\001\002" +
    "\000\040\054\uff5c\055\uff5c\075\uff5c\077\uff5c\101\uff5c\103" +
    "\uff5c\123\uff5c\124\uff5c\125\uff5c\126\uff5c\127\uff5c\130\uff5c" +
    "\131\uff5c\132\uff5c\133\uff5c\001\002\000\040\054\uff4f\055" +
    "\uff4f\075\uff4f\077\uff4f\101\uff4f\103\uff4f\123\uff4f\124\uff4f" +
    "\125\uff4f\126\uff4f\127\uff4f\130\uff4f\131\uff4f\132\uff4f\133" +
    "\uff4f\001\002\000\040\054\uff4b\055\uff4b\075\uff4b\077\uff4b" +
    "\101\uff4b\103\uff4b\123\uff4b\124\uff4b\125\uff4b\126\uff4b\127" +
    "\uff4b\130\uff4b\131\uff4b\132\uff4b\133\uff4b\001\002\000\042" +
    "\033\374\054\uff5b\055\uff5b\075\uff5b\077\uff5b\101\uff5b\103" +
    "\uff5b\123\uff5b\124\uff5b\125\uff5b\126\uff5b\127\uff5b\130\uff5b" +
    "\131\uff5b\132\uff5b\133\uff5b\001\002\000\040\054\uff61\055" +
    "\uff61\075\uff61\077\uff61\101\uff61\103\uff61\123\uff61\124\uff61" +
    "\125\uff61\126\uff61\127\uff61\130\uff61\131\uff61\132\uff61\133" +
    "\uff61\001\002\000\040\054\uff4e\055\uff4e\075\uff4e\077\uff4e" +
    "\101\uff4e\103\uff4e\123\uff4e\124\uff4e\125\uff4e\126\uff4e\127" +
    "\uff4e\130\uff4e\131\uff4e\132\uff4e\133\uff4e\001\002\000\040" +
    "\054\uff5d\055\uff5d\075\uff5d\077\uff5d\101\uff5d\103\uff5d\123" +
    "\uff5d\124\uff5d\125\uff5d\126\uff5d\127\uff5d\130\uff5d\131\uff5d" +
    "\132\uff5d\133\uff5d\001\002\000\040\054\uff49\055\uff49\075" +
    "\uff49\077\uff49\101\uff49\103\uff49\123\uff49\124\uff49\125\uff49" +
    "\126\uff49\127\uff49\130\uff49\131\uff49\132\uff49\133\uff49\001" +
    "\002\000\040\054\uff5a\055\uff5a\075\uff5a\077\uff5a\101\uff5a" +
    "\103\uff5a\123\uff5a\124\uff5a\125\uff5a\126\uff5a\127\uff5a\130" +
    "\uff5a\131\uff5a\132\uff5a\133\uff5a\001\002\000\042\030\373" +
    "\054\uff4c\055\uff4c\075\uff4c\077\uff4c\101\uff4c\103\uff4c\123" +
    "\uff4c\124\uff4c\125\uff4c\126\uff4c\127\uff4c\130\uff4c\131\uff4c" +
    "\132\uff4c\133\uff4c\001\002\000\040\054\uff56\055\uff56\075" +
    "\uff56\077\uff56\101\uff56\103\uff56\123\uff56\124\uff56\125\uff56" +
    "\126\uff56\127\uff56\130\uff56\131\uff56\132\uff56\133\uff56\001" +
    "\002\000\040\054\uff54\055\uff54\075\uff54\077\uff54\101\uff54" +
    "\103\uff54\123\uff54\124\uff54\125\uff54\126\uff54\127\uff54\130" +
    "\uff54\131\uff54\132\uff54\133\uff54\001\002\000\040\054\uff52" +
    "\055\uff52\075\uff52\077\uff52\101\uff52\103\uff52\123\uff52\124" +
    "\uff52\125\uff52\126\uff52\127\uff52\130\uff52\131\uff52\132\uff52" +
    "\133\uff52\001\002\000\040\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\040\054\uff57\055\uff57\075\uff57\077\uff57\101\uff57\103\uff57" +
    "\123\uff57\124\uff57\125\uff57\126\uff57\127\uff57\130\uff57\131" +
    "\uff57\132\uff57\133\uff57\001\002\000\040\054\uff4d\055\uff4d" +
    "\075\uff4d\077\uff4d\101\uff4d\103\uff4d\123\uff4d\124\uff4d\125" +
    "\uff4d\126\uff4d\127\uff4d\130\uff4d\131\uff4d\132\uff4d\133\uff4d" +
    "\001\002\000\040\054\uff5f\055\uff5f\075\uff5f\077\uff5f\101" +
    "\uff5f\103\uff5f\123\uff5f\124\uff5f\125\uff5f\126\uff5f\127\uff5f" +
    "\130\uff5f\131\uff5f\132\uff5f\133\uff5f\001\002\000\040\054" +
    "\uff4a\055\uff4a\075\uff4a\077\uff4a\101\uff4a\103\uff4a\123\uff4a" +
    "\124\uff4a\125\uff4a\126\uff4a\127\uff4a\130\uff4a\131\uff4a\132" +
    "\uff4a\133\uff4a\001\002\000\040\054\uff5e\055\uff5e\075\uff5e" +
    "\077\uff5e\101\uff5e\103\uff5e\123\uff5e\124\uff5e\125\uff5e\126" +
    "\uff5e\127\uff5e\130\uff5e\131\uff5e\132\uff5e\133\uff5e\001\002" +
    "\000\040\054\uff55\055\uff55\075\uff55\077\uff55\101\uff55\103" +
    "\uff55\123\uff55\124\uff55\125\uff55\126\uff55\127\uff55\130\uff55" +
    "\131\uff55\132\uff55\133\uff55\001\002\000\040\054\uff60\055" +
    "\uff60\075\uff60\077\uff60\101\uff60\103\uff60\123\uff60\124\uff60" +
    "\125\uff60\126\uff60\127\uff60\130\uff60\131\uff60\132\uff60\133" +
    "\uff60\001\002\000\040\054\uff53\055\uff53\075\uff53\077\uff53" +
    "\101\uff53\103\uff53\123\uff53\124\uff53\125\uff53\126\uff53\127" +
    "\uff53\130\uff53\131\uff53\132\uff53\133\uff53\001\002\000\040" +
    "\054\uff51\055\uff51\075\uff51\077\uff51\101\uff51\103\uff51\123" +
    "\uff51\124\uff51\125\uff51\126\uff51\127\uff51\130\uff51\131\uff51" +
    "\132\uff51\133\uff51\001\002\000\040\054\uff50\055\uff50\075" +
    "\uff50\077\uff50\101\uff50\103\uff50\123\uff50\124\uff50\125\uff50" +
    "\126\uff50\127\uff50\130\uff50\131\uff50\132\uff50\133\uff50\001" +
    "\002\000\134\003\uff63\004\uff63\005\uff63\023\uff63\026\uff63" +
    "\030\uff63\031\uff63\033\uff63\034\uff63\040\uff63\041\uff63\042" +
    "\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63" +
    "\063\uff63\064\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071" +
    "\uff63\072\uff63\073\uff63\074\uff63\076\uff63\100\uff63\102\uff63" +
    "\104\uff63\105\uff63\106\uff63\107\uff63\111\uff63\112\uff63\113" +
    "\uff63\114\uff63\115\uff63\116\uff63\117\uff63\120\uff63\121\uff63" +
    "\122\uff63\001\002\000\040\054\uff58\055\uff58\075\uff58\077" +
    "\uff58\101\uff58\103\uff58\123\uff58\124\uff58\125\uff58\126\uff58" +
    "\127\uff58\130\uff58\131\uff58\132\uff58\133\uff58\001\002\000" +
    "\040\054\uff59\055\uff59\075\uff59\077\uff59\101\uff59\103\uff59" +
    "\123\uff59\124\uff59\125\uff59\126\uff59\127\uff59\130\uff59\131" +
    "\uff59\132\uff59\133\uff59\001\002\000\042\032\uffc5\054\uffc5" +
    "\055\uffc5\075\uffc5\077\uffc5\101\uffc5\103\uffc5\123\uffc5\124" +
    "\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5\131\uffc5\132\uffc5" +
    "\133\uffc5\001\002\000\042\032\uffca\054\uffca\055\uffca\075" +
    "\uffca\077\uffca\101\uffca\103\uffca\123\uffca\124\uffca\125\uffca" +
    "\126\uffca\127\uffca\130\uffca\131\uffca\132\uffca\133\uffca\001" +
    "\002\000\042\032\uffcb\054\uffcb\055\uffcb\075\uffcb\077\uffcb" +
    "\101\uffcb\103\uffcb\123\uffcb\124\uffcb\125\uffcb\126\uffcb\127" +
    "\uffcb\130\uffcb\131\uffcb\132\uffcb\133\uffcb\001\002\000\042" +
    "\032\uffc8\054\uffc8\055\uffc8\075\uffc8\077\uffc8\101\uffc8\103" +
    "\uffc8\123\uffc8\124\uffc8\125\uffc8\126\uffc8\127\uffc8\130\uffc8" +
    "\131\uffc8\132\uffc8\133\uffc8\001\002\000\042\032\uffcd\054" +
    "\uffcd\055\uffcd\075\uffcd\077\uffcd\101\uffcd\103\uffcd\123\uffcd" +
    "\124\uffcd\125\uffcd\126\uffcd\127\uffcd\130\uffcd\131\uffcd\132" +
    "\uffcd\133\uffcd\001\002\000\042\032\uffcc\054\uffcc\055\uffcc" +
    "\075\uffcc\077\uffcc\101\uffcc\103\uffcc\123\uffcc\124\uffcc\125" +
    "\uffcc\126\uffcc\127\uffcc\130\uffcc\131\uffcc\132\uffcc\133\uffcc" +
    "\001\002\000\042\032\uffc7\054\uffc7\055\uffc7\075\uffc7\077" +
    "\uffc7\101\uffc7\103\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7" +
    "\127\uffc7\130\uffc7\131\uffc7\132\uffc7\133\uffc7\001\002\000" +
    "\042\032\uffc4\054\uffc4\055\uffc4\075\uffc4\077\uffc4\101\uffc4" +
    "\103\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130" +
    "\uffc4\131\uffc4\132\uffc4\133\uffc4\001\002\000\042\032\021" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\042\032\021\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\006\041\uffce\072\uffce\001\002\000\042" +
    "\032\uffc6\054\uffc6\055\uffc6\075\uffc6\077\uffc6\101\uffc6\103" +
    "\uffc6\123\uffc6\124\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6" +
    "\131\uffc6\132\uffc6\133\uffc6\001\002\000\042\032\uffc9\054" +
    "\uffc9\055\uffc9\075\uffc9\077\uffc9\101\uffc9\103\uffc9\123\uffc9" +
    "\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131\uffc9\132" +
    "\uffc9\133\uffc9\001\002\000\010\041\uffcf\071\172\072\uffcf" +
    "\001\002\000\012\041\uff66\071\172\072\uff66\073\u0105\001" +
    "\002\000\006\041\uff67\072\uff67\001\002\000\006\074\u010e" +
    "\101\u010f\001\002\000\102\006\103\007\070\011\100\013" +
    "\031\017\056\020\072\024\007\025\110\027\075\032\021" +
    "\035\023\036\033\041\130\045\074\046\020\047\063\053" +
    "\113\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\116\132\022\133\112\001\002\000\044\032\021\054\054" +
    "\055\077\075\025\077\010\101\030\102\u0110\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\004\074\u0115\001\002\000" +
    "\006\071\172\102\u0112\001\002\000\004\074\u0113\001\002" +
    "\000\102\006\103\007\070\011\100\013\031\017\056\020" +
    "\072\024\007\025\110\027\075\032\021\035\023\036\033" +
    "\041\130\045\074\046\020\047\063\053\113\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\126\002\uff06\006\uff06\007\uff06\010\uff06" +
    "\011\uff06\012\uff06\013\uff06\017\uff06\020\uff06\023\uff06\024" +
    "\uff06\025\uff06\026\uff06\027\uff06\032\uff06\035\uff06\036\uff06" +
    "\041\uff06\044\uff06\045\uff06\046\uff06\047\uff06\050\uff06\051" +
    "\uff06\052\uff06\053\uff06\054\uff06\055\uff06\075\uff06\077\uff06" +
    "\101\uff06\103\uff06\110\uff06\123\uff06\124\uff06\125\uff06\126" +
    "\uff06\127\uff06\130\uff06\131\uff06\132\uff06\133\uff06\001\002" +
    "\000\102\006\103\007\070\011\100\013\031\017\056\020" +
    "\072\024\007\025\110\027\075\032\021\035\023\036\033" +
    "\041\130\045\074\046\020\047\063\053\113\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\126\002\uff07\006\uff07\007\uff07\010\uff07" +
    "\011\uff07\012\uff07\013\uff07\017\uff07\020\uff07\023\uff07\024" +
    "\uff07\025\uff07\026\uff07\027\uff07\032\uff07\035\uff07\036\uff07" +
    "\041\uff07\044\uff07\045\uff07\046\uff07\047\uff07\050\uff07\051" +
    "\uff07\052\uff07\053\uff07\054\uff07\055\uff07\075\uff07\077\uff07" +
    "\101\uff07\103\uff07\110\uff07\123\uff07\124\uff07\125\uff07\126" +
    "\uff07\127\uff07\130\uff07\131\uff07\132\uff07\133\uff07\001\002" +
    "\000\126\002\uff08\006\uff08\007\uff08\010\uff08\011\uff08\012" +
    "\uff08\013\uff08\017\uff08\020\uff08\023\uff08\024\uff08\025\uff08" +
    "\026\uff08\027\uff08\032\uff08\035\uff08\036\uff08\041\uff08\044" +
    "\uff08\045\uff08\046\uff08\047\uff08\050\uff08\051\uff08\052\uff08" +
    "\053\uff08\054\uff08\055\uff08\075\uff08\077\uff08\101\uff08\103" +
    "\uff08\110\uff08\123\uff08\124\uff08\125\uff08\126\uff08\127\uff08" +
    "\130\uff08\131\uff08\132\uff08\133\uff08\001\002\000\050\032" +
    "\021\037\u013e\054\054\055\077\074\u013f\075\025\076\u013d" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\116\132\022\133\112\001\002" +
    "\000\134\003\uff47\004\uff47\005\uff47\023\uff47\026\uff47\030" +
    "\uff47\031\uff47\033\uff47\034\uff47\040\uff47\041\uff47\042\uff47" +
    "\054\uff47\055\uff47\056\uff47\057\uff47\060\uff47\061\uff47\063" +
    "\uff47\064\uff47\065\uff47\066\uff47\067\uff47\070\uff47\071\uff47" +
    "\072\uff47\073\uff47\074\uff47\076\uff47\100\uff47\102\uff47\104" +
    "\uff47\105\uff47\106\uff47\107\uff47\111\uff47\112\uff47\113\uff47" +
    "\114\uff47\115\uff47\116\uff47\117\uff47\120\uff47\121\uff47\122" +
    "\uff47\001\002\000\050\032\021\042\u0120\054\054\055\077" +
    "\056\u0121\075\025\077\010\101\030\102\u011e\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\004\132\u011c\001\002\000" +
    "\134\003\uff19\004\uff19\005\uff19\023\uff19\026\uff19\030\uff19" +
    "\031\uff19\033\uff19\034\uff19\040\uff19\041\uff19\042\uff19\054" +
    "\uff19\055\uff19\056\uff19\057\uff19\060\uff19\061\uff19\063\uff19" +
    "\064\uff19\065\uff19\066\uff19\067\uff19\070\uff19\071\uff19\072" +
    "\uff19\073\uff19\074\uff19\076\uff19\100\uff19\102\uff19\104\uff19" +
    "\105\uff19\106\uff19\107\uff19\111\uff19\112\uff19\113\uff19\114" +
    "\uff19\115\uff19\116\uff19\117\uff19\120\uff19\121\uff19\122\uff19" +
    "\001\002\000\004\102\u013c\001\002\000\134\003\uff1d\004" +
    "\uff1d\005\uff1d\023\uff1d\026\uff1d\030\uff1d\031\uff1d\033\uff1d" +
    "\034\uff1d\040\uff1d\041\uff1d\042\uff1d\054\uff1d\055\uff1d\056" +
    "\uff1d\057\uff1d\060\uff1d\061\uff1d\063\uff1d\064\uff1d\065\uff1d" +
    "\066\uff1d\067\uff1d\070\uff1d\071\uff1d\072\uff1d\073\uff1d\074" +
    "\uff1d\076\uff1d\100\uff1d\102\uff1d\104\uff1d\105\uff1d\106\uff1d" +
    "\107\uff1d\111\uff1d\112\uff1d\113\uff1d\114\uff1d\115\uff1d\116" +
    "\uff1d\117\uff1d\120\uff1d\121\uff1d\122\uff1d\001\002\000\006" +
    "\071\u0138\102\uff05\001\002\000\042\032\021\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\042\032\021\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\116\132\022\133\112\001\002" +
    "\000\014\023\u0124\042\ufefb\071\ufefb\073\u0125\102\ufefb\001" +
    "\002\000\010\042\ufefa\071\ufefa\102\ufefa\001\002\000\040" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\042\032\021\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\010\042\ufef9\071\ufef9\102\ufef9\001\002" +
    "\000\006\030\u0128\071\310\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\014\023\u0124\026\u012d\042\ufeef" +
    "\071\ufeef\102\ufeef\001\002\000\010\042\ufeee\071\ufeee\102" +
    "\ufeee\001\002\000\010\042\ufef1\071\ufef1\102\ufef1\001\002" +
    "\000\010\042\ufef0\071\ufef0\102\ufef0\001\002\000\042\032" +
    "\021\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\116\132\022\133\112\001\002\000\014\023\u0124\026\u012d" +
    "\042\ufeed\071\ufeed\102\ufeed\001\002\000\010\042\ufeec\071" +
    "\ufeec\102\ufeec\001\002\000\006\071\u0131\102\uff03\001\002" +
    "\000\046\032\021\042\u0136\054\054\055\077\075\025\077" +
    "\010\101\030\102\ufefc\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\116\132\022\133\112\001" +
    "\002\000\006\042\u0133\102\uff02\001\002\000\042\032\021" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\004\102\uff00\001\002\000" +
    "\010\042\ufefe\071\u0138\102\ufefe\001\002\000\042\032\021" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\116" +
    "\132\022\133\112\001\002\000\004\102\uff01\001\002\000" +
    "\046\032\021\042\ufefc\054\054\055\077\075\025\077\010" +
    "\101\030\102\ufefc\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\116\132\022\133\112\001\002" +
    "\000\006\042\ufefd\102\ufefd\001\002\000\004\102\ufeff\001" +
    "\002\000\004\102\uff04\001\002\000\134\003\uff1c\004\uff1c" +
    "\005\uff1c\023\uff1c\026\uff1c\030\uff1c\031\uff1c\033\uff1c\034" +
    "\uff1c\040\uff1c\041\uff1c\042\uff1c\054\uff1c\055\uff1c\056\uff1c" +
    "\057\uff1c\060\uff1c\061\uff1c\063\uff1c\064\uff1c\065\uff1c\066" +
    "\uff1c\067\uff1c\070\uff1c\071\uff1c\072\uff1c\073\uff1c\074\uff1c" +
    "\076\uff1c\100\uff1c\102\uff1c\104\uff1c\105\uff1c\106\uff1c\107" +
    "\uff1c\111\uff1c\112\uff1c\113\uff1c\114\uff1c\115\uff1c\116\uff1c" +
    "\117\uff1c\120\uff1c\121\uff1c\122\uff1c\001\002\000\134\003" +
    "\uff1b\004\uff1b\005\uff1b\023\uff1b\026\uff1b\030\uff1b\031\uff1b" +
    "\033\uff1b\034\uff1b\040\uff1b\041\uff1b\042\uff1b\054\uff1b\055" +
    "\uff1b\056\uff1b\057\uff1b\060\uff1b\061\uff1b\063\uff1b\064\uff1b" +
    "\065\uff1b\066\uff1b\067\uff1b\070\uff1b\071\uff1b\072\uff1b\073" +
    "\uff1b\074\uff1b\076\uff1b\100\uff1b\102\uff1b\104\uff1b\105\uff1b" +
    "\106\uff1b\107\uff1b\111\uff1b\112\uff1b\113\uff1b\114\uff1b\115" +
    "\uff1b\116\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b\001\002" +
    "\000\006\071\uff14\076\uff14\001\002\000\050\032\021\054" +
    "\054\055\077\071\uff12\074\u0145\075\025\076\uff12\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\006" +
    "\071\u014a\076\uff18\001\002\000\010\071\uff13\074\u0144\076" +
    "\uff13\001\002\000\004\076\u0143\001\002\000\134\003\uff1a" +
    "\004\uff1a\005\uff1a\023\uff1a\026\uff1a\030\uff1a\031\uff1a\033" +
    "\uff1a\034\uff1a\040\uff1a\041\uff1a\042\uff1a\054\uff1a\055\uff1a" +
    "\056\uff1a\057\uff1a\060\uff1a\061\uff1a\063\uff1a\064\uff1a\065" +
    "\uff1a\066\uff1a\067\uff1a\070\uff1a\071\uff1a\072\uff1a\073\uff1a" +
    "\074\uff1a\076\uff1a\100\uff1a\102\uff1a\104\uff1a\105\uff1a\106" +
    "\uff1a\107\uff1a\111\uff1a\112\uff1a\113\uff1a\114\uff1a\115\uff1a" +
    "\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122\uff1a\001\002\000" +
    "\050\032\021\054\054\055\077\071\uff11\074\u0145\075\025" +
    "\076\uff11\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\116\132\022\133\112" +
    "\001\002\000\046\032\021\054\054\055\077\071\uff0a\075" +
    "\025\076\uff0a\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\116\132\022\133" +
    "\112\001\002\000\006\071\uff0e\076\uff0e\001\002\000\010" +
    "\071\uff10\074\u0145\076\uff10\001\002\000\006\071\uff0f\076" +
    "\uff0f\001\002\000\006\071\uff09\076\uff09\001\002\000\046" +
    "\032\021\037\u013e\054\054\055\077\074\u013f\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\006\071\u014c\076\uff17\001\002\000\046\032\021\037\u013e" +
    "\054\054\055\077\074\u013f\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\116\132\022\133\112\001\002\000\006\071\uff15\076" +
    "\uff15\001\002\000\006\071\uff16\076\uff16\001\002\000\006" +
    "\071\uff0b\076\uff0b\001\002\000\010\071\uff0d\074\u0145\076" +
    "\uff0d\001\002\000\006\071\uff0c\076\uff0c\001\002\000\004" +
    "\101\u0154\001\002\000\004\074\u0174\001\002\000\014\042" +
    "\u0159\056\u0156\101\u015c\102\u015a\132\u015d\001\002\000\012" +
    "\071\uffe9\073\u0172\074\uffe9\102\uffe9\001\002\000\004\132" +
    "\u016e\001\002\000\010\071\uffea\074\uffea\102\uffea\001\002" +
    "\000\010\071\u0165\074\ufff2\102\ufff2\001\002\000\004\132" +
    "\u0164\001\002\000\004\074\ufff4\001\002\000\004\102\u0163" +
    "\001\002\000\006\101\u015c\132\u015d\001\002\000\012\071" +
    "\uffe7\073\uffe7\074\uffe7\102\uffe7\001\002\000\006\071\u0160" +
    "\102\u0161\001\002\000\006\071\uffe4\102\uffe4\001\002\000" +
    "\006\101\u015c\132\u015d\001\002\000\012\071\uffe6\073\uffe6" +
    "\074\uffe6\102\uffe6\001\002\000\006\071\uffe5\102\uffe5\001" +
    "\002\000\004\074\ufff3\001\002\000\006\074\uffec\102\uffec" +
    "\001\002\000\012\042\u0167\056\u0166\101\u015c\132\u015d\001" +
    "\002\000\004\132\u016a\001\002\000\004\132\u0169\001\002" +
    "\000\010\071\uffeb\074\uffeb\102\uffeb\001\002\000\006\074" +
    "\ufff0\102\ufff0\001\002\000\010\071\u016b\074\ufff1\102\ufff1" +
    "\001\002\000\004\042\u016c\001\002\000\004\132\u016d\001" +
    "\002\000\006\074\uffef\102\uffef\001\002\000\010\071\u016f" +
    "\074\uffee\102\uffee\001\002\000\004\042\u0170\001\002\000" +
    "\004\132\u0171\001\002\000\006\074\uffed\102\uffed\001\002" +
    "\000\042\032\021\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\010\071" +
    "\uffe8\074\uffe8\102\uffe8\001\002\000\102\006\103\007\070" +
    "\011\100\013\031\017\056\020\072\024\007\025\110\027" +
    "\075\032\021\035\023\036\033\041\130\045\074\046\020" +
    "\047\063\053\113\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\126\002" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\017\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\032\ufff5\035\ufff5\036\ufff5\041\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\075\ufff5\077\ufff5\101\ufff5\103\ufff5\110\ufff5" +
    "\123\ufff5\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131" +
    "\ufff5\132\ufff5\133\ufff5\001\002\000\014\003\uff2a\041\uff2a" +
    "\071\172\072\uff2a\102\uff2a\001\002\000\010\041\uffbc\071" +
    "\310\072\uffbc\001\002\000\142\003\uff42\004\uff42\005\uff42" +
    "\023\uff42\026\uff42\030\uff42\031\uff42\033\uff42\034\uff42\040" +
    "\uff42\041\uff42\042\uff42\054\uff42\055\uff42\056\uff42\057\uff42" +
    "\060\uff42\061\uff42\062\uff42\063\uff42\064\uff42\065\uff42\066" +
    "\uff42\067\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074\uff42" +
    "\075\uff42\076\uff42\100\uff42\101\uff42\102\uff42\104\uff42\105" +
    "\uff42\106\uff42\107\uff42\111\uff42\112\uff42\113\uff42\114\uff42" +
    "\115\uff42\116\uff42\117\uff42\120\uff42\121\uff42\122\uff42\001" +
    "\002\000\006\003\u018e\102\u018d\001\002\000\142\003\uff3b" +
    "\004\uff3b\005\uff3b\023\uff3b\026\uff3b\030\uff3b\031\uff3b\033" +
    "\uff3b\034\uff3b\040\uff3b\041\uff3b\042\uff3b\054\uff3b\055\uff3b" +
    "\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\064" +
    "\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b\072\uff3b" +
    "\073\uff3b\074\uff3b\075\uff3b\076\uff3b\100\uff3b\101\uff3b\102" +
    "\uff3b\104\uff3b\105\uff3b\106\uff3b\107\uff3b\111\uff3b\112\uff3b" +
    "\113\uff3b\114\uff3b\115\uff3b\116\uff3b\117\uff3b\120\uff3b\121" +
    "\uff3b\122\uff3b\001\002\000\012\003\uff22\023\u0181\071\uff22" +
    "\102\uff22\001\002\000\006\003\u017f\102\u017e\001\002\000" +
    "\010\003\uff24\071\172\102\uff24\001\002\000\142\003\uff40" +
    "\004\uff40\005\uff40\023\uff40\026\uff40\030\uff40\031\uff40\033" +
    "\uff40\034\uff40\040\uff40\041\uff40\042\uff40\054\uff40\055\uff40" +
    "\056\uff40\057\uff40\060\uff40\061\uff40\062\uff40\063\uff40\064" +
    "\uff40\065\uff40\066\uff40\067\uff40\070\uff40\071\uff40\072\uff40" +
    "\073\uff40\074\uff40\075\uff40\076\uff40\100\uff40\101\uff40\102" +
    "\uff40\104\uff40\105\uff40\106\uff40\107\uff40\111\uff40\112\uff40" +
    "\113\uff40\114\uff40\115\uff40\116\uff40\117\uff40\120\uff40\121" +
    "\uff40\122\uff40\001\002\000\142\003\uff39\004\uff39\005\uff39" +
    "\023\uff39\026\uff39\030\uff39\031\uff39\033\uff39\034\uff39\040" +
    "\uff39\041\uff39\042\uff39\054\uff39\055\uff39\056\uff39\057\uff39" +
    "\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39\065\uff39\066" +
    "\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39\074\uff39" +
    "\075\uff39\076\uff39\100\uff39\101\uff39\102\uff39\104\uff39\105" +
    "\uff39\106\uff39\107\uff39\111\uff39\112\uff39\113\uff39\114\uff39" +
    "\115\uff39\116\uff39\117\uff39\120\uff39\121\uff39\122\uff39\001" +
    "\002\000\006\003\uff25\102\uff25\001\002\000\040\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\116\132\022" +
    "\133\112\001\002\000\006\030\u0183\071\310\001\002\000" +
    "\044\032\021\053\113\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\006" +
    "\023\u0181\026\u0189\001\002\000\016\003\ufef6\023\u0181\026" +
    "\u0189\071\172\076\ufef6\102\ufef6\001\002\000\010\003\ufef8" +
    "\076\ufef8\102\ufef8\001\002\000\010\003\ufef7\076\ufef7\102" +
    "\ufef7\001\002\000\010\003\ufef5\076\ufef5\102\ufef5\001\002" +
    "\000\042\032\021\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\116\132\022\133\112\001\002\000\014\003" +
    "\ufef3\023\u0181\026\u0189\076\ufef3\102\ufef3\001\002\000\010" +
    "\003\ufef2\076\ufef2\102\ufef2\001\002\000\010\003\ufef4\076" +
    "\ufef4\102\ufef4\001\002\000\142\003\uff3f\004\uff3f\005\uff3f" +
    "\023\uff3f\026\uff3f\030\uff3f\031\uff3f\033\uff3f\034\uff3f\040" +
    "\uff3f\041\uff3f\042\uff3f\054\uff3f\055\uff3f\056\uff3f\057\uff3f" +
    "\060\uff3f\061\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f\066" +
    "\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\073\uff3f\074\uff3f" +
    "\075\uff3f\076\uff3f\100\uff3f\101\uff3f\102\uff3f\104\uff3f\105" +
    "\uff3f\106\uff3f\107\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f" +
    "\115\uff3f\116\uff3f\117\uff3f\120\uff3f\121\uff3f\122\uff3f\001" +
    "\002\000\142\003\uff38\004\uff38\005\uff38\023\uff38\026\uff38" +
    "\030\uff38\031\uff38\033\uff38\034\uff38\040\uff38\041\uff38\042" +
    "\uff38\054\uff38\055\uff38\056\uff38\057\uff38\060\uff38\061\uff38" +
    "\062\uff38\063\uff38\064\uff38\065\uff38\066\uff38\067\uff38\070" +
    "\uff38\071\uff38\072\uff38\073\uff38\074\uff38\075\uff38\076\uff38" +
    "\100\uff38\101\uff38\102\uff38\104\uff38\105\uff38\106\uff38\107" +
    "\uff38\111\uff38\112\uff38\113\uff38\114\uff38\115\uff38\116\uff38" +
    "\117\uff38\120\uff38\121\uff38\122\uff38\001\002\000\004\076" +
    "\u0195\001\002\000\142\003\uff37\004\uff37\005\uff37\023\uff37" +
    "\026\uff37\030\uff37\031\uff37\033\uff37\034\uff37\040\uff37\041" +
    "\uff37\042\uff37\054\uff37\055\uff37\056\uff37\057\uff37\060\uff37" +
    "\061\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066\uff37\067" +
    "\uff37\070\uff37\071\uff37\072\uff37\073\uff37\074\uff37\075\uff37" +
    "\076\uff37\100\uff37\101\uff37\102\uff37\104\uff37\105\uff37\106" +
    "\uff37\107\uff37\111\uff37\112\uff37\113\uff37\114\uff37\115\uff37" +
    "\116\uff37\117\uff37\120\uff37\121\uff37\122\uff37\001\002\000" +
    "\010\023\u0181\071\uff22\076\uff22\001\002\000\006\071\172" +
    "\076\u0193\001\002\000\142\003\uff3e\004\uff3e\005\uff3e\023" +
    "\uff3e\026\uff3e\030\uff3e\031\uff3e\033\uff3e\034\uff3e\040\uff3e" +
    "\041\uff3e\042\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e\060" +
    "\uff3e\061\uff3e\062\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e" +
    "\067\uff3e\070\uff3e\071\uff3e\072\uff3e\073\uff3e\074\uff3e\075" +
    "\uff3e\076\uff3e\100\uff3e\101\uff3e\102\uff3e\104\uff3e\105\uff3e" +
    "\106\uff3e\107\uff3e\111\uff3e\112\uff3e\113\uff3e\114\uff3e\115" +
    "\uff3e\116\uff3e\117\uff3e\120\uff3e\121\uff3e\122\uff3e\001\002" +
    "\000\004\076\uff29\001\002\000\142\003\uff3d\004\uff3d\005" +
    "\uff3d\023\uff3d\026\uff3d\030\uff3d\031\uff3d\033\uff3d\034\uff3d" +
    "\040\uff3d\041\uff3d\042\uff3d\054\uff3d\055\uff3d\056\uff3d\057" +
    "\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d\064\uff3d\065\uff3d" +
    "\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\073\uff3d\074" +
    "\uff3d\075\uff3d\076\uff3d\100\uff3d\101\uff3d\102\uff3d\104\uff3d" +
    "\105\uff3d\106\uff3d\107\uff3d\111\uff3d\112\uff3d\113\uff3d\114" +
    "\uff3d\115\uff3d\116\uff3d\117\uff3d\120\uff3d\121\uff3d\122\uff3d" +
    "\001\002\000\042\032\021\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\004\074\u0198\001\002\000\042\032\021\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\116\132\022\133\112" +
    "\001\002\000\060\003\uff1e\005\uff1e\023\uff1e\026\uff1e\041" +
    "\uff1e\042\uff1e\071\uff1e\072\uff1e\073\uff1e\074\uff1e\076\uff1e" +
    "\100\uff1e\102\uff1e\111\uff1e\112\uff1e\113\uff1e\114\uff1e\115" +
    "\uff1e\116\uff1e\117\uff1e\120\uff1e\121\uff1e\122\uff1e\001\002" +
    "\000\060\003\uff1f\005\uff1f\023\uff1f\026\uff1f\041\uff1f\042" +
    "\uff1f\071\uff1f\072\uff1f\073\uff1f\074\uff1f\076\uff1f\100\uff1f" +
    "\102\uff1f\111\uff1f\112\uff1f\113\uff1f\114\uff1f\115\uff1f\116" +
    "\uff1f\117\uff1f\120\uff1f\121\uff1f\122\uff1f\001\002\000\010" +
    "\041\uffb5\071\u019c\072\uffb5\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\010\041\uffb4\071\u019e\072\uffb4" +
    "\001\002\000\042\032\021\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\116\132\022\133\112\001\002\000" +
    "\006\041\uffb3\072\uffb3\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffe\001\002\000\142\003\uff41\004\uff41\005" +
    "\uff41\023\uff41\026\uff41\030\uff41\031\uff41\033\uff41\034\uff41" +
    "\040\uff41\041\uff41\042\uff41\054\uff41\055\uff41\056\uff41\057" +
    "\uff41\060\uff41\061\uff41\062\uff41\063\uff41\064\uff41\065\uff41" +
    "\066\uff41\067\uff41\070\uff41\071\uff41\072\uff41\073\uff41\074" +
    "\uff41\075\uff41\076\uff41\100\uff41\101\uff41\102\uff41\104\uff41" +
    "\105\uff41\106\uff41\107\uff41\111\uff41\112\uff41\113\uff41\114" +
    "\uff41\115\uff41\116\uff41\117\uff41\120\uff41\121\uff41\122\uff41" +
    "\001\002\000\010\003\u01a9\071\u01a8\100\u01aa\001\002\000" +
    "\142\003\uff3a\004\uff3a\005\uff3a\023\uff3a\026\uff3a\030\uff3a" +
    "\031\uff3a\033\uff3a\034\uff3a\040\uff3a\041\uff3a\042\uff3a\054" +
    "\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a" +
    "\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067\uff3a\070\uff3a\071" +
    "\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a\076\uff3a\100\uff3a" +
    "\101\uff3a\102\uff3a\104\uff3a\105\uff3a\106\uff3a\107\uff3a\111" +
    "\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a" +
    "\120\uff3a\121\uff3a\122\uff3a\001\002\000\004\074\u01a6\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\010" +
    "\003\uff27\071\uff27\100\uff27\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\116\132" +
    "\022\133\112\001\002\000\142\003\uff36\004\uff36\005\uff36" +
    "\023\uff36\026\uff36\030\uff36\031\uff36\033\uff36\034\uff36\040" +
    "\uff36\041\uff36\042\uff36\054\uff36\055\uff36\056\uff36\057\uff36" +
    "\060\uff36\061\uff36\062\uff36\063\uff36\064\uff36\065\uff36\066" +
    "\uff36\067\uff36\070\uff36\071\uff36\072\uff36\073\uff36\074\uff36" +
    "\075\uff36\076\uff36\100\uff36\101\uff36\102\uff36\104\uff36\105" +
    "\uff36\106\uff36\107\uff36\111\uff36\112\uff36\113\uff36\114\uff36" +
    "\115\uff36\116\uff36\117\uff36\120\uff36\121\uff36\122\uff36\001" +
    "\002\000\142\003\uff3c\004\uff3c\005\uff3c\023\uff3c\026\uff3c" +
    "\030\uff3c\031\uff3c\033\uff3c\034\uff3c\040\uff3c\041\uff3c\042" +
    "\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c" +
    "\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\070" +
    "\uff3c\071\uff3c\072\uff3c\073\uff3c\074\uff3c\075\uff3c\076\uff3c" +
    "\100\uff3c\101\uff3c\102\uff3c\104\uff3c\105\uff3c\106\uff3c\107" +
    "\uff3c\111\uff3c\112\uff3c\113\uff3c\114\uff3c\115\uff3c\116\uff3c" +
    "\117\uff3c\120\uff3c\121\uff3c\122\uff3c\001\002\000\004\074" +
    "\u01ac\001\002\000\042\032\021\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\116\132\022\133\112\001\002" +
    "\000\010\003\uff26\071\uff26\100\uff26\001\002\000\004\027" +
    "\u01c7\001\002\000\004\132\233\001\002\000\006\062\u01b1" +
    "\132\uff9d\001\002\000\010\027\uff9d\062\u01b1\132\uff9d\001" +
    "\002\000\006\027\u01b3\132\uff9e\001\002\000\010\056\u01b4" +
    "\101\u01b6\132\u01b7\001\002\000\006\041\uffab\072\uffab\001" +
    "\002\000\012\041\uffa1\071\u01bd\072\uffa1\102\uffa1\001\002" +
    "\000\004\132\u01b7\001\002\000\014\005\u01b9\041\uff9f\071" +
    "\uff9f\072\uff9f\102\uff9f\001\002\000\006\041\uffa9\072\uffa9" +
    "\001\002\000\004\132\u01ba\001\002\000\012\041\uffa0\071" +
    "\uffa0\072\uffa0\102\uffa0\001\002\000\004\102\u01bc\001\002" +
    "\000\006\041\uffaa\072\uffaa\001\002\000\004\132\u01b7\001" +
    "\002\000\010\041\uffa2\072\uffa2\102\uffa2\001\002\000\006" +
    "\027\uff9e\132\uff9e\001\002\000\004\027\u01c1\001\002\000" +
    "\010\056\u01c2\101\u01c3\132\u01b7\001\002\000\006\041\uffae" +
    "\072\uffae\001\002\000\004\132\u01b7\001\002\000\006\041" +
    "\uffac\072\uffac\001\002\000\004\102\u01c6\001\002\000\006" +
    "\041\uffad\072\uffad\001\002\000\010\056\u01c8\101\u01c9\132" +
    "\u01b7\001\002\000\006\041\uffb1\072\uffb1\001\002\000\004" +
    "\132\u01b7\001\002\000\006\041\uffaf\072\uffaf\001\002\000" +
    "\004\102\u01cc\001\002\000\006\041\uffb0\072\uffb0\001\002" +
    "\000\006\041\u01cf\101\u01ce\001\002\000\050\032\021\042" +
    "\u0120\054\054\055\077\056\u0121\075\025\077\010\101\030" +
    "\102\u01d1\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\116\132\022\133\112\001\002\000\010" +
    "\010\ufffc\012\ufffc\110\ufffc\001\002\000\004\102\u01d3\001" +
    "\002\000\004\041\u01d2\001\002\000\010\010\ufffb\012\ufffb" +
    "\110\ufffb\001\002\000\004\041\u01d4\001\002\000\010\010" +
    "\ufffa\012\ufffa\110\ufffa\001\002\000\142\003\uff43\004\uff43" +
    "\005\uff43\023\uff43\026\uff43\030\uff43\031\uff43\033\uff43\034" +
    "\uff43\040\uff43\041\uff43\042\uff43\054\uff43\055\uff43\056\uff43" +
    "\057\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064\uff43\065" +
    "\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43" +
    "\074\uff43\075\uff43\076\uff43\100\uff43\101\uff43\102\uff43\104" +
    "\uff43\105\uff43\106\uff43\107\uff43\111\uff43\112\uff43\113\uff43" +
    "\114\uff43\115\uff43\116\uff43\117\uff43\120\uff43\121\uff43\122" +
    "\uff43\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d3\000\114\002\101\003\047\004\010\005\114\006" +
    "\031\007\025\010\070\011\012\012\041\013\005\014\026" +
    "\015\116\016\110\020\003\021\052\022\105\023\013\024" +
    "\035\025\066\027\104\033\050\046\065\051\042\052\014" +
    "\073\054\074\044\075\043\076\075\077\106\100\051\101" +
    "\103\102\037\103\016\106\113\110\036\116\046\117\063" +
    "\001\001\000\010\016\110\020\003\024\u01d4\001\001\000" +
    "\004\053\u01cc\001\001\000\002\001\001\000\006\053\u01ad" +
    "\060\u01ae\001\001\000\022\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u01a4\032\u01a2\001\001\000\112" +
    "\003\u01a0\004\010\005\114\006\031\007\025\010\070\011" +
    "\012\012\041\013\005\014\026\015\116\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\066\027\104\033" +
    "\050\046\065\051\042\052\014\073\054\074\044\075\043" +
    "\076\075\077\106\100\051\101\103\102\037\103\016\106" +
    "\113\110\036\116\046\117\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\112\003\u019f\004\010\005\114\006\031\007\025\010\070" +
    "\011\012\012\041\013\005\014\026\015\116\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\073\054\074\044\075" +
    "\043\076\075\077\106\100\051\101\103\102\037\103\016" +
    "\106\113\110\036\116\046\117\063\001\001\000\002\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\u019a\001\001\000\012\040\u0196\041\u0157\042" +
    "\u0156\043\u0154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0190\031\u018e\033\u0191\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\u017a\027\u017b" +
    "\030\u0178\033\u017c\001\001\000\014\016\110\020\003\023" +
    "\306\024\035\034\u0176\001\001\000\002\001\001\000\022" +
    "\016\110\020\003\021\052\022\105\023\013\024\035\025" +
    "\066\033\u0175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\u0105\050\u0106" +
    "\001\001\000\002\001\001\000\004\017\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\110\020\003" +
    "\023\334\024\035\001\001\000\020\016\110\020\003\021" +
    "\052\022\105\023\013\024\035\025\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\110\020\003\023" +
    "\306\024\035\034\305\001\001\000\022\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\066\033\304\001" +
    "\001\000\010\101\302\102\303\116\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\110\020\003\021\052\022\105\023\013\024" +
    "\035\025\066\033\243\001\001\000\010\053\230\054\233" +
    "\055\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\110\020\003\021\052\022\105" +
    "\023\013\024\035\025\174\001\001\000\002\001\001\000" +
    "\022\016\110\020\003\021\052\022\105\023\013\024\035" +
    "\025\066\033\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\110\020\003\021" +
    "\052\022\105\023\013\024\035\025\120\114\121\001\001" +
    "\000\002\001\001\000\004\115\123\001\001\000\022\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\120" +
    "\114\137\001\001\000\002\001\001\000\022\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\120\114\136" +
    "\001\001\000\062\005\130\006\031\007\025\010\070\011" +
    "\012\012\041\013\005\014\026\015\116\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\066\027\104\033" +
    "\050\046\065\051\042\052\014\104\126\106\113\110\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\112\004\132\005\114\006\031\007\025\010\070" +
    "\011\012\012\041\013\005\014\026\015\116\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\073\054\074\044\075" +
    "\043\076\075\077\106\100\051\101\103\102\037\103\016" +
    "\105\133\106\113\110\036\116\046\117\063\001\001\000" +
    "\002\001\001\000\110\004\134\005\114\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\073\054\074" +
    "\044\075\043\076\075\077\106\100\051\101\103\102\037" +
    "\103\016\106\113\110\036\116\046\117\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\110\020\003\023\141\024\035\001" +
    "\001\000\002\001\001\000\056\006\031\007\025\010\070" +
    "\011\012\012\041\013\005\014\026\015\116\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\106\152\110\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\031" +
    "\007\025\010\070\011\012\012\041\013\005\014\026\015" +
    "\116\016\110\020\003\021\052\022\105\023\013\024\035" +
    "\025\066\027\104\033\050\046\065\051\042\052\014\106" +
    "\150\110\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\110\020\003\023\154\024\035\001\001\000\002" +
    "\001\001\000\012\016\110\020\003\023\157\024\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\110" +
    "\020\003\023\162\024\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\223\106" +
    "\113\110\036\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\177\106" +
    "\113\110\036\001\001\000\004\111\202\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\205\001\001\000\002\001\001\000\062" +
    "\005\130\006\031\007\025\010\070\011\012\012\041\013" +
    "\005\014\026\015\116\016\110\020\003\021\052\022\105" +
    "\023\013\024\035\025\066\027\104\033\050\046\065\051" +
    "\042\052\014\104\207\106\113\110\036\001\001\000\002" +
    "\001\001\000\062\005\130\006\031\007\025\010\070\011" +
    "\012\012\041\013\005\014\026\015\116\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\066\027\104\033" +
    "\050\046\065\051\042\052\014\104\211\106\113\110\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\005" +
    "\130\006\031\007\025\010\070\011\012\012\041\013\005" +
    "\014\026\015\116\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\066\027\104\033\050\046\065\051\042" +
    "\052\014\104\216\106\113\110\036\001\001\000\062\005" +
    "\130\006\031\007\025\010\070\011\012\012\041\013\005" +
    "\014\026\015\116\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\066\027\104\033\050\046\065\051\042" +
    "\052\014\104\215\106\113\110\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\222\106" +
    "\113\110\036\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\221\106" +
    "\113\110\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\005\130\006\031\007\025\010\070\011\012" +
    "\012\041\013\005\014\026\015\116\016\110\020\003\021" +
    "\052\022\105\023\013\024\035\025\066\027\104\033\050" +
    "\046\065\051\042\052\014\104\227\106\113\110\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\235\001" +
    "\001\000\002\001\001\000\006\053\230\054\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\110\020\003\021\052\022\105\023\013\024\035" +
    "\025\066\033\245\001\001\000\002\001\001\000\020\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\172" +
    "\001\001\000\002\001\001\000\062\005\130\006\031\007" +
    "\025\010\070\011\012\012\041\013\005\014\026\015\116" +
    "\016\110\020\003\021\052\022\105\023\013\024\035\025" +
    "\066\027\104\033\050\046\065\051\042\052\014\104\247" +
    "\106\113\110\036\001\001\000\006\112\253\113\250\001" +
    "\001\000\004\112\267\001\001\000\002\001\001\000\020" +
    "\016\110\020\003\021\052\022\105\023\013\024\035\025" +
    "\256\001\001\000\002\001\001\000\062\005\130\006\031" +
    "\007\025\010\070\011\012\012\041\013\005\014\026\015" +
    "\116\016\110\020\003\021\052\022\105\023\013\024\035" +
    "\025\066\027\104\033\050\046\065\051\042\052\014\104" +
    "\255\106\113\110\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\262\001\001\000\020\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\005\130\006\031" +
    "\007\025\010\070\011\012\012\041\013\005\014\026\015" +
    "\116\016\110\020\003\021\052\022\105\023\013\024\035" +
    "\025\066\027\104\033\050\046\065\051\042\052\014\104" +
    "\264\106\113\110\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\005" +
    "\130\006\031\007\025\010\070\011\012\012\041\013\005" +
    "\014\026\015\116\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\066\027\104\033\050\046\065\051\042" +
    "\052\014\104\271\106\113\110\036\001\001\000\002\001" +
    "\001\000\062\005\130\006\031\007\025\010\070\011\012" +
    "\012\041\013\005\014\026\015\116\016\110\020\003\021" +
    "\052\022\105\023\013\024\035\025\066\027\104\033\050" +
    "\046\065\051\042\052\014\104\273\106\113\110\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\005\130" +
    "\006\031\007\025\010\070\011\012\012\041\013\005\014" +
    "\026\015\116\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\066\027\104\033\050\046\065\051\042\052" +
    "\014\104\276\106\113\110\036\001\001\000\002\001\001" +
    "\000\062\005\130\006\031\007\025\010\070\011\012\012" +
    "\041\013\005\014\026\015\116\016\110\020\003\021\052" +
    "\022\105\023\013\024\035\025\066\027\104\033\050\046" +
    "\065\051\042\052\014\104\300\106\113\110\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\110\020\003\023\323\024\035\001" +
    "\001\000\024\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\066\033\312\046\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\316\106" +
    "\113\110\036\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\315\106" +
    "\113\110\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\005\130\006\031\007\025\010\070\011\012\012" +
    "\041\013\005\014\026\015\116\016\110\020\003\021\052" +
    "\022\105\023\013\024\035\025\066\027\104\033\050\046" +
    "\065\051\042\052\014\104\322\106\113\110\036\001\001" +
    "\000\062\005\130\006\031\007\025\010\070\011\012\012" +
    "\041\013\005\014\026\015\116\016\110\020\003\021\052" +
    "\022\105\023\013\024\035\025\066\027\104\033\050\046" +
    "\065\051\042\052\014\104\321\106\113\110\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\005\130\006\031\007\025\010\070" +
    "\011\012\012\041\013\005\014\026\015\116\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\104\333\106\113\110" +
    "\036\001\001\000\062\005\130\006\031\007\025\010\070" +
    "\011\012\012\041\013\005\014\026\015\116\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\104\327\106\113\110" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\005\130\006\031\007\025\010\070\011\012\012\041\013" +
    "\005\014\026\015\116\016\110\020\003\021\052\022\105" +
    "\023\013\024\035\025\066\027\104\033\050\046\065\051" +
    "\042\052\014\104\332\106\113\110\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\336" +
    "\001\001\000\002\001\001\000\020\016\110\020\003\021" +
    "\052\022\105\023\013\024\035\025\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\110\020\003\023\371\024\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\066\033\u010a\001" +
    "\001\000\022\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\066\033\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\005\130\006\031\007\025\010\070\011\012\012\041" +
    "\013\005\014\026\015\116\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\066\027\104\033\050\046\065" +
    "\051\042\052\014\104\u0116\106\113\110\036\001\001\000" +
    "\022\016\110\020\003\021\052\022\105\023\013\024\035" +
    "\025\066\033\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\012\012\041\013\005\014\026\015\116\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\u0113\106" +
    "\113\110\036\001\001\000\002\001\001\000\062\005\130" +
    "\006\031\007\025\010\070\011\012\012\041\013\005\014" +
    "\026\015\116\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\066\027\104\033\050\046\065\051\042\052" +
    "\014\104\u0115\106\113\110\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0140\062\u0141\063\u013f\001\001" +
    "\000\002\001\001\000\024\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0121\061\u011c\066\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\u013a\001\001\000\020\016\110" +
    "\020\003\021\052\022\105\023\013\024\035\025\u0139\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\u012f\001\001\000\004\070\u0122\001\001\000" +
    "\002\001\001\000\014\016\110\020\003\023\306\024\035" +
    "\034\u0126\001\001\000\020\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0125\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0128\001\001\000\010\070\u012a" +
    "\071\u0129\072\u012b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\110\020\003\021\052" +
    "\022\105\023\013\024\035\025\u012d\001\001\000\010\070" +
    "\u012a\071\u012e\072\u012b\001\001\000\002\001\001\000\004" +
    "\067\u0131\001\001\000\022\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0121\066\u0134\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\u0133\001\001\000\002\001\001\000\004" +
    "\067\u0138\001\001\000\020\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0136\001\001\000\002\001\001" +
    "\000\022\016\110\020\003\021\052\022\105\023\013\024" +
    "\035\025\u0121\066\u0134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\110\020\003\021\052" +
    "\022\105\023\013\024\035\025\u014f\065\u014e\001\001\000" +
    "\004\064\u014a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\110\020\003\021\052\022" +
    "\105\023\013\024\035\025\u0146\065\u0145\001\001\000\020" +
    "\016\110\020\003\021\052\022\105\023\013\024\035\025" +
    "\u0148\001\001\000\002\001\001\000\004\065\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\110\020" +
    "\003\021\052\022\105\023\013\024\035\025\u0140\063\u014d" +
    "\001\001\000\002\001\001\000\022\016\110\020\003\021" +
    "\052\022\105\023\013\024\035\025\u0140\063\u014c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u0150\001\001\000\002\001\001\000\004\120\u0152" +
    "\001\001\000\002\001\001\000\012\040\u015a\041\u0157\042" +
    "\u0156\043\u0154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\u015e\044\u015d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\u0167\043\u0154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\u0172\001\001\000\002\001\001\000\062\005" +
    "\130\006\031\007\025\010\070\011\012\012\041\013\005" +
    "\014\026\015\116\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\066\027\104\033\050\046\065\051\042" +
    "\052\014\104\u0174\106\113\110\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\u017f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\110\020" +
    "\003\023\306\024\035\034\u0181\001\001\000\002\001\001" +
    "\000\024\016\110\020\003\021\052\022\105\023\013\024" +
    "\035\025\066\033\u0184\046\u0183\001\001\000\010\035\u018b" +
    "\036\u0185\037\u0186\001\001\000\010\035\u0187\036\u0185\037" +
    "\u0186\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\013\024\035\025\u0189\001\001\000\010\035\u018a\036\u0185" +
    "\037\u0186\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\u0193\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\110\020\003\021\052\022\105\023\013\024\035\025" +
    "\u0199\001\001\000\002\001\001\000\020\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\u0198\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\110\020\003\021\052\022\105\023\013\024\035\025" +
    "\u019c\001\001\000\002\001\001\000\020\016\110\020\003" +
    "\021\052\022\105\023\013\024\035\025\u019e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\u01a6\001\001\000\002\001\001\000\020\016" +
    "\110\020\003\021\052\022\105\023\013\024\035\025\u01aa" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\013" +
    "\024\035\025\u01ac\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u01bf\001\001\000\004\060\u01b1\001\001" +
    "\000\004\060\u01be\001\001\000\002\001\001\000\006\056" +
    "\u01b4\057\u01b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\u01b4\057\u01ba\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\056\u01b4\057\u01bd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\u01b4\057\u01c3\001\001\000\002\001\001\000" +
    "\006\056\u01b4\057\u01c4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\056\u01b4\057\u01c9\001" +
    "\001\000\002\001\001\000\006\056\u01b4\057\u01ca\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\016\110\020\003\021\052\022\105" +
    "\023\013\024\035\025\u0121\061\u01cf\066\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TranslatorPy2JCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TranslatorPy2JCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TranslatorPy2JCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symTable=new SymbolTable();
	scopeLevelCounter = 0;

    }


	//Tabella dei simboli
	public static SymbolTable symTable;
	
	//contatore dell'attuala livello di scope
	public static int scopeLevelCounter;

	// ridefinisco la funzione per la gestione degli errori
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}
    
    
    // restituisce il numero della riga in cui si trova il simbolo corrente
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    
    // restituisce il numero della colonna in cui si trova il simbolo corrente
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }	
		

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TranslatorPy2JCup$actions {



		private void semanticAlert(String message){
        		System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    	}
    	
    	private void semanticError(String message){
    			System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    	}
    	
    	
    	public ArrayList<String> tokenParameters(String s) {
	        ArrayList <String> arrayToken=new ArrayList<String>();
	        StringTokenizer st = new StringTokenizer(s, ",");
	        int i=0;
	        while (st.hasMoreTokens()) {
	            String val = st.nextToken();
	            arrayToken.add(i, val);
	            i++;
	        }
	        return arrayToken;
    	}


  private final TranslatorPy2JCup parser;

  /** Constructor */
  CUP$TranslatorPy2JCup$actions(TranslatorPy2JCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TranslatorPy2JCup$do_action(
    int                        CUP$TranslatorPy2JCup$act_num,
    java_cup.runtime.lr_parser CUP$TranslatorPy2JCup$parser,
    java.util.Stack            CUP$TranslatorPy2JCup$stack,
    int                        CUP$TranslatorPy2JCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TranslatorPy2JCup$result;

      /* select the action based on the action number */
      switch (CUP$TranslatorPy2JCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // comment ::= COMMENT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = c.toString().replace("#","//");
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comment",70, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // comp_if ::= IF test comp_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "if "+t.toString()+c.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_if",56, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // comp_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT="if "+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_if",56, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // comp_for ::= FOR exprlist IN test comp_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString()+c.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_for",54, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // comp_for ::= FOR exprlist IN test 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_for",54, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // comp_iter ::= comp_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_iter",55, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // comp_iter ::= comp_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_iter",55, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // list_if ::= IF test list_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "if "+t.toString()+l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // list_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT="if "+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // list_for ::= FOR exprlist IN range_stmt list_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // list_for ::= FOR exprlist IN testlist list_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString()+l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // list_for ::= FOR exprlist IN testlist 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // list_iter ::= list_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // list_iter ::= list_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // argument ::= test ASSIGN test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t1.toString()+assign.toString()+t2.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument",52, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // argument ::= test comp_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t.toString() + " " +c.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument",52, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // argument ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument",52, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // argument_rec ::= COMMA 
            {
              Object RESULT =null;
		RESULT = ",";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument_rec",53, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // argument_rec ::= COMMA argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = ","+a+ar;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument_rec",53, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // argument_rec ::= COMMA argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = ","+a;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument_rec",53, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // arglist ::= MULTMULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // arglist ::= MULT test argument_rec MULTMULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // arglist ::= MULT test COMMA MULTMULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // arglist ::= MULT test argument_rec 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // arglist ::= MULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // arglist ::= argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = a + ar.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // arglist ::= argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = a;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // classdef ::= CLASS NAME LPAREN testlist RPAREN COLON suite 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("classdef",64, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // classdef ::= CLASS NAME LPAREN RPAREN COLON suite 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("classdef",64, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // classdef ::= CLASS NAME COLON suite 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("classdef",64, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // sliceop ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("sliceop",51, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // sliceop ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("sliceop",51, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // subscript ::= COLON sliceop 
            {
              Object RESULT =null;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // subscript ::= COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+t.toString()+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // subscript ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // subscript ::= test COLON sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=t.toString()+":"+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // subscript ::= test COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString()+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // subscript ::= test COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // subscript ::= test COLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		RESULT=t.toString()+":";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // subscript ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // subscript ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // subscript ::= TRIDOT 
            {
              Object RESULT =null;
		RESULT="...";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // subscript_rec ::= subscript_rec COMMA subscript 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",50, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // subscript_rec ::= COMMA subscript 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",50, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // subscriptlist ::= subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",48, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // subscriptlist ::= subscript 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = s;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",48, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // trailer ::= DOT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "."+n.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // trailer ::= LBRACK subscriptlist RBRACK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		RESULT = "[" + s.toString() + "]";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // trailer ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		RESULT = "[]";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // trailer ::= LPAREN arglist RPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		RESULT = "("+a.toString()+")";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT = "()";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // lambdef ::= LAMBDA varargslist COLON test 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // lambdef ::= LAMBDA COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // exprlist ::= exprlist COMMA expr 
            {
              Object RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // exprlist ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = e;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // testlist ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#TESTLIST: tipo 2"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // testlist ::= testlist COMMA test 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#TESTLIST: tipo 1"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // testlist_comp ::= testlist 
            {
              Object RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object tlist = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // testlist_comp ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // dictorsetmaker ::= dictorsetmaker COMMA test COLON test 
            {
              Object RESULT =null;
		int dicleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int dicright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object dic = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // dictorsetmaker ::= test COLON test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // listmaker ::= 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // listmaker ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println(" ---------> LISTA! <------"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // yield_expr ::= YIELD testlist 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // yield_expr ::= YIELD 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // number ::= BIN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = b.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // number ::= OCT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = o.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // number ::= HEX 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = h.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // number ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = Integer.parseInt(d.toString());
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // number ::= LONGINT 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = li.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // number ::= IMAGNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = i.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // number ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = Float.parseFloat(f.toString());
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // unop ::= TILDE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=t;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // unop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=p;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // unop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=m;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // atom ::= LCURLY dictorsetmaker error 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // atom ::= LBRACK error 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // atom ::= LPAREN testlist_comp error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // atom ::= LPAREN yield_expr error 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // atom ::= LCURLY error 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // atom ::= LPAREN error 
            {
              Object RESULT =null;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // atom ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // atom ::= LBRACK listmaker RBRACK 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // atom ::= LBRACK testlist RBRACK 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // atom ::= LPAREN testlist_comp RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // atom ::= LPAREN yield_expr RPAREN 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // atom ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // atom ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // atom ::= unop atom 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // atom ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#ATOM: solo una String"); RESULT = s;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // atom ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#ATOM: solo un number (float,int,double,etc...)"); RESULT = n;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // atom ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#ATOM: solo name"); RESULT = n;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr ::= atom trailer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#EXPR: complessa"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr ::= atom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#EXPR: semplice"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // binop ::= DIVDIV 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // binop ::= ECOM 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT="and";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // binop ::= PIPE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT="or";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // binop ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = not;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // binop ::= MULTMULT 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // binop ::= OR 
            {
              Object RESULT =null;
		RESULT = "or";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // binop ::= AND 
            {
              Object RESULT =null;
		RESULT = "and";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // binop ::= NEQ 
            {
              Object RESULT =null;
		RESULT = "~=";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // binop ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = eq;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // binop ::= MAIEQ 
            {
              Object RESULT =null;
		int maieqleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int maieqright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object maieq = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = maieq;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // binop ::= MAIOR 
            {
              Object RESULT =null;
		int magleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int magright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object mag = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = mag;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // binop ::= MINEQ 
            {
              Object RESULT =null;
		int mineqleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mineqright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object mineq = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = mineq;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // binop ::= MINOR 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = min;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // binop ::= RSHIFT 
            {
              Object RESULT =null;
		int rshiftleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rshiftright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object rshift = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = rshift;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // binop ::= LSHIFT 
            {
              Object RESULT =null;
		int lshiftleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lshiftright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object lshift = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = lshift;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // binop ::= NOT IN 
            {
              Object RESULT =null;
		int notinleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int notinright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object notin = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = notin;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // binop ::= IS NOT 
            {
              Object RESULT =null;
		int isnotleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int isnotright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object isnot = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "~=";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // binop ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = in;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // binop ::= IS 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "==";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // binop ::= MOD 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = m;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // binop ::= EXPON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = ex;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // binop ::= DIVIDE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = d;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // binop ::= MULT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = m;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // binop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = m;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // binop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = p;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // comparison ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println(""); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // comparison ::= comparison binop expr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // test ::= lambdef 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#TEST: lambda"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // test ::= comparison 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#TEST: comparison"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // assign_recoursive ::= ASSIGN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",38, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // assign_recoursive ::= ASSIGN testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int ass_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int ass_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ass_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",38, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // stmt_rec ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",67, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // stmt_rec ::= stmt_rec stmt 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",67, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // suite ::= NEWLINE INDENT stmt_rec DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 System.out.println("#SUITE: complessa...."); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("suite",66, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // suite ::= simple_stmt 
            {
              Object RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object simple = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SUITE: istruzione scritta sulla stessa riga della definizione funzione"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("suite",66, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // with_item_recoursive ::= with_item_recoursive COMMA with_item 
            {
              Object RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",75, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // with_item_recoursive ::= COMMA with_item 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",75, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // with_item ::= test AS expr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item",74, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // with_item ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item",74, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // with_stmt ::= WITH with_item with_item_recoursive COLON suite 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#WITH_STMT"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_stmt",62, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // except_clause ::= EXCEPT test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // except_clause ::= EXCEPT test AS test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // except_clause ::= EXCEPT test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // except_clause ::= EXCEPT 
            {
              Object RESULT =null;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // except_clause_recoursive ::= except_clause_recoursive except_clause COLON suite 
            {
              Object RESULT =null;
		int ecrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int ecrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object ecrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",73, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // except_clause_recoursive ::= except_clause COLON suite 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",73, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-9)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // try_stmt ::= TRY COLON suite except_clause_recoursive FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // try_stmt ::= TRY COLON suite except_clause_recoursive 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // for_stmt ::= FOR exprlist IN range_stmt error suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#FOR_STMT: GESTIONE ERRORE");  
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // for_stmt ::= FOR exprlist IN testlist error suite 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#FOR_STMT: GESTIONE ERRORE");  
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // for_stmt ::= FOR exprlist IN range_stmt COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#FOR_STMT: con uso di RANGE");  
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#FOR_STMT: semplice");  
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // while_stmt ::= WHILE test error suite 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#WHILE_STMT: GESTIONE ERRORE");  
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("while_stmt",59, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // while_stmt ::= WHILE test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#WHILE_STMT: con else! "); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("while_stmt",59, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // while_stmt ::= WHILE test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#WHILE_STMT: semplice"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("while_stmt",59, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // else_recoursive ::= ELIF test error suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",71, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // else_recoursive ::= else_recoursive ELIF test COLON suite 
            {
              Object RESULT =null;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",71, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // else_recoursive ::= ELIF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",71, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // if_stmt ::= IF test COLON suite ELSE error suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: GESTIONE ERRORE"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // if_stmt ::= IF test error suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: GESTIONE ERRORE"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // if_stmt ::= IF test error suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: GESTIONE ERRORE"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if_stmt ::= IF test error suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: con gestione errore sull'expr della condizione"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // if_stmt ::= IF test COLON suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: con ELIF ricorsivo + else finale"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // if_stmt ::= IF test COLON suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: con ELIF ricorsivo ma SENZA else"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: con singolo ELSE"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_stmt ::= IF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#IF_STMT: semplice"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // compound_stmt ::= decorated 
            {
              Object RESULT =null;
		 System.out.println("#COMPOUND_STMT: Blocco DECORATED"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // compound_stmt ::= classdef 
            {
              Object RESULT =null;
		 System.out.println("#COMPOUND_STMT: Blocco CLASS"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // compound_stmt ::= funcdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#COMPOUND_STMT: Blocco DEF-FUNZIONE"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // compound_stmt ::= with_stmt 
            {
              Object RESULT =null;
		 System.out.println("#COMPOUND_STMT: Blocco WITH"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // compound_stmt ::= try_stmt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#COMPOUND_STMT: Blocco TRY"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#COMPOUND_STMT: Blocco FOR"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#COMPOUND_STMT: Blocco WHILE"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int if_stmtleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int if_stmtright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object if_stmt = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#COMPOUND_STMT: Blocco IF"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assert_stmt ::= ASSERT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "assert (" + t + ")";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("assert_stmt",9, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exec_stmt ::= EXEC expr IN test COMMA test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exec_stmt ::= EXEC expr IN test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exec_stmt ::= EXEC expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "exec " + e;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // name_recoursive ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=n;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // name_recoursive ::= name_recoursive COMMA NAME 
            {
              Object RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object nr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=nr+","+n;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // global_stmt ::= GLOBAL name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT="global "+n.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("global_stmt",10, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dot_rec ::= DOT 
            {
              Object RESULT =null;
		RESULT=".";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dot_rec",46, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dot_rec ::= DOT dot_rec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT="."+d;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dot_rec",46, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // import_as_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_name",44, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // import_as_name ::= NAME AS NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_name",44, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // import_as_names ::= import_as_name 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_names",45, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // import_as_names ::= import_as_name COMMA import_as_names 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_names",45, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dotted_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_name",41, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dotted_name ::= NAME DOT dotted_name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_name",41, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dotted_as_name ::= dotted_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",42, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dotted_as_name ::= dotted_name AS NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",42, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dotted_as_names ::= dotted_as_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",43, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dotted_as_names ::= dotted_as_names COMMA dotted_as_name 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",43, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // import_stmt ::= FROM DOT dot_rec IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // import_stmt ::= FROM DOT dot_rec IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // import_stmt ::= FROM DOT dot_rec IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // import_stmt ::= FROM dot_rec dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // import_stmt ::= FROM dot_rec dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // import_stmt ::= FROM dot_rec dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // import_stmt ::= FROM dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_stmt ::= FROM dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_stmt ::= FROM dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_stmt ::= IMPORT dotted_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // raise_stmt ::= RAISE test COMMA test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",40, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // raise_stmt ::= RAISE test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",40, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // raise_stmt ::= RAISE test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",40, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#RETURN: "+t); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("return_stmt",39, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // flow_stmt ::= yield_expr 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#FLOW_STMT: yield"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // flow_stmt ::= raise_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#FLOW_STMT: raise"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#FLOW_STMT: return"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;
		 System.out.println("#FLOW_STMT: continue"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;
		 System.out.println("#FLOW_STMT: break"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // del_stmt ::= DEL exprlist 
            {
              Object RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#DEL:  todo "); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("del_stmt",6, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // range_stmt ::= RANGE LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 System.out.println("#RANGE: con 3 paramentri"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("range_stmt",36, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // range_stmt ::= RANGE LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 System.out.println("#RANGE: con 2 paramentri"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("range_stmt",36, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // range_stmt ::= RANGE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 System.out.println("#RANGE: con 1 solo paramentro"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("range_stmt",36, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_stmt ::= PRINT RSHIFT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#PRINT: print con shift a destra"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // print_stmt ::= PRINT testlist COMMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 System.out.println("#PRINT: con testlist e con virgola"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print_stmt ::= PRINT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#PRINT: con testlist e senza virgola finale"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print_stmt ::= PRINT 
            {
              Object RESULT =null;
		 System.out.println("#PRINT: vuoto!"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // augassign ::= LSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  <<= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // augassign ::= RSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  >>= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // augassign ::= EXPEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  ^= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // augassign ::= OREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  |= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // augassign ::= ANDEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  &= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // augassign ::= MODEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  %= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // augassign ::= DIVEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  /= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // augassign ::= MULTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  *= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // augassign ::= MINUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  -= "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // augassign ::= PLUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#AUGASSIGN: Operatore  += "); RESULT=op;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_stmt ::= testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_stmt ::= testlist augassign testlist 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_stmt ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // small_stmt ::= comment 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione COMMENT"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // small_stmt ::= exec_stmt 
            {
              Object RESULT =null;
		 System.out.println("#SMALL_STMT: gestione EXEC"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // small_stmt ::= global_stmt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione GLOBAL"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // small_stmt ::= assert_stmt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione ASSERT"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // small_stmt ::= import_stmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione IMPORT"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione FLOW"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // small_stmt ::= PASS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione PASS"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // small_stmt ::= del_stmt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione DEL"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // small_stmt ::= range_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione RANGE"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione PRINT"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#SMALL_STMT: gestione EXPR_STMT"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // small_stmt_kleine ::= small_stmt_kleine SEMI small_stmt 
            {
              Object RESULT =null;
		int skleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int skright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object sk = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt_kleine",69, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // small_stmt_kleine ::= SEMI small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt_kleine",69, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_stmt ::= small_stmt small_stmt_kleine SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int skleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int skright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object sk = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_stmt ::= small_stmt small_stmt_kleine NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int skleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int skright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object sk = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_stmt ::= small_stmt SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#STMT: compound_stmt"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= simple_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 System.out.println("#STMT: simple_stmt"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fplist ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									System.out.println("#CUP - fplist: ho un unico parametro \n");
									RESULT =f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fplist ::= fplist COMMA fpdef 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									System.out.println("#CUP - fplist: ho un oggetto tupla.Ogni elemento lo prendo singolarmente ");
									System.out.println("perche' non conosco il tipo dell'elemento \n");
									RESULT = fl+","+f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fpdef ::= LPAREN fplist RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
									System.out.println("#CUP - fpdef:restituisco i diversi attributi con le parentesi \n");
									RESULT=f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fpdef ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									System.out.println("#CUP - fpdef:restituisco un unico parametro \n");
									RESULT=n;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // single_parameter ::= fpdef ASSIGN test 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									System.out.println("#CUP - Funzione con parametro ed assegnazione nel prototipo non supportata in JAVA");
									semanticAlert("Funzione con parametro ed assegnazione nel prototipo non supportata in JAVA");
									RESULT=f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("single_parameter",32, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // single_parameter ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									System.out.println("#CUP - Funzione in cui il parametro non ha valore di default"); 
									RESULT=f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("single_parameter",32, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // positional_arguments ::= single_parameter 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									System.out.println("#CUP - Funzione con 1 solo parametro "); 
									RESULT=d;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",31, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // positional_arguments ::= positional_arguments COMMA single_parameter 
            {
              Object RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									System.out.println("#CUP - positional_arguments:Funzione con tanti parametri "); 
									RESULT=dr+","+d;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",31, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varargslist ::= MULTMULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								System.out.println("#CUP - Funzione solo con **NAME - "+n); 
								System.out.println("trattasi di tupla+dizionario:utilizzo un hashmap di object poich� in python non si definiscono i");
								System.out.println("tipi durante i prototipi \n");
								RESULT = new String();
								RESULT="HashMap "+n;
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varargslist ::= MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								System.out.println("#CUP - Funzione con *NAME + **NAME - "+n1 + " - "+n2); 
								System.out.println("trattasi di tupla+dizionario:utilizzo un hashmap di object poich� in python non si definiscono i");
								System.out.println("tipi durante i prototipi \n");
								RESULT = new String();
								RESULT="ArrayList "+n1+","+"HashMap "+n2;
						
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varargslist ::= MULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
								System.out.println("#CUP - Funzione solo con *NAME - "+n); 
								System.out.println("trattasi di tupla:utilizzo un arraylist di object poich� in python non si definiscono i");
								System.out.println("tipi durante i prototipi \n");
								RESULT = new String();
								RESULT="ArrayList "+n;
									
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varargslist ::= positional_arguments COMMA MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								System.out.println("#CUP - Funzione con *NAME + **NAME - "+ d + " - "+n1 + " - "+n2); 
								System.out.println("trattasi di tupla+dizionario:utilizzo un hashmap di object poich� in python non si definiscono i");
								System.out.println("tipi durante i prototipi \n");
								RESULT = new String();
								RESULT=d+","+"ArrayList "+n1+","+"HashMap "+n2;
														
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varargslist ::= positional_arguments COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								System.out.println("#CUP - Funzione con argomenti + **NAME - "+ d + " - "+n); 
								System.out.println("trattasi di dizionario:utilizzo un hashmap di object poich� in python non si definiscono i");
								System.out.println("tipi durante i prototipi \n");
								RESULT = new String();
								RESULT=d+","+"HashMap "+n;
							
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varargslist ::= positional_arguments COMMA MULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								System.out.println("#CUP - Funzione con argomenti + *NAME - "+ d + " - "+n);
								System.out.println("trattasi di tupla:utilizzo un arraylist di object poich� in python non si definiscono i");
								System.out.println("tipi durante i prototipi \n");
								RESULT = new String();
								RESULT=d+","+"ArrayList "+n;
														 
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varargslist ::= positional_arguments 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								System.out.println("#CUP - varargslist:Funzione con 1 solo Argomento "+ d); 
								RESULT=d;
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= LPAREN varargslist RPAREN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
							System.out.println("#CUP - parameters: Argomenti Funzione: "+ v);
							//String[] var = (String[])v; PER TIRARE FUORI LE SINGOLE VARIABILI
							RESULT=v;	
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("parameters",78, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 
							System.out.println("#CUP - parameters:Funzione senza arogmenti ");  
							//NON RITORNO NIENTE
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("parameters",78, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcdef ::= DEF NAME parameters COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 

					System.out.println("#CUP - Definizione funzione: "+n);
			 		
			 		if(p == null) //se non ci sono argomenti inserisco solo le parentesi
			 		{

						ArrayList<String> parameters = new ArrayList<String>();
						SymbolType symbolType=new SymbolType(n,"function","",parameters,"", parser.scopeLevelCounter);
			 			parser.symTable.putSymbol(0,n,symbolType);
			 			
			 		}
			 		else
			 		{
			  			//INSERIRE CODICE :-D
			  			ArrayList<String> parameters=tokenParameters(p.toString());
			    		SymbolType symbolType=new SymbolType(n,"function","",parameters,"", parser.scopeLevelCounter);
			 			parser.symTable.putSymbol(0,n,symbolType);
			    		
			    	}
			 
			
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("funcdef",63, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decorated ::= decorators funcdef 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorated",65, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decorated ::= decorators classdef 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorated",65, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decorators ::= decorators decorator 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorators",77, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decorators ::= decorator 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorators",77, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decorator ::= AT dotted_name LPAREN arglist RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorator",76, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decorator ::= AT dotted_name LPAREN RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorator",76, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decorator ::= AT dotted_name NEWLINE 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorator",76, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog_manager ::= 
            {
              Object RESULT =null;
		 System.out.println("#CUP - Terminata Scansione File Python..."); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog_manager",1, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog_manager ::= stmt prog_manager 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog_manager",1, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog_manager ::= NEWLINE prog_manager 
            {
              Object RESULT =null;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog_manager",1, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= prog_manager 
            {
              Object RESULT =null;
		 System.out.println("#CUP - Qui verrà salvato il file Java"); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		RESULT = start_val;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TranslatorPy2JCup$parser.done_parsing();
          return CUP$TranslatorPy2JCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

