
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 04 11:32:05 CEST 2012
//----------------------------------------------------

package translator;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.lang.*;
import symbol.*;
import models.*;
import util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 04 11:32:05 CEST 2012
  */
public class TranslatorPy2JCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TranslatorPy2JCup() {super();}

  /** Constructor which sets the default scanner. */
  public TranslatorPy2JCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TranslatorPy2JCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\116\005" +
    "\000\002\116\007\000\002\116\010\000\002\117\003\000" +
    "\002\117\004\000\002\103\004\000\002\103\004\000\002" +
    "\101\007\000\002\120\004\000\002\120\005\000\002\040" +
    "\003\000\002\040\006\000\002\040\006\000\002\040\011" +
    "\000\002\040\004\000\002\040\007\000\002\040\004\000" +
    "\002\041\005\000\002\041\003\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\005\000\002\043\005\000\002\044\005" +
    "\000\002\044\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\006\000\002\107\004\000\002\107\005\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\004\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\007\003\000\002\007\004\000\002\007" +
    "\005\000\002\007\005\000\002\046\006\000\002\046\010" +
    "\000\002\046\012\000\002\010\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\051\004\000\002\052\004\000\002\052" +
    "\006\000\002\052\010\000\002\012\004\000\002\012\006" +
    "\000\002\012\010\000\002\012\006\000\002\012\007\000" +
    "\002\012\011\000\002\012\007\000\002\012\007\000\002" +
    "\012\011\000\002\012\007\000\002\055\005\000\002\055" +
    "\003\000\002\054\005\000\002\054\003\000\002\053\005" +
    "\000\002\053\003\000\002\057\005\000\002\057\003\000" +
    "\002\056\005\000\002\056\003\000\002\060\004\000\002" +
    "\060\003\000\002\014\004\000\002\045\005\000\002\045" +
    "\003\000\002\015\004\000\002\015\006\000\002\015\010" +
    "\000\002\013\004\000\002\013\006\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\074\006\000\002\074\011\000\002\074\007" +
    "\000\002\074\012\000\002\074\006\000\002\074\007\000" +
    "\002\074\012\000\002\074\011\000\002\111\006\000\002" +
    "\111\007\000\002\111\006\000\002\075\006\000\002\075" +
    "\011\000\002\075\006\000\002\076\010\000\002\076\010" +
    "\000\002\076\010\000\002\076\010\000\002\077\010\000" +
    "\002\077\006\000\002\077\011\000\002\077\011\000\002" +
    "\077\014\000\002\113\005\000\002\113\006\000\002\112" +
    "\003\000\002\112\004\000\002\112\006\000\002\112\006" +
    "\000\002\100\007\000\002\114\003\000\002\114\005\000" +
    "\002\115\004\000\002\115\005\000\002\104\003\000\002" +
    "\104\006\000\002\105\004\000\002\105\003\000\002\050" +
    "\005\000\002\050\004\000\002\025\003\000\002\025\003" +
    "\000\002\021\005\000\002\021\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\023\003\000\002\023\004\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\004\000\002\024\004\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\027\003\000\002\027\004\000\002" +
    "\031\004\000\002\031\002\000\002\032\005\000\002\032" +
    "\007\000\002\030\003\000\002\030\004\000\002\033\005" +
    "\000\002\033\003\000\002\034\003\000\002\034\005\000" +
    "\002\022\005\000\002\022\006\000\002\026\004\000\002" +
    "\026\005\000\002\026\004\000\002\026\005\000\002\026" +
    "\004\000\002\026\006\000\002\026\007\000\002\026\006" +
    "\000\002\026\007\000\002\062\003\000\002\062\004\000" +
    "\002\064\004\000\002\064\005\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\004\000\002\063" +
    "\005\000\002\063\006\000\002\063\005\000\002\063\004" +
    "\000\002\063\005\000\002\063\004\000\002\065\003\000" +
    "\002\065\004\000\002\102\006\000\002\102\010\000\002" +
    "\102\011\000\002\061\003\000\002\061\004\000\002\061" +
    "\004\000\002\061\005\000\002\061\007\000\002\061\007" +
    "\000\002\061\004\000\002\067\004\000\002\067\005\000" +
    "\002\067\003\000\002\066\003\000\002\066\004\000\002" +
    "\066\005\000\002\035\003\000\002\035\003\000\002\036" +
    "\006\000\002\036\007\000\002\036\007\000\002\037\004" +
    "\000\002\037\005\000\002\071\003\000\002\071\003\000" +
    "\002\070\006\000\002\070\007\000\002\072\004\000\002" +
    "\072\005\000\002\110\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e2\000\124\002\ufffd\006\103\007\070\010\046\011" +
    "\100\012\035\013\031\017\056\020\072\023\062\024\007" +
    "\025\107\026\101\027\075\032\021\035\023\036\033\041" +
    "\016\045\074\046\020\047\063\050\065\051\057\052\120" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\110\005\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\117\132\022\133\112\001\002\000\040\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\022\133\112\001\002\000\004\132\235\001\002\000\006" +
    "\041\uffd1\072\uffd1\001\002\000\006\062\u01be\132\235\001" +
    "\002\000\046\003\u01b3\032\021\054\054\055\077\075\025" +
    "\077\010\100\u01b1\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\124\002\ufffd\006\103\007\070\010\046\011" +
    "\100\012\035\013\031\017\056\020\072\023\062\024\007" +
    "\025\107\026\101\027\075\032\021\035\023\036\033\041" +
    "\016\045\074\046\020\047\063\050\065\051\057\052\120" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\110\005\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\117\132\022\133\112\001\002\000\142\003" +
    "\uff2a\004\uff2a\005\uff2a\023\uff2a\026\uff2a\030\uff2a\031\uff2a" +
    "\033\uff2a\034\uff2a\040\uff2a\041\uff2a\042\uff2a\054\uff2a\055" +
    "\uff2a\056\uff2a\057\uff2a\060\uff2a\061\uff2a\062\uff2a\063\uff2a" +
    "\064\uff2a\065\uff2a\066\uff2a\067\uff2a\070\uff2a\071\uff2a\072" +
    "\uff2a\073\uff2a\074\uff2a\075\uff2a\076\uff2a\100\uff2a\101\uff2a" +
    "\102\uff2a\104\uff2a\105\uff2a\106\uff2a\107\uff2a\111\uff2a\112" +
    "\uff2a\113\uff2a\114\uff2a\115\uff2a\116\uff2a\117\uff2a\120\uff2a" +
    "\121\uff2a\122\uff2a\001\002\000\134\003\uff5e\004\uff5e\005" +
    "\uff5e\023\uff5e\026\uff5e\030\uff5e\031\uff5e\033\uff5e\034\uff5e" +
    "\040\uff5e\041\uff5e\042\uff5e\054\uff5e\055\uff5e\056\uff5e\057" +
    "\uff5e\060\uff5e\061\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e" +
    "\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\076" +
    "\uff5e\100\uff5e\102\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e" +
    "\111\uff5e\112\uff5e\113\uff5e\114\uff5e\115\uff5e\116\uff5e\117" +
    "\uff5e\120\uff5e\121\uff5e\122\uff5e\001\002\000\006\041\uffd3" +
    "\072\uffd3\001\002\000\006\041\uffb5\072\uffb5\001\002\000" +
    "\124\002\ufffd\006\103\007\070\010\046\011\100\012\035" +
    "\013\031\017\056\020\072\023\062\024\007\025\107\026" +
    "\101\027\075\032\021\035\023\036\033\041\016\045\074" +
    "\046\020\047\063\050\065\051\057\052\120\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\110\005" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\126\002\uff8a\006\uff8a" +
    "\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\017\uff8a\020" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\032\uff8a" +
    "\035\uff8a\036\uff8a\041\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\075\uff8a\077\uff8a\101\uff8a\103\uff8a\110\uff8a\123\uff8a\124" +
    "\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a" +
    "\133\uff8a\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\034\042\u0172\056\u0174\074\u01a6\101\u0127\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\u0128\133\u0125\001\002\000\142\003\uff42\004\uff42\005\uff42" +
    "\023\uff42\026\uff42\030\uff42\031\uff42\033\uff42\034\uff42\040" +
    "\uff42\041\uff42\042\uff42\054\uff42\055\uff42\056\uff42\057\uff42" +
    "\060\uff42\061\uff42\062\uff42\063\uff42\064\uff42\065\uff42\066" +
    "\uff42\067\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074\uff42" +
    "\075\uff42\076\uff42\100\uff42\101\uff42\102\uff42\104\uff42\105" +
    "\uff42\106\uff42\107\uff42\111\uff42\112\uff42\113\uff42\114\uff42" +
    "\115\uff42\116\uff42\117\uff42\120\uff42\121\uff42\122\uff42\001" +
    "\002\000\006\041\uffd4\072\uffd4\001\002\000\142\003\uff29" +
    "\004\uff29\005\uff29\023\uff29\026\uff29\030\uff29\031\uff29\033" +
    "\uff29\034\uff29\040\uff29\041\uff29\042\uff29\054\uff29\055\uff29" +
    "\056\uff29\057\uff29\060\uff29\061\uff29\062\uff29\063\uff29\064" +
    "\uff29\065\uff29\066\uff29\067\uff29\070\uff29\071\uff29\072\uff29" +
    "\073\uff29\074\uff29\075\uff29\076\uff29\100\uff29\101\uff29\102" +
    "\uff29\104\uff29\105\uff29\106\uff29\107\uff29\111\uff29\112\uff29" +
    "\113\uff29\114\uff29\115\uff29\116\uff29\117\uff29\120\uff29\121" +
    "\uff29\122\uff29\001\002\000\046\003\u019f\032\021\054\054" +
    "\055\077\075\025\076\uff24\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\117" +
    "\132\022\133\112\001\002\000\006\041\uffd7\072\uffd7\001" +
    "\002\000\006\041\uffd0\072\uffd0\001\002\000\050\003\u0189" +
    "\032\021\036\033\054\054\055\077\075\025\077\010\101" +
    "\030\102\u0187\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\117\132\022\133\112\001\002\000" +
    "\040\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\006\041\uffd8\072\uffd8" +
    "\001\002\000\052\003\uff27\032\021\041\uff27\054\054\055" +
    "\077\072\uff27\075\025\077\010\101\030\102\uff27\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\040\054\uff2f\055\uff2f" +
    "\075\uff2f\077\uff2f\101\uff2f\103\uff2f\123\uff2f\124\uff2f\125" +
    "\uff2f\126\uff2f\127\uff2f\130\uff2f\131\uff2f\132\uff2f\133\uff2f" +
    "\001\002\000\004\132\u016d\001\002\000\142\003\uff44\004" +
    "\uff44\005\uff44\023\uff44\026\uff44\030\uff44\031\uff44\033\uff44" +
    "\034\uff44\040\uff44\041\uff44\042\uff44\054\uff44\055\uff44\056" +
    "\uff44\057\uff44\060\uff44\061\uff44\062\u011d\063\uff44\064\uff44" +
    "\065\uff44\066\uff44\067\uff44\070\uff44\071\uff44\072\uff44\073" +
    "\uff44\074\uff44\075\u011b\076\uff44\100\uff44\101\u011c\102\uff44" +
    "\104\uff44\105\uff44\106\uff44\107\uff44\111\uff44\112\uff44\113" +
    "\uff44\114\uff44\115\uff44\116\uff44\117\uff44\120\uff44\121\uff44" +
    "\122\uff44\001\002\000\006\041\uffce\072\uffce\001\002\000" +
    "\126\002\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\017\uff8b\020\uff8b\023\uff8b\024\uff8b\025\uff8b\026" +
    "\uff8b\027\uff8b\032\uff8b\035\uff8b\036\uff8b\041\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\075\uff8b\077\uff8b\101\uff8b\103\uff8b" +
    "\110\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130" +
    "\uff8b\131\uff8b\132\uff8b\133\uff8b\001\002\000\142\003\uff2e" +
    "\004\uff2e\005\uff2e\023\uff2e\026\uff2e\030\uff2e\031\uff2e\033" +
    "\uff2e\034\uff2e\040\uff2e\041\uff2e\042\uff2e\054\uff2e\055\uff2e" +
    "\056\uff2e\057\uff2e\060\uff2e\061\uff2e\062\uff2e\063\uff2e\064" +
    "\uff2e\065\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e\072\uff2e" +
    "\073\uff2e\074\uff2e\075\uff2e\076\uff2e\100\uff2e\101\uff2e\102" +
    "\uff2e\104\uff2e\105\uff2e\106\uff2e\107\uff2e\111\uff2e\112\uff2e" +
    "\113\uff2e\114\uff2e\115\uff2e\116\uff2e\117\uff2e\120\uff2e\121" +
    "\uff2e\122\uff2e\001\002\000\006\041\uffd2\072\uffd2\001\002" +
    "\000\006\041\uffb6\072\uffb6\001\002\000\126\002\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\017\uff90" +
    "\020\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\032" +
    "\uff90\035\uff90\036\uff90\041\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\075\uff90\077\uff90\101\uff90\103\uff90\110\uff90\123\uff90" +
    "\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90\131\uff90\132" +
    "\uff90\133\uff90\001\002\000\126\002\uff91\006\uff91\007\uff91" +
    "\010\uff91\011\uff91\012\uff91\013\uff91\017\uff91\020\uff91\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\027\uff91\032\uff91\035\uff91" +
    "\036\uff91\041\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\075\uff91" +
    "\077\uff91\101\uff91\103\uff91\110\uff91\123\uff91\124\uff91\125" +
    "\uff91\126\uff91\127\uff91\130\uff91\131\uff91\132\uff91\133\uff91" +
    "\001\002\000\004\132\u010f\001\002\000\010\010\ufff9\012" +
    "\ufff9\110\ufff9\001\002\000\004\002\000\001\002\000\036" +
    "\041\uffcd\071\172\072\uffcd\073\u0107\111\u0103\112\u0104\113" +
    "\u0101\114\u0100\115\u010b\116\u0102\117\u0105\120\u010a\121\377" +
    "\122\u0106\001\002\000\126\002\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\012\uff8d\013\uff8d\017\uff8d\020\uff8d\023\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\027\uff8d\032\uff8d\035\uff8d\036" +
    "\uff8d\041\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\075\uff8d\077" +
    "\uff8d\101\uff8d\103\uff8d\110\uff8d\123\uff8d\124\uff8d\125\uff8d" +
    "\126\uff8d\127\uff8d\130\uff8d\131\uff8d\132\uff8d\133\uff8d\001" +
    "\002\000\134\003\uff61\004\346\005\uff61\023\uff61\026\uff61" +
    "\030\354\031\347\033\355\034\351\040\352\041\uff61\042" +
    "\363\054\350\055\370\056\364\057\366\060\344\061\353" +
    "\063\367\064\357\065\371\066\360\067\372\070\373\071" +
    "\uff61\072\uff61\073\uff61\074\uff61\076\uff61\100\uff61\102\uff61" +
    "\104\365\105\345\106\362\107\356\111\uff61\112\uff61\113" +
    "\uff61\114\uff61\115\uff61\116\uff61\117\uff61\120\uff61\121\uff61" +
    "\122\uff61\001\002\000\040\054\uff30\055\uff30\075\uff30\077" +
    "\uff30\101\uff30\103\uff30\123\uff30\124\uff30\125\uff30\126\uff30" +
    "\127\uff30\130\uff30\131\uff30\132\uff30\133\uff30\001\002\000" +
    "\126\002\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\017\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\032\uffdf\035\uffdf\036\uffdf\041\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\075\uffdf\077\uffdf\101\uffdf\103\uffdf" +
    "\110\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130" +
    "\uffdf\131\uffdf\132\uffdf\133\uffdf\001\002\000\040\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\142\003\uff2b\004\uff2b\005\uff2b\023\uff2b\026\uff2b" +
    "\030\uff2b\031\uff2b\033\uff2b\034\uff2b\040\uff2b\041\uff2b\042" +
    "\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b\060\uff2b\061\uff2b" +
    "\062\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b\070" +
    "\uff2b\071\uff2b\072\uff2b\073\uff2b\074\uff2b\075\uff2b\076\uff2b" +
    "\100\uff2b\101\uff2b\102\uff2b\104\uff2b\105\uff2b\106\uff2b\107" +
    "\uff2b\111\uff2b\112\uff2b\113\uff2b\114\uff2b\115\uff2b\116\uff2b" +
    "\117\uff2b\120\uff2b\121\uff2b\122\uff2b\001\002\000\142\003" +
    "\uff2c\004\uff2c\005\uff2c\023\uff2c\026\uff2c\030\uff2c\031\uff2c" +
    "\033\uff2c\034\uff2c\040\uff2c\041\uff2c\042\uff2c\054\uff2c\055" +
    "\uff2c\056\uff2c\057\uff2c\060\uff2c\061\uff2c\062\uff2c\063\uff2c" +
    "\064\uff2c\065\uff2c\066\uff2c\067\uff2c\070\uff2c\071\uff2c\072" +
    "\uff2c\073\uff2c\074\uff2c\075\uff2c\076\uff2c\100\uff2c\101\uff2c" +
    "\102\uff2c\104\uff2c\105\uff2c\106\uff2c\107\uff2c\111\uff2c\112" +
    "\uff2c\113\uff2c\114\uff2c\115\uff2c\116\uff2c\117\uff2c\120\uff2c" +
    "\121\uff2c\122\uff2c\001\002\000\040\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\010" +
    "\010\046\012\035\110\005\001\002\000\004\074\251\001" +
    "\002\000\006\041\uffd6\072\uffd6\001\002\000\052\003\uff1e" +
    "\023\uff1e\026\uff1e\041\uff1e\071\uff1e\072\uff1e\073\uff1e\074" +
    "\uff1e\076\uff1e\102\uff1e\111\uff1e\112\uff1e\113\uff1e\114\uff1e" +
    "\115\uff1e\116\uff1e\117\uff1e\120\uff1e\121\uff1e\122\uff1e\001" +
    "\002\000\006\041\uffb8\072\uffb8\001\002\000\006\041\uffd5" +
    "\072\uffd5\001\002\000\006\041\ufee3\072\ufee3\001\002\000" +
    "\142\003\uff28\004\uff28\005\uff28\023\uff28\026\uff28\030\uff28" +
    "\031\uff28\033\uff28\034\uff28\040\uff28\041\uff28\042\uff28\054" +
    "\uff28\055\uff28\056\uff28\057\uff28\060\uff28\061\uff28\062\uff28" +
    "\063\uff28\064\uff28\065\uff28\066\uff28\067\uff28\070\uff28\071" +
    "\uff28\072\uff28\073\uff28\074\uff28\075\uff28\076\uff28\100\uff28" +
    "\101\uff28\102\uff28\104\uff28\105\uff28\106\uff28\107\uff28\111" +
    "\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\121\uff28\122\uff28\001\002\000\050\032\021\041" +
    "\uffc0\054\054\055\077\072\uffc0\075\025\077\010\101\030" +
    "\103\034\107\245\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\004" +
    "\132\235\001\002\000\126\002\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\017\uff8f\020\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\032\uff8f\035\uff8f\036" +
    "\uff8f\041\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\075\uff8f\077" +
    "\uff8f\101\uff8f\103\uff8f\110\uff8f\123\uff8f\124\uff8f\125\uff8f" +
    "\126\uff8f\127\uff8f\130\uff8f\131\uff8f\132\uff8f\133\uff8f\001" +
    "\002\000\040\054\uff31\055\uff31\075\uff31\077\uff31\101\uff31" +
    "\103\uff31\123\uff31\124\uff31\125\uff31\126\uff31\127\uff31\130" +
    "\uff31\131\uff31\132\uff31\133\uff31\001\002\000\006\041\uffb7" +
    "\072\uffb7\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\004\002\176\001\002\000\042\032\021\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\126\002\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\017\uff8c\020\uff8c\023\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\032\uff8c\035\uff8c\036" +
    "\uff8c\041\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\075\uff8c\077" +
    "\uff8c\101\uff8c\103\uff8c\110\uff8c\123\uff8c\124\uff8c\125\uff8c" +
    "\126\uff8c\127\uff8c\130\uff8c\131\uff8c\132\uff8c\133\uff8c\001" +
    "\002\000\006\041\uffb4\072\uffb4\001\002\000\060\003\uff60" +
    "\005\uff60\023\uff60\026\uff60\041\uff60\042\uff60\071\uff60\072" +
    "\uff60\073\uff60\074\uff60\076\uff60\100\uff60\102\uff60\111\uff60" +
    "\112\uff60\113\uff60\114\uff60\115\uff60\116\uff60\117\uff60\120" +
    "\uff60\121\uff60\122\uff60\001\002\000\004\132\165\001\002" +
    "\000\126\002\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\017\uff8e\020\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\032\uff8e\035\uff8e\036\uff8e\041\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\055\uff8e\075\uff8e\077\uff8e\101\uff8e\103" +
    "\uff8e\110\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e" +
    "\130\uff8e\131\uff8e\132\uff8e\133\uff8e\001\002\000\142\003" +
    "\uff41\004\uff41\005\uff41\023\uff41\026\uff41\030\uff41\031\uff41" +
    "\033\uff41\034\uff41\040\uff41\041\uff41\042\uff41\054\uff41\055" +
    "\uff41\056\uff41\057\uff41\060\uff41\061\uff41\062\uff41\063\uff41" +
    "\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41\072" +
    "\uff41\073\uff41\074\uff41\075\uff41\076\uff41\100\uff41\101\uff41" +
    "\102\uff41\104\uff41\105\uff41\106\uff41\107\uff41\111\uff41\112" +
    "\uff41\113\uff41\114\uff41\115\uff41\116\uff41\117\uff41\120\uff41" +
    "\121\uff41\122\uff41\001\002\000\142\003\uff40\004\uff40\005" +
    "\uff40\023\uff40\026\uff40\030\uff40\031\uff40\033\uff40\034\uff40" +
    "\040\uff40\041\uff40\042\uff40\054\uff40\055\uff40\056\uff40\057" +
    "\uff40\060\uff40\061\uff40\062\uff40\063\uff40\064\uff40\065\uff40" +
    "\066\uff40\067\uff40\070\uff40\071\uff40\072\uff40\073\uff40\074" +
    "\uff40\075\uff40\076\uff40\100\uff40\101\uff40\102\uff40\104\uff40" +
    "\105\uff40\106\uff40\107\uff40\111\uff40\112\uff40\113\uff40\114" +
    "\uff40\115\uff40\116\uff40\117\uff40\120\uff40\121\uff40\122\uff40" +
    "\001\002\000\004\101\154\001\002\000\006\041\144\072" +
    "\143\001\002\000\126\002\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\017\uffe0\020\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\035\uffe0\036\uffe0" +
    "\041\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\075\uffe0\077\uffe0" +
    "\101\uffe0\103\uffe0\110\uffe0\123\uffe0\124\uffe0\125\uffe0\126" +
    "\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\001\002" +
    "\000\006\041\uffcf\072\uffcf\001\002\000\142\003\uff2d\004" +
    "\uff2d\005\uff2d\023\uff2d\026\uff2d\030\uff2d\031\uff2d\033\uff2d" +
    "\034\uff2d\040\uff2d\041\uff2d\042\uff2d\054\uff2d\055\uff2d\056" +
    "\uff2d\057\uff2d\060\uff2d\061\uff2d\062\uff2d\063\uff2d\064\uff2d" +
    "\065\uff2d\066\uff2d\067\uff2d\070\uff2d\071\uff2d\072\uff2d\073" +
    "\uff2d\074\uff2d\075\uff2d\076\uff2d\100\uff2d\101\uff2d\102\uff2d" +
    "\104\uff2d\105\uff2d\106\uff2d\107\uff2d\111\uff2d\112\uff2d\113" +
    "\uff2d\114\uff2d\115\uff2d\116\uff2d\117\uff2d\120\uff2d\121\uff2d" +
    "\122\uff2d\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\010\005\141\071\uff6b\074\uff6b\001\002\000\004" +
    "\071\123\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\006\071\125\074\126\001\002\000\042\032\021" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\117" +
    "\132\022\133\112\001\002\000\102\006\103\007\070\011" +
    "\100\013\031\017\056\020\072\024\007\025\107\027\075" +
    "\032\021\035\023\036\033\041\130\045\074\046\020\047" +
    "\063\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\022\133\112\001\002\000\126\002\uff6c" +
    "\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c\017" +
    "\uff6c\020\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c" +
    "\032\uff6c\035\uff6c\036\uff6c\041\uff6c\044\uff6c\045\uff6c\046" +
    "\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c" +
    "\055\uff6c\075\uff6c\077\uff6c\101\uff6c\103\uff6c\110\uff6c\123" +
    "\uff6c\124\uff6c\125\uff6c\126\uff6c\127\uff6c\130\uff6c\131\uff6c" +
    "\132\uff6c\133\uff6c\001\002\000\004\043\132\001\002\000" +
    "\136\002\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67" +
    "\013\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67\022" +
    "\uff67\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\032\uff67" +
    "\035\uff67\036\uff67\041\uff67\044\uff67\045\uff67\046\uff67\047" +
    "\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67\055\uff67" +
    "\075\uff67\077\uff67\101\uff67\103\uff67\110\uff67\123\uff67\124" +
    "\uff67\125\uff67\126\uff67\127\uff67\130\uff67\131\uff67\132\uff67" +
    "\133\uff67\001\002\000\120\006\103\007\070\010\046\011" +
    "\100\012\035\013\031\017\056\020\072\023\062\024\007" +
    "\025\107\026\101\027\075\032\021\035\023\036\033\045" +
    "\074\046\020\047\063\050\065\051\057\052\120\053\113" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\110" +
    "\005\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\117\132\022\133\112\001\002\000\122\006\uff64\007" +
    "\uff64\010\uff64\011\uff64\012\uff64\013\uff64\017\uff64\020\uff64" +
    "\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\032\uff64\035" +
    "\uff64\036\uff64\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64" +
    "\051\uff64\052\uff64\053\uff64\054\uff64\055\uff64\075\uff64\077" +
    "\uff64\101\uff64\103\uff64\110\uff64\123\uff64\124\uff64\125\uff64" +
    "\126\uff64\127\uff64\130\uff64\131\uff64\132\uff64\133\uff64\001" +
    "\002\000\122\006\103\007\070\010\046\011\100\012\035" +
    "\013\031\017\056\020\072\023\062\024\007\025\107\026" +
    "\101\027\075\032\021\035\023\036\033\044\136\045\074" +
    "\046\020\047\063\050\065\051\057\052\120\053\113\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\110\005" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\122\006\uff65\007\uff65" +
    "\010\uff65\011\uff65\012\uff65\013\uff65\017\uff65\020\uff65\023" +
    "\uff65\024\uff65\025\uff65\026\uff65\027\uff65\032\uff65\035\uff65" +
    "\036\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051" +
    "\uff65\052\uff65\053\uff65\054\uff65\055\uff65\075\uff65\077\uff65" +
    "\101\uff65\103\uff65\110\uff65\123\uff65\124\uff65\125\uff65\126" +
    "\uff65\127\uff65\130\uff65\131\uff65\132\uff65\133\uff65\001\002" +
    "\000\136\002\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012" +
    "\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66" +
    "\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\032" +
    "\uff66\035\uff66\036\uff66\041\uff66\044\uff66\045\uff66\046\uff66" +
    "\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055" +
    "\uff66\075\uff66\077\uff66\101\uff66\103\uff66\110\uff66\123\uff66" +
    "\124\uff66\125\uff66\126\uff66\127\uff66\130\uff66\131\uff66\132" +
    "\uff66\133\uff66\001\002\000\006\071\uff68\074\uff68\001\002" +
    "\000\006\071\uff69\074\uff69\001\002\000\040\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\117\132\022\133" +
    "\112\001\002\000\006\071\uff6a\074\uff6a\001\002\000\102" +
    "\006\103\007\070\011\100\013\031\017\056\020\072\024" +
    "\007\025\107\027\075\032\021\035\023\036\033\041\152" +
    "\045\074\046\020\047\063\053\113\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\136\002\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\032\uffde\035\uffde\036\uffde\041\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\075\uffde\077\uffde\101\uffde\103\uffde\110\uffde\123" +
    "\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde" +
    "\132\uffde\133\uffde\001\002\000\006\041\147\072\146\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\150\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\136\002\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\032\uffdc\035\uffdc\036\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\075\uffdc\077\uffdc\101\uffdc\103\uffdc" +
    "\110\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130" +
    "\uffdc\131\uffdc\132\uffdc\133\uffdc\001\002\000\136\002\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\032\uffdb\035\uffdb\036" +
    "\uffdb\041\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\075\uffdb\077" +
    "\uffdb\101\uffdb\103\uffdb\110\uffdb\123\uffdb\124\uffdb\125\uffdb" +
    "\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb\001" +
    "\002\000\006\041\uffd9\072\uffd9\001\002\000\136\002\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\032\uffdd\035\uffdd\036" +
    "\uffdd\041\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\075\uffdd\077" +
    "\uffdd\101\uffdd\103\uffdd\110\uffdd\123\uffdd\124\uffdd\125\uffdd" +
    "\126\uffdd\127\uffdd\130\uffdd\131\uffdd\132\uffdd\133\uffdd\001" +
    "\002\000\006\041\uffda\072\uffda\001\002\000\040\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\006\071\156\102\157\001\002\000" +
    "\040\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\016\003\uffbc\023\uffbc" +
    "\026\uffbc\041\uffbc\072\uffbc\074\uffbc\001\002\000\006\071" +
    "\161\102\162\001\002\000\040\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\117\132\022\133\112\001\002" +
    "\000\016\003\uffbb\023\uffbb\026\uffbb\041\uffbb\072\uffbb\074" +
    "\uffbb\001\002\000\004\102\164\001\002\000\016\003\uffba" +
    "\023\uffba\026\uffba\041\uffba\072\uffba\074\uffba\001\002\000" +
    "\010\041\uff97\071\uff97\072\uff97\001\002\000\010\041\uff99" +
    "\071\167\072\uff99\001\002\000\004\132\170\001\002\000" +
    "\010\041\uff98\071\uff98\072\uff98\001\002\000\012\041\uff93" +
    "\071\172\072\uff93\074\173\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\022\133\112\001\002\000\042\032\021\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\010\041\uff92\071\172\072\uff92\001\002\000" +
    "\052\003\uff1f\023\uff1f\026\uff1f\041\uff1f\071\uff1f\072\uff1f" +
    "\073\uff1f\074\uff1f\076\uff1f\102\uff1f\111\uff1f\112\uff1f\113" +
    "\uff1f\114\uff1f\115\uff1f\116\uff1f\117\uff1f\120\uff1f\121\uff1f" +
    "\122\uff1f\001\002\000\004\002\001\001\002\000\006\003" +
    "\200\074\201\001\002\000\102\006\103\007\070\011\100" +
    "\013\031\017\056\020\072\024\007\025\107\027\075\032" +
    "\021\035\023\036\033\041\130\045\074\046\020\047\063" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\117\132\022\133\112\001\002\000\102\006\103\007" +
    "\070\011\100\013\031\017\056\020\072\024\007\025\107" +
    "\027\075\032\021\035\023\036\033\041\130\045\074\046" +
    "\020\047\063\053\113\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\132" +
    "\002\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013" +
    "\uff89\014\204\015\203\017\uff89\020\uff89\023\uff89\024\uff89" +
    "\025\uff89\026\uff89\027\uff89\032\uff89\035\uff89\036\uff89\041" +
    "\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89" +
    "\052\uff89\053\uff89\054\uff89\055\uff89\075\uff89\077\uff89\101" +
    "\uff89\103\uff89\110\uff89\123\uff89\124\uff89\125\uff89\126\uff89" +
    "\127\uff89\130\uff89\131\uff89\132\uff89\133\uff89\001\002\000" +
    "\006\003\222\074\223\001\002\000\042\032\021\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\132\002\uff87\006\uff87\007\uff87\010" +
    "\uff87\011\uff87\012\uff87\013\uff87\014\207\015\206\017\uff87" +
    "\020\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\032" +
    "\uff87\035\uff87\036\uff87\041\uff87\044\uff87\045\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055" +
    "\uff87\075\uff87\077\uff87\101\uff87\103\uff87\110\uff87\123\uff87" +
    "\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87\132" +
    "\uff87\133\uff87\001\002\000\004\074\213\001\002\000\042" +
    "\032\021\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\117\132\022\133\112\001\002\000\004\074\211\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\132\002\uff80\006\uff80\007\uff80\010" +
    "\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\017\uff80" +
    "\020\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\032" +
    "\uff80\035\uff80\036\uff80\041\uff80\044\uff80\045\uff80\046\uff80" +
    "\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\075\uff80\077\uff80\101\uff80\103\uff80\110\uff80\123\uff80" +
    "\124\uff80\125\uff80\126\uff80\127\uff80\130\uff80\131\uff80\132" +
    "\uff80\133\uff80\001\002\000\102\006\103\007\070\011\100" +
    "\013\031\017\056\020\072\024\007\025\107\027\075\032" +
    "\021\035\023\036\033\041\130\045\074\046\020\047\063" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\117\132\022\133\112\001\002\000\126\002\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\017\uff86" +
    "\020\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\032" +
    "\uff86\035\uff86\036\uff86\041\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055" +
    "\uff86\075\uff86\077\uff86\101\uff86\103\uff86\110\uff86\123\uff86" +
    "\124\uff86\125\uff86\126\uff86\127\uff86\130\uff86\131\uff86\132" +
    "\uff86\133\uff86\001\002\000\006\003\216\074\217\001\002" +
    "\000\102\006\103\007\070\011\100\013\031\017\056\020" +
    "\072\024\007\025\107\027\075\032\021\035\023\036\033" +
    "\041\130\045\074\046\020\047\063\053\113\054\054\055" +
    "\077\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\117\132\022\133" +
    "\112\001\002\000\102\006\103\007\070\011\100\013\031" +
    "\017\056\020\072\024\007\025\107\027\075\032\021\035" +
    "\023\036\033\041\130\045\074\046\020\047\063\053\113" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\117" +
    "\132\022\133\112\001\002\000\132\002\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81" +
    "\017\uff81\020\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\032\uff81\035\uff81\036\uff81\041\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\075\uff81\077\uff81\101\uff81\103\uff81\110\uff81" +
    "\123\uff81\124\uff81\125\uff81\126\uff81\127\uff81\130\uff81\131" +
    "\uff81\132\uff81\133\uff81\001\002\000\132\002\uff7f\006\uff7f" +
    "\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015" +
    "\uff7f\017\uff7f\020\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\032\uff7f\035\uff7f\036\uff7f\041\uff7f\044\uff7f\045" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\055\uff7f\075\uff7f\077\uff7f\101\uff7f\103\uff7f\110" +
    "\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130\uff7f" +
    "\131\uff7f\132\uff7f\133\uff7f\001\002\000\102\006\103\007" +
    "\070\011\100\013\031\017\056\020\072\024\007\025\107" +
    "\027\075\032\021\035\023\036\033\041\130\045\074\046" +
    "\020\047\063\053\113\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\102" +
    "\006\103\007\070\011\100\013\031\017\056\020\072\024" +
    "\007\025\107\027\075\032\021\035\023\036\033\041\130" +
    "\045\074\046\020\047\063\053\113\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\126\002\uff88\006\uff88\007\uff88\010\uff88\011\uff88" +
    "\012\uff88\013\uff88\017\uff88\020\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\032\uff88\035\uff88\036\uff88\041\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\054\uff88\055\uff88\075\uff88\077\uff88\101\uff88" +
    "\103\uff88\110\uff88\123\uff88\124\uff88\125\uff88\126\uff88\127" +
    "\uff88\130\uff88\131\uff88\132\uff88\133\uff88\001\002\000\126" +
    "\002\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013" +
    "\uff82\017\uff82\020\uff82\023\uff82\024\uff82\025\uff82\026\uff82" +
    "\027\uff82\032\uff82\035\uff82\036\uff82\041\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\075\uff82\077\uff82\101\uff82\103\uff82\110" +
    "\uff82\123\uff82\124\uff82\125\uff82\126\uff82\127\uff82\130\uff82" +
    "\131\uff82\132\uff82\133\uff82\001\002\000\130\002\uff85\006" +
    "\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\204" +
    "\017\uff85\020\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\032\uff85\035\uff85\036\uff85\041\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\055\uff85\075\uff85\077\uff85\101\uff85\103\uff85\110\uff85" +
    "\123\uff85\124\uff85\125\uff85\126\uff85\127\uff85\130\uff85\131" +
    "\uff85\132\uff85\133\uff85\001\002\000\132\002\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\207\015" +
    "\230\017\uff84\020\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\032\uff84\035\uff84\036\uff84\041\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\054\uff84\055\uff84\075\uff84\077\uff84\101\uff84\103\uff84\110" +
    "\uff84\123\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84" +
    "\131\uff84\132\uff84\133\uff84\001\002\000\004\074\231\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\126\002\uff83\006\uff83\007\uff83\010" +
    "\uff83\011\uff83\012\uff83\013\uff83\017\uff83\020\uff83\023\uff83" +
    "\024\uff83\025\uff83\026\uff83\027\uff83\032\uff83\035\uff83\036" +
    "\uff83\041\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\075\uff83\077" +
    "\uff83\101\uff83\103\uff83\110\uff83\123\uff83\124\uff83\125\uff83" +
    "\126\uff83\127\uff83\130\uff83\131\uff83\132\uff83\133\uff83\001" +
    "\002\000\012\005\243\041\uffa2\071\uffa2\072\uffa2\001\002" +
    "\000\010\041\uffaf\071\241\072\uffaf\001\002\000\020\005" +
    "\uffa0\027\uffa0\041\uffa0\062\237\071\uffa0\072\uffa0\101\uffa0" +
    "\001\002\000\010\041\uffa4\071\uffa4\072\uffa4\001\002\000" +
    "\004\132\235\001\002\000\016\005\uffa1\027\uffa1\041\uffa1" +
    "\071\uffa1\072\uffa1\101\uffa1\001\002\000\004\132\235\001" +
    "\002\000\010\041\uffa5\071\uffa5\072\uffa5\001\002\000\004" +
    "\132\244\001\002\000\010\041\uffa3\071\uffa3\072\uffa3\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\010" +
    "\041\uffbf\071\247\072\uffbf\001\002\000\046\032\021\041" +
    "\uffbe\054\054\055\077\072\uffbe\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\022\133\112\001\002\000\010\041\uffbd" +
    "\071\172\072\uffbd\001\002\000\102\006\103\007\070\011" +
    "\100\013\031\017\056\020\072\024\007\025\107\027\075" +
    "\032\021\035\023\036\033\041\130\045\074\046\020\047" +
    "\063\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\022\133\112\001\002\000\006\016\255" +
    "\022\254\001\002\000\134\002\uff76\006\uff76\007\uff76\010" +
    "\uff76\011\uff76\012\uff76\013\uff76\015\272\016\255\017\uff76" +
    "\020\uff76\022\270\023\uff76\024\uff76\025\uff76\026\uff76\027" +
    "\uff76\032\uff76\035\uff76\036\uff76\041\uff76\044\uff76\045\uff76" +
    "\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054" +
    "\uff76\055\uff76\075\uff76\077\uff76\101\uff76\103\uff76\110\uff76" +
    "\123\uff76\124\uff76\125\uff76\126\uff76\127\uff76\130\uff76\131" +
    "\uff76\132\uff76\133\uff76\001\002\000\004\074\266\001\002" +
    "\000\044\032\021\054\054\055\077\074\uff70\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\117\132\022\133\112\001\002\000" +
    "\004\074\257\001\002\000\102\006\103\007\070\011\100" +
    "\013\031\017\056\020\072\024\007\025\107\027\075\032" +
    "\021\035\023\036\033\041\130\045\074\046\020\047\063" +
    "\053\113\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\117\132\022\133\112\001\002\000\134\002\uff72\006" +
    "\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\015\uff72" +
    "\016\uff72\017\uff72\020\uff72\022\uff72\023\uff72\024\uff72\025" +
    "\uff72\026\uff72\027\uff72\032\uff72\035\uff72\036\uff72\041\uff72" +
    "\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\075\uff72\077\uff72\101\uff72" +
    "\103\uff72\110\uff72\123\uff72\124\uff72\125\uff72\126\uff72\127" +
    "\uff72\130\uff72\131\uff72\132\uff72\133\uff72\001\002\000\010" +
    "\005\263\071\262\074\uff6f\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\022\133\112\001\002\000\042\032\021\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\004\074\uff6e\001\002\000\004\074\uff6d\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\126\002\uff77\006\uff77\007\uff77\010" +
    "\uff77\011\uff77\012\uff77\013\uff77\017\uff77\020\uff77\023\uff77" +
    "\024\uff77\025\uff77\026\uff77\027\uff77\032\uff77\035\uff77\036" +
    "\uff77\041\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77" +
    "\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\075\uff77\077" +
    "\uff77\101\uff77\103\uff77\110\uff77\123\uff77\124\uff77\125\uff77" +
    "\126\uff77\127\uff77\130\uff77\131\uff77\132\uff77\133\uff77\001" +
    "\002\000\004\074\302\001\002\000\004\074\300\001\002" +
    "\000\004\074\273\001\002\000\102\006\103\007\070\011" +
    "\100\013\031\017\056\020\072\024\007\025\107\027\075" +
    "\032\021\035\023\036\033\041\130\045\074\046\020\047" +
    "\063\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\022\133\112\001\002\000\130\002\uff75" +
    "\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\017" +
    "\uff75\020\uff75\022\275\023\uff75\024\uff75\025\uff75\026\uff75" +
    "\027\uff75\032\uff75\035\uff75\036\uff75\041\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75" +
    "\054\uff75\055\uff75\075\uff75\077\uff75\101\uff75\103\uff75\110" +
    "\uff75\123\uff75\124\uff75\125\uff75\126\uff75\127\uff75\130\uff75" +
    "\131\uff75\132\uff75\133\uff75\001\002\000\004\074\276\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\126\002\uff73\006\uff73\007\uff73\010" +
    "\uff73\011\uff73\012\uff73\013\uff73\017\uff73\020\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\032\uff73\035\uff73\036" +
    "\uff73\041\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73" +
    "\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73\075\uff73\077" +
    "\uff73\101\uff73\103\uff73\110\uff73\123\uff73\124\uff73\125\uff73" +
    "\126\uff73\127\uff73\130\uff73\131\uff73\132\uff73\133\uff73\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\134\002\uff71\006\uff71\007\uff71\010" +
    "\uff71\011\uff71\012\uff71\013\uff71\015\uff71\016\uff71\017\uff71" +
    "\020\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027" +
    "\uff71\032\uff71\035\uff71\036\uff71\041\uff71\044\uff71\045\uff71" +
    "\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054" +
    "\uff71\055\uff71\075\uff71\077\uff71\101\uff71\103\uff71\110\uff71" +
    "\123\uff71\124\uff71\125\uff71\126\uff71\127\uff71\130\uff71\131" +
    "\uff71\132\uff71\133\uff71\001\002\000\102\006\103\007\070" +
    "\011\100\013\031\017\056\020\072\024\007\025\107\027" +
    "\075\032\021\035\023\036\033\041\130\045\074\046\020" +
    "\047\063\053\113\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\117\132\022\133\112\001\002\000\126\002" +
    "\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74" +
    "\017\uff74\020\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027" +
    "\uff74\032\uff74\035\uff74\036\uff74\041\uff74\044\uff74\045\uff74" +
    "\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054" +
    "\uff74\055\uff74\075\uff74\077\uff74\101\uff74\103\uff74\110\uff74" +
    "\123\uff74\124\uff74\125\uff74\126\uff74\127\uff74\130\uff74\131" +
    "\uff74\132\uff74\133\uff74\001\002\000\010\010\ufff8\012\ufff8" +
    "\110\ufff8\001\002\000\126\002\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\017\ufff6\020\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6\035\ufff6\036" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\075\ufff6\077" +
    "\ufff6\101\ufff6\103\ufff6\110\ufff6\123\ufff6\124\ufff6\125\ufff6" +
    "\126\ufff6\127\ufff6\130\ufff6\131\ufff6\132\ufff6\133\ufff6\001" +
    "\002\000\126\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\017\ufff7\020\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\032\ufff7\035\ufff7\036\ufff7\041\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\075\ufff7\077\ufff7\101\ufff7" +
    "\103\ufff7\110\ufff7\123\ufff7\124\ufff7\125\ufff7\126\ufff7\127" +
    "\ufff7\130\ufff7\131\ufff7\132\ufff7\133\ufff7\001\002\000\010" +
    "\041\uffb3\071\172\072\uffb3\001\002\000\006\030\313\071" +
    "\312\001\002\000\012\030\uff1d\041\uff1d\071\uff1d\072\uff1d" +
    "\001\002\000\040\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\117\132\022\133\112\001\002\000\044\032" +
    "\021\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\022\133\112\001\002\000\006\003\322" +
    "\074\323\001\002\000\010\003\316\071\172\074\317\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\102\006\103\007\070\011\100\013" +
    "\031\017\056\020\072\024\007\025\107\027\075\032\021" +
    "\035\023\036\033\041\130\045\074\046\020\047\063\053" +
    "\113\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\126\002\uff7b\006\uff7b" +
    "\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\017\uff7b\020" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\032\uff7b" +
    "\035\uff7b\036\uff7b\041\uff7b\044\uff7b\045\uff7b\046\uff7b\047" +
    "\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b" +
    "\075\uff7b\077\uff7b\101\uff7b\103\uff7b\110\uff7b\123\uff7b\124" +
    "\uff7b\125\uff7b\126\uff7b\127\uff7b\130\uff7b\131\uff7b\132\uff7b" +
    "\133\uff7b\001\002\000\126\002\uff79\006\uff79\007\uff79\010" +
    "\uff79\011\uff79\012\uff79\013\uff79\017\uff79\020\uff79\023\uff79" +
    "\024\uff79\025\uff79\026\uff79\027\uff79\032\uff79\035\uff79\036" +
    "\uff79\041\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79" +
    "\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\075\uff79\077" +
    "\uff79\101\uff79\103\uff79\110\uff79\123\uff79\124\uff79\125\uff79" +
    "\126\uff79\127\uff79\130\uff79\131\uff79\132\uff79\133\uff79\001" +
    "\002\000\102\006\103\007\070\011\100\013\031\017\056" +
    "\020\072\024\007\025\107\027\075\032\021\035\023\036" +
    "\033\041\130\045\074\046\020\047\063\053\113\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\102\006\103\007\070\011\100\013" +
    "\031\017\056\020\072\024\007\025\107\027\075\032\021" +
    "\035\023\036\033\041\130\045\074\046\020\047\063\053" +
    "\113\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\126\002\uff7a\006\uff7a" +
    "\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\017\uff7a\020" +
    "\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\032\uff7a" +
    "\035\uff7a\036\uff7a\041\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
    "\075\uff7a\077\uff7a\101\uff7a\103\uff7a\110\uff7a\123\uff7a\124" +
    "\uff7a\125\uff7a\126\uff7a\127\uff7a\130\uff7a\131\uff7a\132\uff7a" +
    "\133\uff7a\001\002\000\126\002\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\017\uff78\020\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\032\uff78\035\uff78\036" +
    "\uff78\041\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\075\uff78\077" +
    "\uff78\101\uff78\103\uff78\110\uff78\123\uff78\124\uff78\125\uff78" +
    "\126\uff78\127\uff78\130\uff78\131\uff78\132\uff78\133\uff78\001" +
    "\002\000\012\030\uff1c\041\uff1c\071\uff1c\072\uff1c\001\002" +
    "\000\006\003\330\074\331\001\002\000\102\006\103\007" +
    "\070\011\100\013\031\017\056\020\072\024\007\025\107" +
    "\027\075\032\021\035\023\036\033\041\130\045\074\046" +
    "\020\047\063\053\113\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\102" +
    "\006\103\007\070\011\100\013\031\017\056\020\072\024" +
    "\007\025\107\027\075\032\021\035\023\036\033\041\130" +
    "\045\074\046\020\047\063\053\113\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\130\002\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e" +
    "\012\uff7e\013\uff7e\015\333\017\uff7e\020\uff7e\023\uff7e\024" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\032\uff7e\035\uff7e\036\uff7e" +
    "\041\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\075\uff7e\077\uff7e" +
    "\101\uff7e\103\uff7e\110\uff7e\123\uff7e\124\uff7e\125\uff7e\126" +
    "\uff7e\127\uff7e\130\uff7e\131\uff7e\132\uff7e\133\uff7e\001\002" +
    "\000\004\074\334\001\002\000\102\006\103\007\070\011" +
    "\100\013\031\017\056\020\072\024\007\025\107\027\075" +
    "\032\021\035\023\036\033\041\130\045\074\046\020\047" +
    "\063\053\113\054\054\055\077\075\025\077\010\101\030" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\022\133\112\001\002\000\126\002\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\017" +
    "\uff7d\020\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d" +
    "\032\uff7d\035\uff7d\036\uff7d\041\uff7d\044\uff7d\045\uff7d\046" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d" +
    "\055\uff7d\075\uff7d\077\uff7d\101\uff7d\103\uff7d\110\uff7d\123" +
    "\uff7d\124\uff7d\125\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d" +
    "\132\uff7d\133\uff7d\001\002\000\126\002\uff7c\006\uff7c\007" +
    "\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\017\uff7c\020\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\032\uff7c\035" +
    "\uff7c\036\uff7c\041\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\075" +
    "\uff7c\077\uff7c\101\uff7c\103\uff7c\110\uff7c\123\uff7c\124\uff7c" +
    "\125\uff7c\126\uff7c\127\uff7c\130\uff7c\131\uff7c\132\uff7c\133" +
    "\uff7c\001\002\000\010\030\340\041\uff96\072\uff96\001\002" +
    "\000\042\032\021\054\054\055\077\075\025\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\117\132\022\133\112\001\002\000\010\041" +
    "\uff95\071\342\072\uff95\001\002\000\042\032\021\054\054" +
    "\055\077\075\025\077\010\101\030\103\034\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\022" +
    "\133\112\001\002\000\006\041\uff94\072\uff94\001\002\000" +
    "\040\054\uff58\055\uff58\075\uff58\077\uff58\101\uff58\103\uff58" +
    "\123\uff58\124\uff58\125\uff58\126\uff58\127\uff58\130\uff58\131" +
    "\uff58\132\uff58\133\uff58\001\002\000\040\054\uff47\055\uff47" +
    "\075\uff47\077\uff47\101\uff47\103\uff47\123\uff47\124\uff47\125" +
    "\uff47\126\uff47\127\uff47\130\uff47\131\uff47\132\uff47\133\uff47" +
    "\001\002\000\040\054\uff4b\055\uff4b\075\uff4b\077\uff4b\101" +
    "\uff4b\103\uff4b\123\uff4b\124\uff4b\125\uff4b\126\uff4b\127\uff4b" +
    "\130\uff4b\131\uff4b\132\uff4b\133\uff4b\001\002\000\042\033" +
    "\376\054\uff57\055\uff57\075\uff57\077\uff57\101\uff57\103\uff57" +
    "\123\uff57\124\uff57\125\uff57\126\uff57\127\uff57\130\uff57\131" +
    "\uff57\132\uff57\133\uff57\001\002\000\040\054\uff5d\055\uff5d" +
    "\075\uff5d\077\uff5d\101\uff5d\103\uff5d\123\uff5d\124\uff5d\125" +
    "\uff5d\126\uff5d\127\uff5d\130\uff5d\131\uff5d\132\uff5d\133\uff5d" +
    "\001\002\000\040\054\uff4a\055\uff4a\075\uff4a\077\uff4a\101" +
    "\uff4a\103\uff4a\123\uff4a\124\uff4a\125\uff4a\126\uff4a\127\uff4a" +
    "\130\uff4a\131\uff4a\132\uff4a\133\uff4a\001\002\000\040\054" +
    "\uff45\055\uff45\075\uff45\077\uff45\101\uff45\103\uff45\123\uff45" +
    "\124\uff45\125\uff45\126\uff45\127\uff45\130\uff45\131\uff45\132" +
    "\uff45\133\uff45\001\002\000\040\054\uff59\055\uff59\075\uff59" +
    "\077\uff59\101\uff59\103\uff59\123\uff59\124\uff59\125\uff59\126" +
    "\uff59\127\uff59\130\uff59\131\uff59\132\uff59\133\uff59\001\002" +
    "\000\040\054\uff56\055\uff56\075\uff56\077\uff56\101\uff56\103" +
    "\uff56\123\uff56\124\uff56\125\uff56\126\uff56\127\uff56\130\uff56" +
    "\131\uff56\132\uff56\133\uff56\001\002\000\042\030\375\054" +
    "\uff48\055\uff48\075\uff48\077\uff48\101\uff48\103\uff48\123\uff48" +
    "\124\uff48\125\uff48\126\uff48\127\uff48\130\uff48\131\uff48\132" +
    "\uff48\133\uff48\001\002\000\040\054\uff52\055\uff52\075\uff52" +
    "\077\uff52\101\uff52\103\uff52\123\uff52\124\uff52\125\uff52\126" +
    "\uff52\127\uff52\130\uff52\131\uff52\132\uff52\133\uff52\001\002" +
    "\000\040\054\uff50\055\uff50\075\uff50\077\uff50\101\uff50\103" +
    "\uff50\123\uff50\124\uff50\125\uff50\126\uff50\127\uff50\130\uff50" +
    "\131\uff50\132\uff50\133\uff50\001\002\000\040\054\uff4e\055" +
    "\uff4e\075\uff4e\077\uff4e\101\uff4e\103\uff4e\123\uff4e\124\uff4e" +
    "\125\uff4e\126\uff4e\127\uff4e\130\uff4e\131\uff4e\132\uff4e\133" +
    "\uff4e\001\002\000\040\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\040" +
    "\054\uff53\055\uff53\075\uff53\077\uff53\101\uff53\103\uff53\123" +
    "\uff53\124\uff53\125\uff53\126\uff53\127\uff53\130\uff53\131\uff53" +
    "\132\uff53\133\uff53\001\002\000\040\054\uff49\055\uff49\075" +
    "\uff49\077\uff49\101\uff49\103\uff49\123\uff49\124\uff49\125\uff49" +
    "\126\uff49\127\uff49\130\uff49\131\uff49\132\uff49\133\uff49\001" +
    "\002\000\040\054\uff5b\055\uff5b\075\uff5b\077\uff5b\101\uff5b" +
    "\103\uff5b\123\uff5b\124\uff5b\125\uff5b\126\uff5b\127\uff5b\130" +
    "\uff5b\131\uff5b\132\uff5b\133\uff5b\001\002\000\040\054\uff46" +
    "\055\uff46\075\uff46\077\uff46\101\uff46\103\uff46\123\uff46\124" +
    "\uff46\125\uff46\126\uff46\127\uff46\130\uff46\131\uff46\132\uff46" +
    "\133\uff46\001\002\000\040\054\uff5a\055\uff5a\075\uff5a\077" +
    "\uff5a\101\uff5a\103\uff5a\123\uff5a\124\uff5a\125\uff5a\126\uff5a" +
    "\127\uff5a\130\uff5a\131\uff5a\132\uff5a\133\uff5a\001\002\000" +
    "\040\054\uff51\055\uff51\075\uff51\077\uff51\101\uff51\103\uff51" +
    "\123\uff51\124\uff51\125\uff51\126\uff51\127\uff51\130\uff51\131" +
    "\uff51\132\uff51\133\uff51\001\002\000\040\054\uff5c\055\uff5c" +
    "\075\uff5c\077\uff5c\101\uff5c\103\uff5c\123\uff5c\124\uff5c\125" +
    "\uff5c\126\uff5c\127\uff5c\130\uff5c\131\uff5c\132\uff5c\133\uff5c" +
    "\001\002\000\040\054\uff4f\055\uff4f\075\uff4f\077\uff4f\101" +
    "\uff4f\103\uff4f\123\uff4f\124\uff4f\125\uff4f\126\uff4f\127\uff4f" +
    "\130\uff4f\131\uff4f\132\uff4f\133\uff4f\001\002\000\040\054" +
    "\uff4d\055\uff4d\075\uff4d\077\uff4d\101\uff4d\103\uff4d\123\uff4d" +
    "\124\uff4d\125\uff4d\126\uff4d\127\uff4d\130\uff4d\131\uff4d\132" +
    "\uff4d\133\uff4d\001\002\000\040\054\uff4c\055\uff4c\075\uff4c" +
    "\077\uff4c\101\uff4c\103\uff4c\123\uff4c\124\uff4c\125\uff4c\126" +
    "\uff4c\127\uff4c\130\uff4c\131\uff4c\132\uff4c\133\uff4c\001\002" +
    "\000\134\003\uff5f\004\uff5f\005\uff5f\023\uff5f\026\uff5f\030" +
    "\uff5f\031\uff5f\033\uff5f\034\uff5f\040\uff5f\041\uff5f\042\uff5f" +
    "\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f\063" +
    "\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f" +
    "\072\uff5f\073\uff5f\074\uff5f\076\uff5f\100\uff5f\102\uff5f\104" +
    "\uff5f\105\uff5f\106\uff5f\107\uff5f\111\uff5f\112\uff5f\113\uff5f" +
    "\114\uff5f\115\uff5f\116\uff5f\117\uff5f\120\uff5f\121\uff5f\122" +
    "\uff5f\001\002\000\040\054\uff54\055\uff54\075\uff54\077\uff54" +
    "\101\uff54\103\uff54\123\uff54\124\uff54\125\uff54\126\uff54\127" +
    "\uff54\130\uff54\131\uff54\132\uff54\133\uff54\001\002\000\040" +
    "\054\uff55\055\uff55\075\uff55\077\uff55\101\uff55\103\uff55\123" +
    "\uff55\124\uff55\125\uff55\126\uff55\127\uff55\130\uff55\131\uff55" +
    "\132\uff55\133\uff55\001\002\000\042\032\uffc2\054\uffc2\055" +
    "\uffc2\075\uffc2\077\uffc2\101\uffc2\103\uffc2\123\uffc2\124\uffc2" +
    "\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2\132\uffc2\133" +
    "\uffc2\001\002\000\042\032\uffc7\054\uffc7\055\uffc7\075\uffc7" +
    "\077\uffc7\101\uffc7\103\uffc7\123\uffc7\124\uffc7\125\uffc7\126" +
    "\uffc7\127\uffc7\130\uffc7\131\uffc7\132\uffc7\133\uffc7\001\002" +
    "\000\042\032\uffc8\054\uffc8\055\uffc8\075\uffc8\077\uffc8\101" +
    "\uffc8\103\uffc8\123\uffc8\124\uffc8\125\uffc8\126\uffc8\127\uffc8" +
    "\130\uffc8\131\uffc8\132\uffc8\133\uffc8\001\002\000\042\032" +
    "\uffc5\054\uffc5\055\uffc5\075\uffc5\077\uffc5\101\uffc5\103\uffc5" +
    "\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5\131" +
    "\uffc5\132\uffc5\133\uffc5\001\002\000\042\032\uffca\054\uffca" +
    "\055\uffca\075\uffca\077\uffca\101\uffca\103\uffca\123\uffca\124" +
    "\uffca\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\132\uffca" +
    "\133\uffca\001\002\000\042\032\uffc9\054\uffc9\055\uffc9\075" +
    "\uffc9\077\uffc9\101\uffc9\103\uffc9\123\uffc9\124\uffc9\125\uffc9" +
    "\126\uffc9\127\uffc9\130\uffc9\131\uffc9\132\uffc9\133\uffc9\001" +
    "\002\000\042\032\uffc4\054\uffc4\055\uffc4\075\uffc4\077\uffc4" +
    "\101\uffc4\103\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127" +
    "\uffc4\130\uffc4\131\uffc4\132\uffc4\133\uffc4\001\002\000\042" +
    "\032\uffc1\054\uffc1\055\uffc1\075\uffc1\077\uffc1\101\uffc1\103" +
    "\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1" +
    "\131\uffc1\132\uffc1\133\uffc1\001\002\000\042\032\021\054" +
    "\054\055\077\075\025\077\010\101\030\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\022\133\112\001\002\000\042\032\021\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\006\041\uffcb\072\uffcb\001\002\000\042\032" +
    "\uffc3\054\uffc3\055\uffc3\075\uffc3\077\uffc3\101\uffc3\103\uffc3" +
    "\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\131" +
    "\uffc3\132\uffc3\133\uffc3\001\002\000\042\032\uffc6\054\uffc6" +
    "\055\uffc6\075\uffc6\077\uffc6\101\uffc6\103\uffc6\123\uffc6\124" +
    "\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6" +
    "\133\uffc6\001\002\000\010\041\uffcc\071\172\072\uffcc\001" +
    "\002\000\012\041\uff62\071\172\072\uff62\073\u0107\001\002" +
    "\000\006\041\uff63\072\uff63\001\002\000\006\074\u0110\101" +
    "\u0111\001\002\000\102\006\103\007\070\011\100\013\031" +
    "\017\056\020\072\024\007\025\107\027\075\032\021\035" +
    "\023\036\033\041\130\045\074\046\020\047\063\053\113" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\117" +
    "\132\022\133\112\001\002\000\044\032\021\054\054\055" +
    "\077\075\025\077\010\101\030\102\u0112\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\022\133\112\001\002\000\004\074\u0117\001\002\000\006" +
    "\071\172\102\u0114\001\002\000\004\074\u0115\001\002\000" +
    "\102\006\103\007\070\011\100\013\031\017\056\020\072" +
    "\024\007\025\107\027\075\032\021\035\023\036\033\041" +
    "\130\045\074\046\020\047\063\053\113\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\126\002\ufefe\006\ufefe\007\ufefe\010\ufefe\011" +
    "\ufefe\012\ufefe\013\ufefe\017\ufefe\020\ufefe\023\ufefe\024\ufefe" +
    "\025\ufefe\026\ufefe\027\ufefe\032\ufefe\035\ufefe\036\ufefe\041" +
    "\ufefe\044\ufefe\045\ufefe\046\ufefe\047\ufefe\050\ufefe\051\ufefe" +
    "\052\ufefe\053\ufefe\054\ufefe\055\ufefe\075\ufefe\077\ufefe\101" +
    "\ufefe\103\ufefe\110\ufefe\123\ufefe\124\ufefe\125\ufefe\126\ufefe" +
    "\127\ufefe\130\ufefe\131\ufefe\132\ufefe\133\ufefe\001\002\000" +
    "\102\006\103\007\070\011\100\013\031\017\056\020\072" +
    "\024\007\025\107\027\075\032\021\035\023\036\033\041" +
    "\130\045\074\046\020\047\063\053\113\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\126\002\ufeff\006\ufeff\007\ufeff\010\ufeff\011" +
    "\ufeff\012\ufeff\013\ufeff\017\ufeff\020\ufeff\023\ufeff\024\ufeff" +
    "\025\ufeff\026\ufeff\027\ufeff\032\ufeff\035\ufeff\036\ufeff\041" +
    "\ufeff\044\ufeff\045\ufeff\046\ufeff\047\ufeff\050\ufeff\051\ufeff" +
    "\052\ufeff\053\ufeff\054\ufeff\055\ufeff\075\ufeff\077\ufeff\101" +
    "\ufeff\103\ufeff\110\ufeff\123\ufeff\124\ufeff\125\ufeff\126\ufeff" +
    "\127\ufeff\130\ufeff\131\ufeff\132\ufeff\133\ufeff\001\002\000" +
    "\126\002\uff00\006\uff00\007\uff00\010\uff00\011\uff00\012\uff00" +
    "\013\uff00\017\uff00\020\uff00\023\uff00\024\uff00\025\uff00\026" +
    "\uff00\027\uff00\032\uff00\035\uff00\036\uff00\041\uff00\044\uff00" +
    "\045\uff00\046\uff00\047\uff00\050\uff00\051\uff00\052\uff00\053" +
    "\uff00\054\uff00\055\uff00\075\uff00\077\uff00\101\uff00\103\uff00" +
    "\110\uff00\123\uff00\124\uff00\125\uff00\126\uff00\127\uff00\130" +
    "\uff00\131\uff00\132\uff00\133\uff00\001\002\000\134\003\uff43" +
    "\004\uff43\005\uff43\023\uff43\026\uff43\030\uff43\031\uff43\033" +
    "\uff43\034\uff43\040\uff43\041\uff43\042\uff43\054\uff43\055\uff43" +
    "\056\uff43\057\uff43\060\uff43\061\uff43\063\uff43\064\uff43\065" +
    "\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43" +
    "\074\uff43\076\uff43\100\uff43\102\uff43\104\uff43\105\uff43\106" +
    "\uff43\107\uff43\111\uff43\112\uff43\113\uff43\114\uff43\115\uff43" +
    "\116\uff43\117\uff43\120\uff43\121\uff43\122\uff43\001\002\000" +
    "\050\032\021\037\u0159\054\054\055\077\074\u015a\075\025" +
    "\076\u0158\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\050\032\021\042\u013b\054\054\055\077\056" +
    "\u013c\075\025\077\010\101\030\102\u0138\103\034\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\022\133\112\001\002\000\004\132\u011e\001\002\000\140" +
    "\003\uff15\004\uff15\005\uff15\023\uff15\026\uff15\030\uff15\031" +
    "\uff15\033\uff15\034\uff15\040\uff15\041\uff15\042\uff15\054\uff15" +
    "\055\uff15\056\uff15\057\uff15\060\uff15\061\uff15\063\uff15\064" +
    "\uff15\065\uff15\066\uff15\067\uff15\070\uff15\071\uff15\072\uff15" +
    "\073\uff15\074\uff15\075\u011f\076\uff15\100\uff15\101\u0120\102" +
    "\uff15\104\uff15\105\uff15\106\uff15\107\uff15\111\uff15\112\uff15" +
    "\113\uff15\114\uff15\115\uff15\116\uff15\117\uff15\120\uff15\121" +
    "\uff15\122\uff15\001\002\000\042\054\054\055\077\075\025" +
    "\076\u0135\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\030\101\u0127\102\u0126\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\u0128\133\u0125" +
    "\001\002\000\012\071\uffe9\073\u0133\074\uffe9\102\uffe9\001" +
    "\002\000\012\071\uffe6\073\uffe6\074\uffe6\102\uffe6\001\002" +
    "\000\010\071\uffea\074\uffea\102\uffea\001\002\000\006\071" +
    "\u0130\102\u0131\001\002\000\012\071\uffe5\073\uffe5\074\uffe5" +
    "\102\uffe5\001\002\000\134\003\uff14\004\uff14\005\uff14\023" +
    "\uff14\026\uff14\030\uff14\031\uff14\033\uff14\034\uff14\040\uff14" +
    "\041\uff14\042\uff14\054\uff14\055\uff14\056\uff14\057\uff14\060" +
    "\uff14\061\uff14\063\uff14\064\uff14\065\uff14\066\uff14\067\uff14" +
    "\070\uff14\071\uff14\072\uff14\073\uff14\074\uff14\076\uff14\100" +
    "\uff14\102\uff14\104\uff14\105\uff14\106\uff14\107\uff14\111\uff14" +
    "\112\uff14\113\uff14\114\uff14\115\uff14\116\uff14\117\uff14\120" +
    "\uff14\121\uff14\122\uff14\001\002\000\026\101\u0127\123\060" +
    "\124\061\125\012\126\024\127\073\130\041\131\117\132" +
    "\u0128\133\u0125\001\002\000\014\062\u0129\071\uffe7\073\uffe7" +
    "\074\uffe7\102\uffe7\001\002\000\004\132\u012a\001\002\000" +
    "\012\071\uffe3\073\uffe3\074\uffe3\102\uffe3\001\002\000\006" +
    "\071\uffe1\102\uffe1\001\002\000\006\071\u012d\102\u012e\001" +
    "\002\000\026\101\u0127\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\117\132\u0128\133\u0125\001\002\000" +
    "\012\071\uffe4\073\uffe4\074\uffe4\102\uffe4\001\002\000\006" +
    "\071\uffe2\102\uffe2\001\002\000\026\101\u0127\123\060\124" +
    "\061\125\012\126\024\127\073\130\041\131\117\132\u0128" +
    "\133\u0125\001\002\000\134\003\uff13\004\uff13\005\uff13\023" +
    "\uff13\026\uff13\030\uff13\031\uff13\033\uff13\034\uff13\040\uff13" +
    "\041\uff13\042\uff13\054\uff13\055\uff13\056\uff13\057\uff13\060" +
    "\uff13\061\uff13\063\uff13\064\uff13\065\uff13\066\uff13\067\uff13" +
    "\070\uff13\071\uff13\072\uff13\073\uff13\074\uff13\076\uff13\100" +
    "\uff13\102\uff13\104\uff13\105\uff13\106\uff13\107\uff13\111\uff13" +
    "\112\uff13\113\uff13\114\uff13\115\uff13\116\uff13\117\uff13\120" +
    "\uff13\121\uff13\122\uff13\001\002\000\010\071\uffeb\074\uffeb" +
    "\102\uffeb\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\010\071\uffe8\074\uffe8\102\uffe8\001\002\000\134" +
    "\003\uff12\004\uff12\005\uff12\023\uff12\026\uff12\030\uff12\031" +
    "\uff12\033\uff12\034\uff12\040\uff12\041\uff12\042\uff12\054\uff12" +
    "\055\uff12\056\uff12\057\uff12\060\uff12\061\uff12\063\uff12\064" +
    "\uff12\065\uff12\066\uff12\067\uff12\070\uff12\071\uff12\072\uff12" +
    "\073\uff12\074\uff12\076\uff12\100\uff12\102\uff12\104\uff12\105" +
    "\uff12\106\uff12\107\uff12\111\uff12\112\uff12\113\uff12\114\uff12" +
    "\115\uff12\116\uff12\117\uff12\120\uff12\121\uff12\122\uff12\001" +
    "\002\000\004\076\u0137\001\002\000\134\003\uff11\004\uff11" +
    "\005\uff11\023\uff11\026\uff11\030\uff11\031\uff11\033\uff11\034" +
    "\uff11\040\uff11\041\uff11\042\uff11\054\uff11\055\uff11\056\uff11" +
    "\057\uff11\060\uff11\061\uff11\063\uff11\064\uff11\065\uff11\066" +
    "\uff11\067\uff11\070\uff11\071\uff11\072\uff11\073\uff11\074\uff11" +
    "\076\uff11\100\uff11\102\uff11\104\uff11\105\uff11\106\uff11\107" +
    "\uff11\111\uff11\112\uff11\113\uff11\114\uff11\115\uff11\116\uff11" +
    "\117\uff11\120\uff11\121\uff11\122\uff11\001\002\000\134\003" +
    "\uff19\004\uff19\005\uff19\023\uff19\026\uff19\030\uff19\031\uff19" +
    "\033\uff19\034\uff19\040\uff19\041\uff19\042\uff19\054\uff19\055" +
    "\uff19\056\uff19\057\uff19\060\uff19\061\uff19\063\uff19\064\uff19" +
    "\065\uff19\066\uff19\067\uff19\070\uff19\071\uff19\072\uff19\073" +
    "\uff19\074\uff19\076\uff19\100\uff19\102\uff19\104\uff19\105\uff19" +
    "\106\uff19\107\uff19\111\uff19\112\uff19\113\uff19\114\uff19\115" +
    "\uff19\116\uff19\117\uff19\120\uff19\121\uff19\122\uff19\001\002" +
    "\000\004\102\u0157\001\002\000\006\071\u0153\102\ufefd\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\042" +
    "\032\021\054\054\055\077\075\025\077\010\101\030\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\117\132\022\133\112\001\002\000\014\023\u013f\042" +
    "\ufef3\071\ufef3\073\u0140\102\ufef3\001\002\000\010\042\ufef2" +
    "\071\ufef2\102\ufef2\001\002\000\040\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\042\032\021\054\054\055\077\075\025\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\010" +
    "\042\ufef1\071\ufef1\102\ufef1\001\002\000\006\030\u0143\071" +
    "\312\001\002\000\042\032\021\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\117\132\022\133\112\001\002" +
    "\000\014\023\u013f\026\u0148\042\ufee7\071\ufee7\102\ufee7\001" +
    "\002\000\010\042\ufee6\071\ufee6\102\ufee6\001\002\000\010" +
    "\042\ufee9\071\ufee9\102\ufee9\001\002\000\010\042\ufee8\071" +
    "\ufee8\102\ufee8\001\002\000\042\032\021\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\014\023\u013f\026\u0148\042\ufee5\071\ufee5\102" +
    "\ufee5\001\002\000\010\042\ufee4\071\ufee4\102\ufee4\001\002" +
    "\000\006\071\u014c\102\ufefb\001\002\000\046\032\021\042" +
    "\u0151\054\054\055\077\075\025\077\010\101\030\102\ufef4" +
    "\103\034\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\022\133\112\001\002\000\006\042\u014e" +
    "\102\ufefa\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\004\102\ufef8\001\002\000\010\042\ufef6\071\u0153" +
    "\102\ufef6\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\004\102\ufef9\001\002\000\046\032\021\042\ufef4" +
    "\054\054\055\077\075\025\077\010\101\030\102\ufef4\103" +
    "\034\123\060\124\061\125\012\126\024\127\073\130\041" +
    "\131\117\132\022\133\112\001\002\000\006\042\ufef5\102" +
    "\ufef5\001\002\000\004\102\ufef7\001\002\000\004\102\ufefc" +
    "\001\002\000\134\003\uff18\004\uff18\005\uff18\023\uff18\026" +
    "\uff18\030\uff18\031\uff18\033\uff18\034\uff18\040\uff18\041\uff18" +
    "\042\uff18\054\uff18\055\uff18\056\uff18\057\uff18\060\uff18\061" +
    "\uff18\063\uff18\064\uff18\065\uff18\066\uff18\067\uff18\070\uff18" +
    "\071\uff18\072\uff18\073\uff18\074\uff18\076\uff18\100\uff18\102" +
    "\uff18\104\uff18\105\uff18\106\uff18\107\uff18\111\uff18\112\uff18" +
    "\113\uff18\114\uff18\115\uff18\116\uff18\117\uff18\120\uff18\121" +
    "\uff18\122\uff18\001\002\000\134\003\uff17\004\uff17\005\uff17" +
    "\023\uff17\026\uff17\030\uff17\031\uff17\033\uff17\034\uff17\040" +
    "\uff17\041\uff17\042\uff17\054\uff17\055\uff17\056\uff17\057\uff17" +
    "\060\uff17\061\uff17\063\uff17\064\uff17\065\uff17\066\uff17\067" +
    "\uff17\070\uff17\071\uff17\072\uff17\073\uff17\074\uff17\076\uff17" +
    "\100\uff17\102\uff17\104\uff17\105\uff17\106\uff17\107\uff17\111" +
    "\uff17\112\uff17\113\uff17\114\uff17\115\uff17\116\uff17\117\uff17" +
    "\120\uff17\121\uff17\122\uff17\001\002\000\006\071\uff0c\076" +
    "\uff0c\001\002\000\050\032\021\054\054\055\077\071\uff0a" +
    "\074\u0160\075\025\076\uff0a\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\117" +
    "\132\022\133\112\001\002\000\006\071\u0165\076\uff10\001" +
    "\002\000\010\071\uff0b\074\u015f\076\uff0b\001\002\000\004" +
    "\076\u015e\001\002\000\134\003\uff16\004\uff16\005\uff16\023" +
    "\uff16\026\uff16\030\uff16\031\uff16\033\uff16\034\uff16\040\uff16" +
    "\041\uff16\042\uff16\054\uff16\055\uff16\056\uff16\057\uff16\060" +
    "\uff16\061\uff16\063\uff16\064\uff16\065\uff16\066\uff16\067\uff16" +
    "\070\uff16\071\uff16\072\uff16\073\uff16\074\uff16\076\uff16\100" +
    "\uff16\102\uff16\104\uff16\105\uff16\106\uff16\107\uff16\111\uff16" +
    "\112\uff16\113\uff16\114\uff16\115\uff16\116\uff16\117\uff16\120" +
    "\uff16\121\uff16\122\uff16\001\002\000\050\032\021\054\054" +
    "\055\077\071\uff09\074\u0160\075\025\076\uff09\077\010\101" +
    "\030\103\034\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\117\132\022\133\112\001\002\000\046\032" +
    "\021\054\054\055\077\071\uff02\075\025\076\uff02\077\010" +
    "\101\030\103\034\123\060\124\061\125\012\126\024\127" +
    "\073\130\041\131\117\132\022\133\112\001\002\000\006" +
    "\071\uff06\076\uff06\001\002\000\010\071\uff08\074\u0160\076" +
    "\uff08\001\002\000\006\071\uff07\076\uff07\001\002\000\006" +
    "\071\uff01\076\uff01\001\002\000\046\032\021\037\u0159\054" +
    "\054\055\077\074\u015a\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\006\071\u0167\076\uff0f" +
    "\001\002\000\046\032\021\037\u0159\054\054\055\077\074" +
    "\u015a\075\025\077\010\101\030\103\034\123\060\124\061" +
    "\125\012\126\024\127\073\130\041\131\117\132\022\133" +
    "\112\001\002\000\006\071\uff0d\076\uff0d\001\002\000\006" +
    "\071\uff0e\076\uff0e\001\002\000\006\071\uff03\076\uff03\001" +
    "\002\000\010\071\uff05\074\u0160\076\uff05\001\002\000\006" +
    "\071\uff04\076\uff04\001\002\000\004\101\u016f\001\002\000" +
    "\004\074\u0183\001\002\000\034\042\u0172\056\u0174\101\u0127" +
    "\102\u0171\123\060\124\061\125\012\126\024\127\073\130" +
    "\041\131\117\132\u0128\133\u0125\001\002\000\004\102\u0182" +
    "\001\002\000\004\074\ufff4\001\002\000\004\132\u0181\001" +
    "\002\000\010\071\u0179\074\ufff2\102\ufff2\001\002\000\004" +
    "\132\u0175\001\002\000\010\071\u0176\074\uffee\102\uffee\001" +
    "\002\000\004\042\u0177\001\002\000\004\132\u0178\001\002" +
    "\000\006\074\uffed\102\uffed\001\002\000\032\042\u017b\056" +
    "\u017a\101\u0127\123\060\124\061\125\012\126\024\127\073" +
    "\130\041\131\117\132\u0128\133\u0125\001\002\000\004\132" +
    "\u017d\001\002\000\004\132\u017c\001\002\000\006\074\ufff0" +
    "\102\ufff0\001\002\000\010\071\u017e\074\ufff1\102\ufff1\001" +
    "\002\000\004\042\u017f\001\002\000\004\132\u0180\001\002" +
    "\000\006\074\uffef\102\uffef\001\002\000\006\074\uffec\102" +
    "\uffec\001\002\000\004\074\ufff3\001\002\000\102\006\103" +
    "\007\070\011\100\013\031\017\056\020\072\024\007\025" +
    "\107\027\075\032\021\035\023\036\033\041\130\045\074" +
    "\046\020\047\063\053\113\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\117\132\022\133\112\001\002\000" +
    "\126\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\017\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\032\ufff5\035\ufff5\036\ufff5\041\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\075\ufff5\077\ufff5\101\ufff5\103\ufff5" +
    "\110\ufff5\123\ufff5\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130" +
    "\ufff5\131\ufff5\132\ufff5\133\ufff5\001\002\000\014\003\uff26" +
    "\041\uff26\071\172\072\uff26\102\uff26\001\002\000\010\041" +
    "\uffb9\071\312\072\uffb9\001\002\000\142\003\uff3e\004\uff3e" +
    "\005\uff3e\023\uff3e\026\uff3e\030\uff3e\031\uff3e\033\uff3e\034" +
    "\uff3e\040\uff3e\041\uff3e\042\uff3e\054\uff3e\055\uff3e\056\uff3e" +
    "\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e\064\uff3e\065" +
    "\uff3e\066\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e\073\uff3e" +
    "\074\uff3e\075\uff3e\076\uff3e\100\uff3e\101\uff3e\102\uff3e\104" +
    "\uff3e\105\uff3e\106\uff3e\107\uff3e\111\uff3e\112\uff3e\113\uff3e" +
    "\114\uff3e\115\uff3e\116\uff3e\117\uff3e\120\uff3e\121\uff3e\122" +
    "\uff3e\001\002\000\006\003\u019d\102\u019c\001\002\000\142" +
    "\003\uff37\004\uff37\005\uff37\023\uff37\026\uff37\030\uff37\031" +
    "\uff37\033\uff37\034\uff37\040\uff37\041\uff37\042\uff37\054\uff37" +
    "\055\uff37\056\uff37\057\uff37\060\uff37\061\uff37\062\uff37\063" +
    "\uff37\064\uff37\065\uff37\066\uff37\067\uff37\070\uff37\071\uff37" +
    "\072\uff37\073\uff37\074\uff37\075\uff37\076\uff37\100\uff37\101" +
    "\uff37\102\uff37\104\uff37\105\uff37\106\uff37\107\uff37\111\uff37" +
    "\112\uff37\113\uff37\114\uff37\115\uff37\116\uff37\117\uff37\120" +
    "\uff37\121\uff37\122\uff37\001\002\000\012\003\uff1e\023\u0190" +
    "\071\uff1e\102\uff1e\001\002\000\006\003\u018e\102\u018d\001" +
    "\002\000\010\003\uff21\071\172\102\uff21\001\002\000\142" +
    "\003\uff3c\004\uff3c\005\uff3c\023\uff3c\026\uff3c\030\uff3c\031" +
    "\uff3c\033\uff3c\034\uff3c\040\uff3c\041\uff3c\042\uff3c\054\uff3c" +
    "\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c\063" +
    "\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c" +
    "\072\uff3c\073\uff3c\074\uff3c\075\uff3c\076\uff3c\100\uff3c\101" +
    "\uff3c\102\uff3c\104\uff3c\105\uff3c\106\uff3c\107\uff3c\111\uff3c" +
    "\112\uff3c\113\uff3c\114\uff3c\115\uff3c\116\uff3c\117\uff3c\120" +
    "\uff3c\121\uff3c\122\uff3c\001\002\000\142\003\uff35\004\uff35" +
    "\005\uff35\023\uff35\026\uff35\030\uff35\031\uff35\033\uff35\034" +
    "\uff35\040\uff35\041\uff35\042\uff35\054\uff35\055\uff35\056\uff35" +
    "\057\uff35\060\uff35\061\uff35\062\uff35\063\uff35\064\uff35\065" +
    "\uff35\066\uff35\067\uff35\070\uff35\071\uff35\072\uff35\073\uff35" +
    "\074\uff35\075\uff35\076\uff35\100\uff35\101\uff35\102\uff35\104" +
    "\uff35\105\uff35\106\uff35\107\uff35\111\uff35\112\uff35\113\uff35" +
    "\114\uff35\115\uff35\116\uff35\117\uff35\120\uff35\121\uff35\122" +
    "\uff35\001\002\000\006\003\uff20\102\uff20\001\002\000\040" +
    "\054\054\055\077\075\025\077\010\101\030\103\034\123" +
    "\060\124\061\125\012\126\024\127\073\130\041\131\117" +
    "\132\022\133\112\001\002\000\006\030\u0192\071\312\001" +
    "\002\000\044\032\021\053\113\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\117\132\022\133\112\001\002" +
    "\000\016\003\ufeee\023\u0190\026\u0198\071\172\076\ufeee\102" +
    "\ufeee\001\002\000\006\023\u0190\026\u0198\001\002\000\010" +
    "\003\ufef0\076\ufef0\102\ufef0\001\002\000\010\003\ufeef\076" +
    "\ufeef\102\ufeef\001\002\000\010\003\ufeec\076\ufeec\102\ufeec" +
    "\001\002\000\042\032\021\054\054\055\077\075\025\077" +
    "\010\101\030\103\034\123\060\124\061\125\012\126\024" +
    "\127\073\130\041\131\117\132\022\133\112\001\002\000" +
    "\014\003\ufeeb\023\u0190\026\u0198\076\ufeeb\102\ufeeb\001\002" +
    "\000\010\003\ufeea\076\ufeea\102\ufeea\001\002\000\010\003" +
    "\ufeed\076\ufeed\102\ufeed\001\002\000\142\003\uff3b\004\uff3b" +
    "\005\uff3b\023\uff3b\026\uff3b\030\uff3b\031\uff3b\033\uff3b\034" +
    "\uff3b\040\uff3b\041\uff3b\042\uff3b\054\uff3b\055\uff3b\056\uff3b" +
    "\057\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065" +
    "\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b\072\uff3b\073\uff3b" +
    "\074\uff3b\075\uff3b\076\uff3b\100\uff3b\101\uff3b\102\uff3b\104" +
    "\uff3b\105\uff3b\106\uff3b\107\uff3b\111\uff3b\112\uff3b\113\uff3b" +
    "\114\uff3b\115\uff3b\116\uff3b\117\uff3b\120\uff3b\121\uff3b\122" +
    "\uff3b\001\002\000\142\003\uff34\004\uff34\005\uff34\023\uff34" +
    "\026\uff34\030\uff34\031\uff34\033\uff34\034\uff34\040\uff34\041" +
    "\uff34\042\uff34\054\uff34\055\uff34\056\uff34\057\uff34\060\uff34" +
    "\061\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067" +
    "\uff34\070\uff34\071\uff34\072\uff34\073\uff34\074\uff34\075\uff34" +
    "\076\uff34\100\uff34\101\uff34\102\uff34\104\uff34\105\uff34\106" +
    "\uff34\107\uff34\111\uff34\112\uff34\113\uff34\114\uff34\115\uff34" +
    "\116\uff34\117\uff34\120\uff34\121\uff34\122\uff34\001\002\000" +
    "\004\076\u01a4\001\002\000\142\003\uff33\004\uff33\005\uff33" +
    "\023\uff33\026\uff33\030\uff33\031\uff33\033\uff33\034\uff33\040" +
    "\uff33\041\uff33\042\uff33\054\uff33\055\uff33\056\uff33\057\uff33" +
    "\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33\065\uff33\066" +
    "\uff33\067\uff33\070\uff33\071\uff33\072\uff33\073\uff33\074\uff33" +
    "\075\uff33\076\uff33\100\uff33\101\uff33\102\uff33\104\uff33\105" +
    "\uff33\106\uff33\107\uff33\111\uff33\112\uff33\113\uff33\114\uff33" +
    "\115\uff33\116\uff33\117\uff33\120\uff33\121\uff33\122\uff33\001" +
    "\002\000\010\023\u0190\071\uff1e\076\uff1e\001\002\000\006" +
    "\071\172\076\u01a2\001\002\000\142\003\uff3a\004\uff3a\005" +
    "\uff3a\023\uff3a\026\uff3a\030\uff3a\031\uff3a\033\uff3a\034\uff3a" +
    "\040\uff3a\041\uff3a\042\uff3a\054\uff3a\055\uff3a\056\uff3a\057" +
    "\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a" +
    "\066\uff3a\067\uff3a\070\uff3a\071\uff3a\072\uff3a\073\uff3a\074" +
    "\uff3a\075\uff3a\076\uff3a\100\uff3a\101\uff3a\102\uff3a\104\uff3a" +
    "\105\uff3a\106\uff3a\107\uff3a\111\uff3a\112\uff3a\113\uff3a\114" +
    "\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\121\uff3a\122\uff3a" +
    "\001\002\000\004\076\uff25\001\002\000\142\003\uff39\004" +
    "\uff39\005\uff39\023\uff39\026\uff39\030\uff39\031\uff39\033\uff39" +
    "\034\uff39\040\uff39\041\uff39\042\uff39\054\uff39\055\uff39\056" +
    "\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39" +
    "\065\uff39\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073" +
    "\uff39\074\uff39\075\uff39\076\uff39\100\uff39\101\uff39\102\uff39" +
    "\104\uff39\105\uff39\106\uff39\107\uff39\111\uff39\112\uff39\113" +
    "\uff39\114\uff39\115\uff39\116\uff39\117\uff39\120\uff39\121\uff39" +
    "\122\uff39\001\002\000\004\074\u01a8\001\002\000\042\032" +
    "\021\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\060\003\uff1b\005\uff1b" +
    "\023\uff1b\026\uff1b\041\uff1b\042\uff1b\071\uff1b\072\uff1b\073" +
    "\uff1b\074\uff1b\076\uff1b\100\uff1b\102\uff1b\111\uff1b\112\uff1b" +
    "\113\uff1b\114\uff1b\115\uff1b\116\uff1b\117\uff1b\120\uff1b\121" +
    "\uff1b\122\uff1b\001\002\000\042\032\021\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\060\003\uff1a\005\uff1a\023\uff1a\026\uff1a\041" +
    "\uff1a\042\uff1a\071\uff1a\072\uff1a\073\uff1a\074\uff1a\076\uff1a" +
    "\100\uff1a\102\uff1a\111\uff1a\112\uff1a\113\uff1a\114\uff1a\115" +
    "\uff1a\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122\uff1a\001\002" +
    "\000\010\041\uffb2\071\u01ab\072\uffb2\001\002\000\042\032" +
    "\021\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\010\041\uffb1\071\u01ad" +
    "\072\uffb1\001\002\000\042\032\021\054\054\055\077\075" +
    "\025\077\010\101\030\103\034\123\060\124\061\125\012" +
    "\126\024\127\073\130\041\131\117\132\022\133\112\001" +
    "\002\000\006\041\uffb0\072\uffb0\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\ufffe\001\002\000\142\003\uff3d\004" +
    "\uff3d\005\uff3d\023\uff3d\026\uff3d\030\uff3d\031\uff3d\033\uff3d" +
    "\034\uff3d\040\uff3d\041\uff3d\042\uff3d\054\uff3d\055\uff3d\056" +
    "\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d\064\uff3d" +
    "\065\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\073" +
    "\uff3d\074\uff3d\075\uff3d\076\uff3d\100\uff3d\101\uff3d\102\uff3d" +
    "\104\uff3d\105\uff3d\106\uff3d\107\uff3d\111\uff3d\112\uff3d\113" +
    "\uff3d\114\uff3d\115\uff3d\116\uff3d\117\uff3d\120\uff3d\121\uff3d" +
    "\122\uff3d\001\002\000\010\003\u01b8\071\u01b7\100\u01b9\001" +
    "\002\000\142\003\uff36\004\uff36\005\uff36\023\uff36\026\uff36" +
    "\030\uff36\031\uff36\033\uff36\034\uff36\040\uff36\041\uff36\042" +
    "\uff36\054\uff36\055\uff36\056\uff36\057\uff36\060\uff36\061\uff36" +
    "\062\uff36\063\uff36\064\uff36\065\uff36\066\uff36\067\uff36\070" +
    "\uff36\071\uff36\072\uff36\073\uff36\074\uff36\075\uff36\076\uff36" +
    "\100\uff36\101\uff36\102\uff36\104\uff36\105\uff36\106\uff36\107" +
    "\uff36\111\uff36\112\uff36\113\uff36\114\uff36\115\uff36\116\uff36" +
    "\117\uff36\120\uff36\121\uff36\122\uff36\001\002\000\004\074" +
    "\u01b5\001\002\000\042\032\021\054\054\055\077\075\025" +
    "\077\010\101\030\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\117\132\022\133\112\001\002" +
    "\000\010\003\uff23\071\uff23\100\uff23\001\002\000\042\032" +
    "\021\054\054\055\077\075\025\077\010\101\030\103\034" +
    "\123\060\124\061\125\012\126\024\127\073\130\041\131" +
    "\117\132\022\133\112\001\002\000\142\003\uff32\004\uff32" +
    "\005\uff32\023\uff32\026\uff32\030\uff32\031\uff32\033\uff32\034" +
    "\uff32\040\uff32\041\uff32\042\uff32\054\uff32\055\uff32\056\uff32" +
    "\057\uff32\060\uff32\061\uff32\062\uff32\063\uff32\064\uff32\065" +
    "\uff32\066\uff32\067\uff32\070\uff32\071\uff32\072\uff32\073\uff32" +
    "\074\uff32\075\uff32\076\uff32\100\uff32\101\uff32\102\uff32\104" +
    "\uff32\105\uff32\106\uff32\107\uff32\111\uff32\112\uff32\113\uff32" +
    "\114\uff32\115\uff32\116\uff32\117\uff32\120\uff32\121\uff32\122" +
    "\uff32\001\002\000\142\003\uff38\004\uff38\005\uff38\023\uff38" +
    "\026\uff38\030\uff38\031\uff38\033\uff38\034\uff38\040\uff38\041" +
    "\uff38\042\uff38\054\uff38\055\uff38\056\uff38\057\uff38\060\uff38" +
    "\061\uff38\062\uff38\063\uff38\064\uff38\065\uff38\066\uff38\067" +
    "\uff38\070\uff38\071\uff38\072\uff38\073\uff38\074\uff38\075\uff38" +
    "\076\uff38\100\uff38\101\uff38\102\uff38\104\uff38\105\uff38\106" +
    "\uff38\107\uff38\111\uff38\112\uff38\113\uff38\114\uff38\115\uff38" +
    "\116\uff38\117\uff38\120\uff38\121\uff38\122\uff38\001\002\000" +
    "\004\074\u01bb\001\002\000\042\032\021\054\054\055\077" +
    "\075\025\077\010\101\030\103\034\123\060\124\061\125" +
    "\012\126\024\127\073\130\041\131\117\132\022\133\112" +
    "\001\002\000\010\003\uff22\071\uff22\100\uff22\001\002\000" +
    "\004\027\u01d6\001\002\000\006\062\u01cd\132\uff9a\001\002" +
    "\000\004\132\235\001\002\000\004\027\u01c1\001\002\000" +
    "\010\056\u01c2\101\u01c4\132\u01c5\001\002\000\006\041\uffab" +
    "\072\uffab\001\002\000\012\041\uff9e\071\u01cb\072\uff9e\102" +
    "\uff9e\001\002\000\004\132\u01c5\001\002\000\014\005\u01c7" +
    "\041\uff9c\071\uff9c\072\uff9c\102\uff9c\001\002\000\006\041" +
    "\uffa9\072\uffa9\001\002\000\004\132\u01c8\001\002\000\012" +
    "\041\uff9d\071\uff9d\072\uff9d\102\uff9d\001\002\000\004\102" +
    "\u01ca\001\002\000\006\041\uffaa\072\uffaa\001\002\000\004" +
    "\132\u01c5\001\002\000\010\041\uff9f\072\uff9f\102\uff9f\001" +
    "\002\000\010\027\uff9a\062\u01cd\132\uff9a\001\002\000\006" +
    "\027\u01cf\132\uff9b\001\002\000\010\056\u01d0\101\u01d1\132" +
    "\u01c5\001\002\000\006\041\uffa8\072\uffa8\001\002\000\004" +
    "\132\u01c5\001\002\000\006\041\uffa6\072\uffa6\001\002\000" +
    "\004\102\u01d4\001\002\000\006\041\uffa7\072\uffa7\001\002" +
    "\000\006\027\uff9b\132\uff9b\001\002\000\010\056\u01d7\101" +
    "\u01d8\132\u01c5\001\002\000\006\041\uffae\072\uffae\001\002" +
    "\000\004\132\u01c5\001\002\000\006\041\uffac\072\uffac\001" +
    "\002\000\004\102\u01db\001\002\000\006\041\uffad\072\uffad" +
    "\001\002\000\006\041\u01de\101\u01dd\001\002\000\050\032" +
    "\021\042\u013b\054\054\055\077\056\u013c\075\025\077\010" +
    "\101\030\102\u01df\103\034\123\060\124\061\125\012\126" +
    "\024\127\073\130\041\131\117\132\022\133\112\001\002" +
    "\000\010\010\ufffc\012\ufffc\110\ufffc\001\002\000\004\041" +
    "\u01e3\001\002\000\004\102\u01e1\001\002\000\004\041\u01e2" +
    "\001\002\000\010\010\ufffa\012\ufffa\110\ufffa\001\002\000" +
    "\010\010\ufffb\012\ufffb\110\ufffb\001\002\000\142\003\uff3f" +
    "\004\uff3f\005\uff3f\023\uff3f\026\uff3f\030\uff3f\031\uff3f\033" +
    "\uff3f\034\uff3f\040\uff3f\041\uff3f\042\uff3f\054\uff3f\055\uff3f" +
    "\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f\064" +
    "\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f" +
    "\073\uff3f\074\uff3f\075\uff3f\076\uff3f\100\uff3f\101\uff3f\102" +
    "\uff3f\104\uff3f\105\uff3f\106\uff3f\107\uff3f\111\uff3f\112\uff3f" +
    "\113\uff3f\114\uff3f\115\uff3f\116\uff3f\117\uff3f\120\uff3f\121" +
    "\uff3f\122\uff3f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e2\000\114\002\101\003\047\004\010\005\114\006" +
    "\031\007\025\010\070\011\013\012\041\013\005\014\026" +
    "\015\115\016\110\020\003\021\052\022\105\023\012\024" +
    "\035\025\066\027\104\033\050\046\065\051\042\052\014" +
    "\073\054\074\044\075\043\076\075\077\107\100\051\101" +
    "\103\102\037\103\016\106\113\110\036\116\046\117\063" +
    "\001\001\000\010\016\110\020\003\024\u01e3\001\001\000" +
    "\004\053\u01db\001\001\000\002\001\001\000\006\053\u01bc" +
    "\060\u01be\001\001\000\022\016\110\020\003\021\052\022" +
    "\105\023\012\024\035\025\u01b3\032\u01b1\001\001\000\112" +
    "\003\u01af\004\010\005\114\006\031\007\025\010\070\011" +
    "\013\012\041\013\005\014\026\015\115\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\066\027\104\033" +
    "\050\046\065\051\042\052\014\073\054\074\044\075\043" +
    "\076\075\077\107\100\051\101\103\102\037\103\016\106" +
    "\113\110\036\116\046\117\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\112\003\u01ae\004\010\005\114\006\031\007\025\010\070" +
    "\011\013\012\041\013\005\014\026\015\115\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\073\054\074\044\075" +
    "\043\076\075\077\107\100\051\101\103\102\037\103\016" +
    "\106\113\110\036\116\046\117\063\001\001\000\002\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\u01a9\001\001\000\014\016\u0121\040\u01a4\041" +
    "\u0172\042\u0122\043\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\016\110\020\003\021" +
    "\052\022\105\023\012\024\035\025\u019f\031\u019d\033\u01a0" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\u0189" +
    "\027\u018a\030\u0187\033\u018b\001\001\000\014\016\110\020" +
    "\003\023\310\024\035\034\u0185\001\001\000\002\001\001" +
    "\000\022\016\110\020\003\021\052\022\105\023\012\024" +
    "\035\025\066\033\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u0119\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\u0107" +
    "\050\u0108\001\001\000\002\001\001\000\004\017\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\110" +
    "\020\003\023\336\024\035\001\001\000\020\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\110\020" +
    "\003\023\310\024\035\034\307\001\001\000\022\016\110" +
    "\020\003\021\052\022\105\023\012\024\035\025\066\033" +
    "\306\001\001\000\010\101\304\102\305\116\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\066\033\245\001\001\000\010\053\232" +
    "\054\235\055\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\110\020\003\021\052" +
    "\022\105\023\012\024\035\025\176\001\001\000\002\001" +
    "\001\000\022\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\066\033\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\120\114\121" +
    "\001\001\000\002\001\001\000\004\115\123\001\001\000" +
    "\022\016\110\020\003\021\052\022\105\023\012\024\035" +
    "\025\120\114\137\001\001\000\002\001\001\000\022\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\120" +
    "\114\136\001\001\000\062\005\130\006\031\007\025\010" +
    "\070\011\013\012\041\013\005\014\026\015\115\016\110" +
    "\020\003\021\052\022\105\023\012\024\035\025\066\027" +
    "\104\033\050\046\065\051\042\052\014\104\126\106\113" +
    "\110\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\112\004\132\005\114\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\073\054\074" +
    "\044\075\043\076\075\077\107\100\051\101\103\102\037" +
    "\103\016\105\133\106\113\110\036\116\046\117\063\001" +
    "\001\000\002\001\001\000\110\004\134\005\114\006\031" +
    "\007\025\010\070\011\013\012\041\013\005\014\026\015" +
    "\115\016\110\020\003\021\052\022\105\023\012\024\035" +
    "\025\066\027\104\033\050\046\065\051\042\052\014\073" +
    "\054\074\044\075\043\076\075\077\107\100\051\101\103" +
    "\102\037\103\016\106\113\110\036\116\046\117\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\110\020\003\023\141\024" +
    "\035\001\001\000\002\001\001\000\056\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\106\152\110" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\031\007\025\010\070\011\013\012\041\013\005\014" +
    "\026\015\115\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\066\027\104\033\050\046\065\051\042\052" +
    "\014\106\150\110\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\110\020\003\023\154\024\035\001\001" +
    "\000\002\001\001\000\012\016\110\020\003\023\157\024" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\110\020\003\023\162\024\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\110\020\003\021\052\022\105" +
    "\023\012\024\035\025\174\001\001\000\022\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\066\033\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\225\106" +
    "\113\110\036\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\201\106" +
    "\113\110\036\001\001\000\004\111\204\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\207\001\001\000\002\001\001\000\062" +
    "\005\130\006\031\007\025\010\070\011\013\012\041\013" +
    "\005\014\026\015\115\016\110\020\003\021\052\022\105" +
    "\023\012\024\035\025\066\027\104\033\050\046\065\051" +
    "\042\052\014\104\211\106\113\110\036\001\001\000\002" +
    "\001\001\000\062\005\130\006\031\007\025\010\070\011" +
    "\013\012\041\013\005\014\026\015\115\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\066\027\104\033" +
    "\050\046\065\051\042\052\014\104\213\106\113\110\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\005" +
    "\130\006\031\007\025\010\070\011\013\012\041\013\005" +
    "\014\026\015\115\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\066\027\104\033\050\046\065\051\042" +
    "\052\014\104\220\106\113\110\036\001\001\000\062\005" +
    "\130\006\031\007\025\010\070\011\013\012\041\013\005" +
    "\014\026\015\115\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\066\027\104\033\050\046\065\051\042" +
    "\052\014\104\217\106\113\110\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\224\106" +
    "\113\110\036\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\223\106" +
    "\113\110\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\005\130\006\031\007\025\010\070\011\013" +
    "\012\041\013\005\014\026\015\115\016\110\020\003\021" +
    "\052\022\105\023\012\024\035\025\066\027\104\033\050" +
    "\046\065\051\042\052\014\104\231\106\113\110\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\237\001" +
    "\001\000\002\001\001\000\006\053\232\054\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\110\020\003\021\052\022\105\023\012\024\035" +
    "\025\066\033\247\001\001\000\002\001\001\000\020\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\174" +
    "\001\001\000\002\001\001\000\062\005\130\006\031\007" +
    "\025\010\070\011\013\012\041\013\005\014\026\015\115" +
    "\016\110\020\003\021\052\022\105\023\012\024\035\025" +
    "\066\027\104\033\050\046\065\051\042\052\014\104\251" +
    "\106\113\110\036\001\001\000\006\112\255\113\252\001" +
    "\001\000\004\112\270\001\001\000\002\001\001\000\020" +
    "\016\110\020\003\021\052\022\105\023\012\024\035\025" +
    "\260\001\001\000\002\001\001\000\062\005\130\006\031" +
    "\007\025\010\070\011\013\012\041\013\005\014\026\015" +
    "\115\016\110\020\003\021\052\022\105\023\012\024\035" +
    "\025\066\027\104\033\050\046\065\051\042\052\014\104" +
    "\257\106\113\110\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\264\001\001\000\020\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\005\130\006\031" +
    "\007\025\010\070\011\013\012\041\013\005\014\026\015" +
    "\115\016\110\020\003\021\052\022\105\023\012\024\035" +
    "\025\066\027\104\033\050\046\065\051\042\052\014\104" +
    "\266\106\113\110\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\005" +
    "\130\006\031\007\025\010\070\011\013\012\041\013\005" +
    "\014\026\015\115\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\066\027\104\033\050\046\065\051\042" +
    "\052\014\104\273\106\113\110\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\276\106" +
    "\113\110\036\001\001\000\002\001\001\000\062\005\130" +
    "\006\031\007\025\010\070\011\013\012\041\013\005\014" +
    "\026\015\115\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\066\027\104\033\050\046\065\051\042\052" +
    "\014\104\300\106\113\110\036\001\001\000\002\001\001" +
    "\000\062\005\130\006\031\007\025\010\070\011\013\012" +
    "\041\013\005\014\026\015\115\016\110\020\003\021\052" +
    "\022\105\023\012\024\035\025\066\027\104\033\050\046" +
    "\065\051\042\052\014\104\302\106\113\110\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\110\020\003\023\325\024\035\001" +
    "\001\000\024\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\066\033\314\046\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\320\106" +
    "\113\110\036\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\317\106" +
    "\113\110\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\005\130\006\031\007\025\010\070\011\013\012" +
    "\041\013\005\014\026\015\115\016\110\020\003\021\052" +
    "\022\105\023\012\024\035\025\066\027\104\033\050\046" +
    "\065\051\042\052\014\104\324\106\113\110\036\001\001" +
    "\000\062\005\130\006\031\007\025\010\070\011\013\012" +
    "\041\013\005\014\026\015\115\016\110\020\003\021\052" +
    "\022\105\023\012\024\035\025\066\027\104\033\050\046" +
    "\065\051\042\052\014\104\323\106\113\110\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\005\130\006\031\007\025\010\070" +
    "\011\013\012\041\013\005\014\026\015\115\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\104\335\106\113\110" +
    "\036\001\001\000\062\005\130\006\031\007\025\010\070" +
    "\011\013\012\041\013\005\014\026\015\115\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\066\027\104" +
    "\033\050\046\065\051\042\052\014\104\331\106\113\110" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\005\130\006\031\007\025\010\070\011\013\012\041\013" +
    "\005\014\026\015\115\016\110\020\003\021\052\022\105" +
    "\023\012\024\035\025\066\027\104\033\050\046\065\051" +
    "\042\052\014\104\334\106\113\110\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\340" +
    "\001\001\000\002\001\001\000\020\016\110\020\003\021" +
    "\052\022\105\023\012\024\035\025\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\110\020\003\023\373\024\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\066\033\u010c\001" +
    "\001\000\022\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\066\033\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\005\130\006\031\007\025\010\070\011\013\012\041" +
    "\013\005\014\026\015\115\016\110\020\003\021\052\022" +
    "\105\023\012\024\035\025\066\027\104\033\050\046\065" +
    "\051\042\052\014\104\u0118\106\113\110\036\001\001\000" +
    "\022\016\110\020\003\021\052\022\105\023\012\024\035" +
    "\025\066\033\u0112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\130\006\031\007\025" +
    "\010\070\011\013\012\041\013\005\014\026\015\115\016" +
    "\110\020\003\021\052\022\105\023\012\024\035\025\066" +
    "\027\104\033\050\046\065\051\042\052\014\104\u0115\106" +
    "\113\110\036\001\001\000\002\001\001\000\062\005\130" +
    "\006\031\007\025\010\070\011\013\012\041\013\005\014" +
    "\026\015\115\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\066\027\104\033\050\046\065\051\042\052" +
    "\014\104\u0117\106\113\110\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\u015b\062\u015c" +
    "\063\u015a\001\001\000\024\016\110\020\003\021\052\022" +
    "\105\023\012\024\035\025\u013c\061\u0138\066\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\110\020" +
    "\003\023\u0135\024\035\001\001\000\012\016\u0121\041\u0123" +
    "\042\u0122\043\u0120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\u0121\043\u012a\044\u012b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0121\043" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\u0121\042\u0131\043\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\110\020\003\021\052\022\105" +
    "\023\012\024\035\025\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\u0155\001\001\000" +
    "\020\016\110\020\003\021\052\022\105\023\012\024\035" +
    "\025\u0154\001\001\000\020\016\110\020\003\021\052\022" +
    "\105\023\012\024\035\025\u014a\001\001\000\004\070\u013d" +
    "\001\001\000\002\001\001\000\014\016\110\020\003\023" +
    "\310\024\035\034\u0141\001\001\000\020\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\u0143\001\001\000" +
    "\010\070\u0145\071\u0144\072\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\u0148\001\001" +
    "\000\010\070\u0145\071\u0149\072\u0146\001\001\000\002\001" +
    "\001\000\004\067\u014c\001\001\000\022\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\u013c\066\u014f\001" +
    "\001\000\002\001\001\000\020\016\110\020\003\021\052" +
    "\022\105\023\012\024\035\025\u014e\001\001\000\002\001" +
    "\001\000\004\067\u0153\001\001\000\020\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\u0151\001\001\000" +
    "\002\001\001\000\022\016\110\020\003\021\052\022\105" +
    "\023\012\024\035\025\u013c\066\u014f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\110\020" +
    "\003\021\052\022\105\023\012\024\035\025\u016a\065\u0169" +
    "\001\001\000\004\064\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\u0161\065\u0160\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\u0163\001\001\000\002\001\001\000\004\065" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\110\020\003\021\052\022\105\023\012\024\035\025" +
    "\u015b\063\u0168\001\001\000\002\001\001\000\022\016\110" +
    "\020\003\021\052\022\105\023\012\024\035\025\u015b\063" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\u016b\001\001\000\002\001\001\000" +
    "\004\120\u016d\001\001\000\002\001\001\000\014\016\u0121" +
    "\040\u016f\041\u0172\042\u0122\043\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\u0121\042\u0131" +
    "\043\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\005\130\006\031\007\025\010\070\011\013" +
    "\012\041\013\005\014\026\015\115\016\110\020\003\021" +
    "\052\022\105\023\012\024\035\025\066\027\104\033\050" +
    "\046\065\051\042\052\014\104\u0183\106\113\110\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\u018e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\110\020\003\023\310\024\035\034\u0190\001\001" +
    "\000\002\001\001\000\024\016\110\020\003\021\052\022" +
    "\105\023\012\024\035\025\066\033\u0192\046\u0193\001\001" +
    "\000\010\035\u019a\036\u0194\037\u0195\001\001\000\010\035" +
    "\u0196\036\u0194\037\u0195\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\110\020\003\021" +
    "\052\022\105\023\012\024\035\025\u0198\001\001\000\010" +
    "\035\u0199\036\u0194\037\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u01a2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\110\020\003\021" +
    "\052\022\105\023\012\024\035\025\u01a6\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\u01a8\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\110\020\003\021\052\022\105\023" +
    "\012\024\035\025\u01ab\001\001\000\002\001\001\000\020" +
    "\016\110\020\003\021\052\022\105\023\012\024\035\025" +
    "\u01ad\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\110\020\003\021\052" +
    "\022\105\023\012\024\035\025\u01b5\001\001\000\002\001" +
    "\001\000\020\016\110\020\003\021\052\022\105\023\012" +
    "\024\035\025\u01b9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\110\020\003\021\052" +
    "\022\105\023\012\024\035\025\u01bb\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u01cd\001\001\000\004" +
    "\053\u01bf\001\001\000\002\001\001\000\006\056\u01c2\057" +
    "\u01c5\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\056\u01c2\057\u01c8\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\056\u01c2\057\u01cb\001\001\000" +
    "\002\001\001\000\004\060\u01d4\001\001\000\002\001\001" +
    "\000\006\056\u01c2\057\u01d1\001\001\000\002\001\001\000" +
    "\006\056\u01c2\057\u01d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\u01c2\057\u01d8\001\001\000\002\001\001\000\006\056\u01c2" +
    "\057\u01d9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\110\020\003" +
    "\021\052\022\105\023\012\024\035\025\u013c\061\u01df\066" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TranslatorPy2JCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TranslatorPy2JCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TranslatorPy2JCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	
	symTable=new SymbolTable();
	arraySymbolTable=new ArrayList<SymbolTable>();
	InherSupport = new Hashtable<String,String>();
	StaticSupport = new Hashtable<String,String>();
	Constructors = new Hashtable<String,String>();
	globVar = new ArrayList<String>();
	arrayMain =new ArrayList<String>();
	scopeHash = new Hashtable<String, Integer>();
	writeClass=new WriteClassToFile();
	ignore = new ArrayList<String>();
	ereditClassToFunctionInvocation = new ArrayList<String>();

    }


	//Tabella dei simboli -> parser.getSymbolTable()
	public static SymbolTable symTable;
	public static ArrayList<SymbolTable> arraySymbolTable;
	
	//Stack da usare per l'indentazione
	Hashtable<String, Integer> scopeHash;
	
	//Array per mantenere la lista delle classi ereditate e da usare in caso di metodi invocati
	ArrayList<String> ereditClassToFunctionInvocation;
	
	//Struttura di supporto per il corpo dei metodi in caso di gestione di ereditarietà
	public Hashtable<String,String> InherSupport;
	public Hashtable<String,String> StaticSupport;
	public Hashtable<String,String> Constructors;
	public ArrayList<String> ignore;
	
	//oggetto utilizzato per scrivere ciascuna classe su file
	public static WriteClassToFile writeClass;
	
	/*
	  Struttura di supporto per le variabili globali: la strategia implementativa consiste nell'inserirle
	  all'interno di una classe statica richiamata per accedere alle stesse, pertanto esse devono essere 
	  raccolte all'interno di un array che verra' utilizzato (nell'apposito metodo) per generare tale classe.
	  
	*/
	ArrayList<String> arrayMain;
	ArrayList<String> globVar;

	// ridefinisco la funzione per la gestione degli errori
    public void report_error(String message, Object info) {
        //System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                //System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    
    public void syntax_error(Symbol cur_token){}
   
    
    // funzione che mi restituisce il simbolo attuale
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    
    // ritorna la regola semantica associata ad un simbolo in una certa posizione (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
    
    // restituisce il numero della riga in cui si trova il simbolo corrente
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    
    
    // restituisce il numero della colonna in cui si trova il simbolo corrente
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }
    
    public SymbolTable getSymbolTable(){
		return symTable;
	}
    
    public Hashtable<String,Integer> getScopeHash(){
		return scopeHash;
	}
    
		

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TranslatorPy2JCup$actions {



		/*
		*
		***********************************  GESTIONE EREDITARIETA' MULTIPLA **********************
		*
		*/

	 
		private String mergeClasses(ArrayList<String> classes, String mark){
			String newCl="";
			ArrayList<Hashtable<String, ArrayList<SymbolType>>> m = new ArrayList<Hashtable<String, ArrayList<SymbolType>>>(); 
			for(int i=0;i<classes.size();i++){
					m.add(getClass(classes.get(i)));
					getEntity(m.get(i),classes.get(i));
			}			
			//System.out.println("TO MERGE: "+m.toString());
			for(int i=0;i<classes.size();i++){
				newCl+=classes.get(i);
			}
			return merge(classes.size(),m,mark);
		}		
		
		public String merge(int dim,ArrayList<Hashtable<String, ArrayList<SymbolType>>> toMerge,String mark){
			String str ="";
			String par="";
			String constructor="";
			ArrayList<SymbolType> name = new ArrayList<SymbolType>();
			ArrayList<SymbolType> attributes = new ArrayList<SymbolType>();
			ArrayList<SymbolType> methods = new ArrayList<SymbolType>();
			ArrayList<String> params = new ArrayList<String>();
			ArrayList<SymbolType> constr = new ArrayList<SymbolType>();
			
			//RECUPERO IL NOME DELLA NUOVA CLASSE DA ESTENDERE..
			String newClass="";
			for(int i=0;i<dim;i++){
				newClass = newClass+toMerge.get(i).get("class").get(0).getName();
				if(!toMerge.get(i).get("constructor").isEmpty())
					constr.add(toMerge.get(i).get("constructor").get(0));
				else
					constr.add(new SymbolType(toMerge.get(i).get("class").get(0).getName(),"constructor","",new ArrayList<String>(),"",1,toMerge.get(i).get("class").get(0).getName()));
			}
			parser.symTable.putSymbol(0,newClass,new SymbolType(newClass,"class",null,null,null,0,newClass));
			str = "public class "+newClass+"{\n";
						
			//RECUPERO GLI ATTRIBUTI ASSOCIATI ALLE CLASSI..
			for(int i=0;i<toMerge.size();i++){
				for(int j=0;j<toMerge.get(i).get("attr").size();j++){
					//String currAttr = toMerge.get(i).get("attr").get(j).getOwner()+"_"+toMerge.get(i).get("attr").get(j).getName();
					String currAttr = toMerge.get(i).get("attr").get(j).getName();
					String currType = toMerge.get(i).get("attr").get(j).getType();
					String currValue = toMerge.get(i).get("attr").get(j).getValue();
					//String currOwner = toMerge.get(i).get("attr").get(j).getOwner();
					String currOwner = mark;
					
					if(parser.symTable.checkEntity(currAttr+"#"+currOwner)){
						//System.out.println("ATTRIBUTE DUPLICATE!");
					}else{
						if(currType.equals("Tupla")){
							currValue = currValue.replace("\"","\\\"");
							//System.out.println("FOUND TUPLA WITH PARAMETERS: "+currValue);
							//System.out.println("I PUT: \n"+currAttr+"#"+currOwner+"\n"+currType+"\n"+currValue+"\n"+currOwner+"\n");
							parser.symTable.putSymbol(1,currAttr+"#"+currOwner,new SymbolType(currAttr,currType,currValue,null,null,1,currOwner));
							str = str+"Object"+" "+currAttr+"= new Tupla(\""+currValue+"\");\n";
						}
						else if(currType.equals("GenericList")){
							currValue = currValue.replace("\"","\\\"");
							//System.out.println("FOUND GENERIC LIST WITH PARAMETERS: "+currValue);
							//System.out.println("I PUT: \n"+currAttr+"#"+currOwner+"\n"+currType+"\n"+currValue+"\n"+currOwner+"\n");
							parser.symTable.putSymbol(1,currAttr+"#"+currOwner,new SymbolType(currAttr,currType,currValue,null,null,1,currOwner));
							str = str+"Object"+" "+currAttr+"= new GenericList(\""+currValue+"\");\n";
						}
						else if(currType.equals("PDictionary")){
							currValue = currValue.replace("\"","\\\"");
							//System.out.println("FOUND PDICTIONARY WITH PARAMETERS: "+currValue);
							//System.out.println("I PUT: \n"+currAttr+"#"+currOwner+"\n"+currType+"\n"+currValue+"\n"+currOwner+"\n");
							parser.symTable.putSymbol(1,currAttr+"#"+currOwner,new SymbolType(currAttr,currType,currValue,null,null,1,currOwner));
							str = str+"Object"+" "+currAttr+"= new PDictionary(\""+currValue+"\");\n";
						}
					else{
					//System.out.println("I PUT: \n"+currAttr+"#"+currOwner+"\n"+currType+"\n"+currValue+"\n"+currOwner+"\n");
					parser.symTable.putSymbol(1,currAttr+"#"+currOwner,new SymbolType(currAttr,currType,currValue,null,null,1,currOwner));
					str = str+"Object"+" "+currAttr+"="+currValue+";\n";
					}
					}				
				}
			}
			
			//GENERO IL COSTRUTTORE DELLA CLASSE UNIONE RISULTANTE..
			String p = getConstructors(constr);
			String bod = mergeBod(constr);
			if(!bod.equals("")){
				constructor += "public "+newClass+"("+getConstructors(constr)+"){\n"+mergeBod(constr)+"\n}\n";
				//System.out.println("GENERATE CONSTRUCTOR: "+constructor);
				//Lo assegno alla stringa principale..
				str+=constructor;
			}else{
				constructor += "//Costruttore di default\n public "+newClass+"(){}\n";
				//System.out.println("GENERATE CONSTRUCTOR: "+constructor);
				//Lo assegno alla stringa principale..
				str+=constructor;
			}
						
			//RECUPERO I METODI ASSOCIATI ALLE CLASSI..
			for(int i=0;i<toMerge.size();i++){
				for(int j=0;j<toMerge.get(i).get("meth").size();j++){
					//System.out.println("NOW WORKING WITH: "+toMerge.get(i).get("meth").toString());
					if(toMerge.get(i).get("meth").get(j).getParameters()!=null){
						String currMeth=toMerge.get(i).get("meth").get(j).getName();
						ArrayList<String> currParams = toMerge.get(i).get("meth").get(j).getParameters();
						String currReturn = toMerge.get(i).get("meth").get(j).getReturned();
						String currOwner = mark;
						String nparam=String.valueOf(currParams.size());
						if(parser.symTable.checkEquivalentMethods(currMeth+"#"+nparam+"#"+currOwner)){
							//System.out.println("FOUND EQUIVALENT METHODS!");
						}else{
						//System.out.println("I PUT: \n"+currMeth+"#"+nparam+"#"+currOwner+"\nTYPE: Function\n"+currParams+"\n"+currReturn+"\n"+currOwner+"\n");
						parser.symTable.putSymbol(1,currMeth+"#"+nparam+"#"+currOwner,new SymbolType(currMeth,"function",null,currParams,currReturn,1,currOwner));
						String body = parser.InherSupport.get(toMerge.get(i).get("meth").get(j).getName());				
						str = str+UtilsToSymTable.getFunctionModifier(toMerge.get(i).get("meth").get(j).getName())+toMerge.get(i).get("meth").get(j).getReturned()+" "+toMerge.get(i).get("meth").get(j).getName()+"("+getParams(toMerge.get(i).get("meth").get(j).getParameters())+"){\n"+body+"\n}\n";
						}
					}else{
						String currMeth=toMerge.get(i).get("meth").get(j).getName();
						String currReturn=toMerge.get(i).get("meth").get(j).getReturned();
						String currOwner= mark;
						String nparam=String.valueOf(0);
						if(parser.symTable.checkEquivalentMethods(currMeth+"#"+nparam+"#"+currOwner)){
							//System.out.println("FOUND EQUIVALENT METHODS!");
						}else{
						//System.out.println("I PUT (NO PARAMS): \n"+currMeth+"#"+nparam+"#"+currOwner+"\n"+currReturn+"\n"+currOwner+"\n");
						parser.symTable.putSymbol(1,currMeth+"#"+nparam+"#"+currOwner,new SymbolType(currMeth,"function",null,new ArrayList<String>(),currReturn,1,currOwner));
						String body = parser.InherSupport.get(toMerge.get(i).get("meth").get(j).getName());
						str = str+UtilsToSymTable.getFunctionModifier(toMerge.get(i).get("meth").get(j).getName())+toMerge.get(i).get("meth").get(j).getReturned()+" "+toMerge.get(i).get("meth").get(j).getName()+"(){}\n";
						}
						}
				}
			}
			//Chiudo la classe..
			str = str+"}\n";
			return str;	
			}
		
		
		/**
		 * Restituisce la lista di parametri (Sotto forma di stringa) da inserire nel costruttore unione..
		 * **/
		public String getConstructors(ArrayList<SymbolType> constr){
				if(constr.isEmpty()) return "";
				String par="";
				ArrayList<String> tmp = new ArrayList<String>();
				for(int i=0;i<constr.size();i++){
					for(int j=0;j<constr.get(i).getParameters().size();j++){
						boolean b=false;
						for(int k=0;k<tmp.size();k++){
							if(tmp.get(k).equals(constr.get(i).getParameters().get(j))) b=true;
						}
						if(!b){
							tmp.add(constr.get(i).getParameters().get(j));
							par+=constr.get(i).getParameters().get(j)+",";
						}else{
							//System.out.println("Parameter "+constr.get(i).getParameters().get(j)+ "Ignored!");
							parser.ignore.add(constr.get(i).getName());
						}
					}
				}
				return par.substring(0, par.length()-1);
		}
		
		/***
		 * Restituisce il corpo del nuovo costruttore frutto del merge dei precedenti..
		 * 
		 * */
		
		public String mergeBod(ArrayList<SymbolType> constr){
			if(constr.isEmpty()) return "";
			String body="";
			//System.out.println("TO IGNORE: "+parser.ignore.toString());
			if(parser.ignore.isEmpty()){
				for(int i=0;i<constr.size();i++){
					body +=constr.get(i).getValue();
				}
				return body;
			}
			else{
				body = "";
				semanticAlert("Ignoring body: Semantic Error");
				return body;
			}
		}
		
		
		
		public boolean checkEquivalentMethods(String currMeth,ArrayList<String> met){
			if(met.isEmpty()){
				 	//System.out.println("EQUIVALENT NOT FOUND!");
					return false;
			}
			for(int i=0;i<met.size();i++){
				//System.out.println("CHECK EQUIVALENT FOR: "+currMeth+"\n WITH: "+met.get(i));
					if(met.get(i).equals(currMeth)){
					 	//System.out.println("FOUND EQUIVALENT!");
					 	return true;
				}
			}
			//System.out.println("EQUIVALENT NOT FOUND!");
			return false;
		}
			
		public String getParams(ArrayList<String> parameters){
			String par="";
			if(!parameters.isEmpty()){
				for(int k=0;k<parameters.size()-1;k++){
					if(k==0){
						par=par+parameters.get(k).substring(2,parameters.get(k).length())+", ";
					}else
						par=par+parameters.get(k)+", ";
				}
				par=par+parameters.get(parameters.size()-1);
				return par;
			}return par;
		}
		
		public Hashtable<String, ArrayList<SymbolType>> getClass(String classes){
		 	Hashtable<String, ArrayList<SymbolType>> toMerge = new Hashtable<String, ArrayList<SymbolType>>();
			ArrayList<SymbolType> cl = new ArrayList<SymbolType>(); 
			Hashtable<String, SymbolType> a = parser.symTable.getSymTable(0);
			Enumeration e = a.keys();
			while(e.hasMoreElements()){
				String key = (String)e.nextElement();
				if(a.get(key).getType().equals("class") && a.get(key).getName().equals(classes)){
					//System.out.println("Class found:\n"+a.get(key));
					//Recupero attributi e metodi associati a questa classe.
					cl.add(a.get(key));
					toMerge.put("class",cl);
					//Inizializzo gli array per la classe trovata..
					toMerge.put("attr", new ArrayList<SymbolType>());
					toMerge.put("meth", new ArrayList<SymbolType>());
					toMerge.put("constructor", new ArrayList<SymbolType>());
				}
			}
			return toMerge;
		}
		
		public void getEntity(Hashtable<String, ArrayList<SymbolType>> toMerge,String currClass){			
			for(int i=1;i<parser.symTable.getSize();i++){
				Hashtable<String, SymbolType> a = parser.symTable.getSymTable(i);
				Enumeration eps = a.keys();
				while(eps.hasMoreElements()){
					String key = (String)eps.nextElement();
					//System.out.println("CURRENT KEY: "+key);
					if(a.get(key).getOwner().equals(currClass) && a.get(key).getType().equals("function")){
							//System.out.println("Entity found (FUNCTION):\n"+a.get(key));
							toMerge.get("meth").add(a.get(key));
					}
					else if(a.get(key).getOwner().equals(currClass) && a.get(key).getType().matches("String|Object|Integer|Float|GenericList|PDictionary|Tupla|Double")){
						//System.out.println("Entity found (ATTR):\n"+a.get(key));
						if(checkduplicated(a.get(key),toMerge.get("attr")))
							toMerge.get("attr").add(a.get(key));
						else System.out.println("#Error: Attr duplicated!"); 
					}
					else if(a.get(key).getOwner().equals(currClass) && a.get(key).getType().equals("constructor")){
						//System.out.println("Entity found (CONSTR):\n"+a.get(key));
						toMerge.get("constructor").add(a.get(key));
					}
				}
			}
		}

		
		public String getStaticMeth(){
			if(parser.StaticSupport.isEmpty()) return "";
			String meths="";
			Enumeration e = parser.StaticSupport.keys();
			while(e.hasMoreElements()){
				String key = (String)e.nextElement();
				//System.out.println("StaticSupport: "+key);
				SymbolType st = parser.symTable.getSymbol(0,key);
				//UtilsToSymTable.printArrayList(st.getParameters(),"st.getParameters()");
				StringBuilder sb = new StringBuilder();
				for(int i=0;i<st.getParameters().size();i++){
					sb.append(st.getParameters().get(i));
					if(i!=st.getParameters().size()-1)
						sb.append(",");
				}
				String currBody = parser.StaticSupport.get(key);
				String returned = parser.symTable.getSymbol(0,key).getReturned();
				meths+="public static "+returned+" "+key.split("#")[0]+"("+sb.toString()+"){\n"+currBody+"\n}\n";
			}
			//System.out.println("STATIC METHODS FOUND: "+meths+"\n CLOSED!");
			return meths;
		}
		
		public String getStaticVar(){
			if(parser.globVar.isEmpty() && parser.StaticSupport.isEmpty() && parser.arrayMain.isEmpty()) return "";
			//System.out.println("START STATIC CLASS");
			String stClass = "public class DefaultClass {\n";
			
			//variabili globali
			for(int i=0;i<parser.globVar.size();i++){
				stClass +="public static Object "+parser.globVar.get(i)+";\n";
			}
			
			//main
			stClass += "public static void main(String args[]){\n";
			for(int j=0;j<parser.arrayMain.size();j++)
				stClass +=parser.arrayMain.get(j)+"\n";
			stClass +="}\n";
			
			//altre funzioni
			stClass += getStaticMeth();
			
			//fine DefaulClass
			stClass +="}\n";
			parser.writeClass.writeFile2(stClass,"DefaultClass");
			System.out.println(stClass+"\n\n");
			return stClass;
		}
		
		public boolean checkduplicated(SymbolType currAttr,ArrayList<SymbolType> attr){
			for(int i=0;i<attr.size();i++){
				if(currAttr.getName().equals(attr.get(i).getName())){
						return false;
				}
			}
			return true;
		}		
		
		//NON UTILIZZATO..
		public ArrayList<Hashtable<String, ArrayList<SymbolType>>> init(int dim){
			ArrayList<Hashtable<String, ArrayList<SymbolType>>> m = new ArrayList<Hashtable<String, ArrayList<SymbolType>>>();
			for(int i=0;i<dim;i++){
				m.add(new Hashtable<String, ArrayList<SymbolType>>());
			}
			return m;
		}
		
		
		/**
		 * UTILITY METHODS
		 * 
		 * **/
		
		public String checkPar(ArrayList<String> argv, int scope, String className){
			String pas="";
			boolean ret = false;
			if(argv.isEmpty()){
				//System.out.println("No params found!");
				return "";
			}
			ArrayList<String> argz = UtilsToSymTable.tokenParameters(argv.get(0), ",");
			//System.out.println("I HAVE TO CHECK: "+argz.toString());
			if(!argz.isEmpty()){
				for(int i=0;i<argz.size();i++){
					//System.out.println("I ANALYZE SYMBOL: "+argz.get(i)+" IN SCOPE: "+scope+" FOR CLASS: "+className);
					if(argz.get(i).equals("self")){
						//System.out.println("REMOVING SELF!");
						argz.remove(i);
					}
					else if(parser.symTable.getSymbol(scope,argz.get(i))!=null){
						ret = true;
					}
					else ret=true;
				}
				//System.out.println("CHECK RESULT: "+ret+ " FOR ARGS: "+argz.toString());
				//if(ret){
					for(int j=0;j<argz.size();j++)
						pas += argz.get(j)+",";
					return pas.substring(0,pas.length()-1);
			//	}
					
			//	else 
				//	return "";
			}
			return pas;
		}
		
		/*
		*
		***********************************  GESTIONE ERRORI SEMANTICI/SINTATTICI ********************
		*
		*/
		
		
		private void semanticAlert(String message){
        		System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    	}
    	
    	private void semanticError(String message){
    			System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    	}
    	
    	
    	/*
		*
		***********************************  GESTIONE INDENTAZIONE ***********************************
		*
		*/
    	
    	
    	private int getIndentation()
    	{
    		return ((TranslatorPy2JLex)parser.getScanner()).stackLength()-1;
    	}
    	
    	
    	/*
		*
		***********************************  GESTIONE ASSEGNAZIONE *********************************
		*
		*/
    	
    	
    	public StringBuilder getTypeOfAssignator(String element){
    	
    		StringBuilder sb = new StringBuilder();
    		
    		boolean flag = true;
    		
    		//TODO: RIVEDERE IL DISCORSO RICERCA ATTRIBUTI SYMBOL TABLE
    		if(UtilsToSymTable.tokenParameters(element,".").size()>1){
    			//es: istanzaOggetto.attributo -->splitto rispetto al punto
    			
    			//se ad esempio ho: p.attr
    			//singleElement.get(0) = p
    			//singleElement.get(1) = attr
    			ArrayList<String> singleElement = UtilsToSymTable.tokenParameters(element,".");
				
				String className = UtilsToSymTable.getVariableType(singleElement.get(0),getIndentation(), parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
				if(className!=null){
					boolean flag_attr = UtilsToSymTable.isCorrectClassAttributeUsed(singleElement.get(1),className,getIndentation(), parser.getSymbolTable());
					if(flag_attr==true)
						sb.append("OBJECT-ASSIGNMENT"+"#"+singleElement.get(0)+"#"+singleElement.get(1)+"#"+className);
					else
						sb.append("ERROR");
				}else{
					sb.append("ERROR");
				}
				

    		}else if(UtilsToSymTable.tokenParameters(element,",").size()>1){
				//es: x,y,z = t (con t tupla di dimensione 3)
				
				//System.out.println("TUPLA-UNPACKING");
				sb.append("TUPLA-UNPACKING");
				ArrayList<String> singleElement = UtilsToSymTable.tokenParameters(element,",");
				
				for(int i = 0; i<singleElement.size(); i++){
					if(CheckType.check(singleElement.get(i)).equals("Object")){
						sb.append("#"+singleElement.get(i));
					}else{
						flag=false;
					}
				}
				
			}else if(UtilsToSymTable.tokenParameters(element,"[]").size()>1){
				//es: d['key'] = 34.78 -> con d dizionario
				
				//System.out.println("DICTIONARY-ASSIGNAMENT");
				sb.append("DICTIONARY-ASSIGNAMENT");
				ArrayList<String> singleElement = UtilsToSymTable.tokenParameters(element,"[]");
				sb.append("#"+singleElement.get(0));  //es: d
				sb.append("#"+singleElement.get(1));  //es: 'key'
				
			}else{
				//non abbiamo nulla di certo
				//System.out.println("NOTHING-CERTAIN");
				sb.append("NOTHING-CERTAIN");
				
			}
			
			if(flag==true)
    			return sb;
    		else
    			return null;
    	
    	}
    	
    	
    	public StringBuilder getStringBuilderAssignament(String type, String parameterDX, String parameterSX, int level){
    		
    		StringBuilder sb = new StringBuilder();
    		
    		//System.out.println("getStringBuilderAssignament: " + parameterSX);
    		//System.out.println("getStringBuilderAssignament: " + parameterDX);
    		
    		boolean flag = UtilsToSymTable.isExist(parameterSX.replace("self.",""),level, parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
    		
    		//Object c = 3;
    		
    		if(flag==false){
    			sb.append("Object ");
    		}
    		sb.append(parameterSX);
    		sb.append(" = ");
    		
    		if(type.equals("Tupla")){
    			
    			ArrayList<String> whithoutVirgola = UtilsToSymTable.tokenParameters(parameterDX, "(,)");
    			//UtilsToSymTable.printArrayList(whithoutVirgola, "whithoutVirgola - perTupla");
    			StringBuilder sb2 = new StringBuilder();
    			for(int y=0; y<whithoutVirgola.size();y++){
    				String type_2 = CheckType.check(whithoutVirgola.get(y));
    				if(type_2.equals("Object")){
    					sb2.append(UtilsToSymTable.getStringBuilderToCast(whithoutVirgola.get(y),level,parser.getSymbolTable(), parser.ereditClassToFunctionInvocation));
    				}else{
    					String newParameterDX = whithoutVirgola.get(y).replace("\"","\\\"");
    					//String newParameterDX = whithoutVirgola.get(y).replace("\"","");
    					sb2.append("\""+ newParameterDX +"\"");
    				}
    				if(y!=whithoutVirgola.size()-1){
    					sb2.append(" + \",\" + ");
    				}	
    			}
    			
    			//System.out.println("sb2: " + sb2.toString());
    			
    			//String newParameterDX = parameterDX.replace("\"","\\\"");
    			//sb.append("new Tupla(\""+newParameterDX+"\")");
    			sb.append("new Tupla("+sb2.toString()+")");
    			sb.append(";\n");
    		}else if(type.equals("GenericList")){
    			
    			ArrayList<String> whithoutVirgola = UtilsToSymTable.tokenParameters(parameterDX, "[,]");
    			//UtilsToSymTable.printArrayList(whithoutVirgola, "whithoutVirgola - perGenericList");
    			StringBuilder sb2 = new StringBuilder();
    			for(int y=0; y<whithoutVirgola.size();y++){
    				String type_2 = CheckType.check(whithoutVirgola.get(y));
    				if(type_2.equals("Object")){
    					sb2.append(UtilsToSymTable.getStringBuilderToCast(whithoutVirgola.get(y),level,parser.getSymbolTable(), parser.ereditClassToFunctionInvocation));
    				}else{
    					String newParameterDX = whithoutVirgola.get(y).replace("\"","\\\"");
    					//String newParameterDX = whithoutVirgola.get(y).replace("\"","");
    					sb2.append("\""+ newParameterDX +"\"");
    				}
    				if(y!=whithoutVirgola.size()-1){
    					sb2.append(" + \",\" + ");
    				}	
    			}
    			
    			//System.out.println("sb2: " + sb2.toString());
    			
    			//String newParameterDX = parameterDX.replace("\"","\\\"");
    			//sb.append("new GenericList(\""+newParameterDX+"\")");
    			sb.append("new GenericList("+sb2.toString()+")");
    			sb.append(";\n");
    		}else if(type.equals("PDictionary")){
    			
    			ArrayList<String> whithoutVirgola = UtilsToSymTable.tokenParameters(parameterDX, "{,}");
    			//UtilsToSymTable.printArrayList(whithoutVirgola, "whithoutVirgola - perDICT");
    			StringBuilder sb2 = new StringBuilder();
    			for(int y=0; y<whithoutVirgola.size();y++){
    				ArrayList<String> whithoutTwoPoints = UtilsToSymTable.tokenParameters(whithoutVirgola.get(y), ":");
    				//UtilsToSymTable.printArrayList(whithoutTwoPoints, "whithoutTwoPoints - perDICT");
    				for(int t=0;t<whithoutTwoPoints.size();t++){
    					String type_2 = CheckType.check(whithoutTwoPoints.get(t));
        				if(type_2.equals("Object")){
        					sb2.append(UtilsToSymTable.getStringBuilderToCast(whithoutTwoPoints.get(t),level,parser.getSymbolTable(), parser.ereditClassToFunctionInvocation));
        				}else{
        					String newParameterDX = whithoutTwoPoints.get(t).replace("\"","\\\"");
        					//String newParameterDX = whithoutVirgola.get(t).replace("\"","");
        					sb2.append("\""+ newParameterDX +"\"");
        				}
        				if(t!=whithoutTwoPoints.size()-1)
        					sb2.append("+\":\"+");
    				}
    				
    				if(y!=whithoutVirgola.size()-1){
    					sb2.append("+\",\"+");
    				}
    				
    			}
    			
    			//System.out.println("sb2: " + sb2.toString());
    			
    			//String newParameterDX = parameterDX.replace("\"","\\\"");
    			//sb.append("new PDictionary(\""+newParameterDX+"\")");
    			sb.append("new PDictionary("+sb2.toString()+")");
    			sb.append(";\n");
    		}else{
    			sb.append(parameterDX);
    			sb.append(";\n");
    		}
    		
    		return sb;
    		
    	
    	}
    	
    	
    	public StringBuilder getStringBuilderSubTuplaOrGenericList(String type, String parameterDX, String parameterSX, String arg, int level){
    		
    		boolean flag = UtilsToSymTable.isExist(parameterSX.replace("self.",""),level, parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
    		StringBuilder sb = new StringBuilder();
    		
    		if(flag==false){
    			sb.append("Object ");
    			sb.append(parameterSX);
    			sb.append(" = new ");
    			sb.append(type);
    			sb.append("();\n");
    		}
    		
    		sb.append(parameterSX);
    		sb.append(" = ");
    		
    		if(type.equals("Tupla")){
    			sb.append("((Tupla)" + parameterDX +").subTupla(\""+arg+"\");\n");
    		}else if(type.equals("GenericList")){
    			sb.append("((GenericList)" + parameterDX +").subGenericList(\""+arg+"\");\n");
    		}
    		return sb;
    	
    	}
    	
    	
    	
    	public StringBuilder getStringBuilderResultOperationTuplaOrGenericList(String type, String parameterSX, String arg, int level){
    		
    		boolean flag = UtilsToSymTable.isExist(parameterSX.replace("self.",""),level, parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
    		StringBuilder sb = new StringBuilder();
    		
    		if(flag==false){
    			sb.append("Object ");
    			sb.append(parameterSX);
    			sb.append(" = new ");
    			sb.append(type);
    			sb.append("();\n");
    		}
    		
    		if(type.equals("Tupla")){
    			sb.append("((Tupla)" + parameterSX +").resultOperationsTupla(\""+arg+"\");\n");
    		}else if(type.equals("GenericList")){
    			sb.append("((GenericList)" + parameterSX +").resultOperationsGenericList(\""+arg+"\");\n");
    		}
    		return sb;
    	
    	}
    	
    	
    	public String formatString(String strToFormat){
			String newSTR = strToFormat.replace("\"","\\\"");
			String STRwithQuotes = "\""+newSTR+"\"";
			return STRwithQuotes;
    	}
    	
    	public ArrayList<String> getOperator(ArrayList<String> arrayLP,String lastParameters){
	    	
    		//**** GESTIONE OPERATORI ****
											
			StringBuilder operator = new StringBuilder();
			
			for(int l=0;l<arrayLP.size();l++){
				if(l!=arrayLP.size()-1)
					operator.append(arrayLP.get(l)+"|") ;
				else
					operator.append(arrayLP.get(l)) ;
			}
	
			ArrayList<String> arrayOperator=new ArrayList<String>();
			arrayOperator=UtilsToSymTable.tokenParameters(lastParameters,operator.toString());
			
    		return arrayOperator;
    	}
    	
    	
    	
    	public String getDXAssignament(String type, String lastParameter){
    		StringBuilder sb = new StringBuilder();
    		if(type.equals("Tupla")){
    			sb.append(" = new Tupla(\""+lastParameter+"\");\n");
    		}else if(type.equals("GenericList")){
    			sb.append(" = new GenericList(\""+lastParameter+"\");\n");
    		}else if(type.equals("PDictionary")){
    			sb.append(" = new PDictionary(\""+lastParameter+"\");\n");
    		}else {
    			sb.append(" = "+lastParameter+";\n");
    		}
    		return sb.toString();
    	}


		/*
		*
		***********************************  GESTIONE ASSEGNAZIONE PARTE 2  ******************************
		*
		*/


		public ArrayList<String> managerStringWithPoint(String firstPoint, String afterPoint, int level){
			//casi:
			//1) istanza.funzione
			//2) istanza.attributo
			//3) Classe.funzione
			//4) Classe.attributo
			//5) funzione() ???????????
			
			ArrayList<String> informations = new ArrayList<String>();
			
			String manager = "OK";
			
			//se afterPont ha parentesi () -> si tratta di invocazione metodo
			//se NON ha parente () -> si tratta di uso di un attributo di una qualche classe
			
			if(afterPoint.contains("(") && afterPoint.contains(")")){
			
				// SI FUNZIONE - NO ATTRIBUTO
			
				//arrayWithoutParents.get(0) = nomeFunction
				//arrayWithoutParents.get(1) = lista argomenti -> ma potrebbe non esistere (se non passo alcun argomento)
				ArrayList<String> arrayWithoutParents = UtilsToSymTable.tokenParameters(afterPoint,"()");
				
				/**
				 * typeOfFunctionUsed = 1 -> caso: funzione()
				 * typeOfFunctionUsed = 2 -> caso: NomeClasse.funzione()
				 * typeOfFunctionUsed = 3 -> caso: istanza.funzione()
				 */
				String typeOfFunctionUsed = "0";
				
				int numFunctionParam = 0;
				String parameterList = "";
				if(arrayWithoutParents.size()>1){
					ArrayList<String> params = UtilsToSymTable.tokenParameters(arrayWithoutParents.get(1),",");
					numFunctionParam = params.size();
					parameterList = arrayWithoutParents.get(1);
				}
				
				String className = new String();
				String functionName = new String();
				
				if(firstPoint == null){
					//caso: v = funzione()
					className = "DefaultClass";
					functionName = arrayWithoutParents.get(0);
					typeOfFunctionUsed = "1";
				}else{
					//vedo se firstPoin è una classe o una istanza:
					boolean isClass = UtilsToSymTable.isExistClass(firstPoint, level, parser.getSymbolTable());
					if(isClass){
						//caso: v = NomeClasse.funzione()
						className = firstPoint;
						functionName = firstPoint + "_" + arrayWithoutParents.get(0);
						typeOfFunctionUsed = "2";
					}else{
						//caso: v = istanza.funzione()
						boolean isAVariable = UtilsToSymTable.isExist(firstPoint,getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
						if(isAVariable){
							className = UtilsToSymTable.getVariableType(firstPoint,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
							functionName = arrayWithoutParents.get(0);
							typeOfFunctionUsed = "3";
						}else{
							//L'istanza non e' stata precedentemente dichiarata! ERROR!
							manager = "ERROR - Variable/Istance Not Declared";
						}
					}
				}
			
				String functionNameToSearch = functionName + "#" + String.valueOf(numFunctionParam) + "#" + className;
				
				//System.out.println("functionNameToSearch: " +functionNameToSearch);

				boolean funcOK = UtilsToSymTable.isCorrectFunctionInvocation(functionName,String.valueOf(numFunctionParam),className, getIndentation(),parser.getSymbolTable());
				
				if(funcOK && UtilsToSymTable.functionHasReturn(functionName,String.valueOf(numFunctionParam),className, getIndentation(), parser.getSymbolTable())){
					//System.out.println("funcOK____functionNameToSearch: TRUE");
					
					informations.add("FUNCTION-INVOCATION");
					informations.add(typeOfFunctionUsed);
					informations.add(functionName);
					informations.add(String.valueOf(numFunctionParam));
					informations.add(className);
					informations.add(parameterList);
					informations.add(firstPoint);
					
				}else{
					manager = "ERROR - Method Dont Exist";
				}
				
				
				
			}else{
				
				// NO FUNZIONE - SI ATTRIBUTO
				
				/**
				 * typeOfAttributeUsed = 1 -> caso: NomeClasse.attr
				 * typeOfAttributeUsed = 2 -> caso: istanza.attr
				 */
				String typeOfAttributeUsed = "0";
				
				String className = new String();
				String attributeName = new String();
				if(firstPoint!=null){
					boolean isClass = UtilsToSymTable.isExistClass(firstPoint, level, parser.getSymbolTable());
					if(isClass){
						//caso: v = NomeClasse.attr
						className = firstPoint;
						attributeName = firstPoint + "_" + afterPoint;
						typeOfAttributeUsed = "1";
					}else{
						//caso: v = istanza.attr
						boolean isAVariable = UtilsToSymTable.isExist(firstPoint,getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
						if(isAVariable){
							className = UtilsToSymTable.getVariableType(firstPoint,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
							attributeName = firstPoint + "." + afterPoint;
							typeOfAttributeUsed = "2";
						}else{
							//L'istanza non è stata precedentemente dichiarata! ERROR!
							manager = "ERROR - Variable/Istance Not Declared";
						}
					}
					
					String attributeNameToSearch = attributeName + "#" + className;					
					boolean attrOK = UtilsToSymTable.isExist(attributeNameToSearch, getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
					
					if(attrOK){
						//System.out.println("attrOK____attributeNameToSearch: TRUE");
						
						informations.add("ATTRIBUTE-USED");
						informations.add(typeOfAttributeUsed);
						informations.add(firstPoint);
						informations.add(afterPoint);
						informations.add(className);
						informations.add(firstPoint);
						
					}else{
						manager = "ERROR - Attribute Dont Exist";
					}
				}
			}
			
			return informations;
		}

		public String getStringBuilderForStringWithPoint(String firstPoint, String afterPoint, int level){
			
			ArrayList<String> informations = managerStringWithPoint(firstPoint, afterPoint, level);
			
			if(informations.size()!=0){
				
				if(informations.get(0).equals("FUNCTION-INVOCATION")){
					//caso con funzione
					if(informations.get(1).equals("1")){
						//caso: v = funzione()  -> DefaultClass.funzione(...)
						return "DefaultClass."+informations.get(2)+"("+informations.get(5)+")";
					}
					if(informations.get(1).equals("2")){
						//caso: v = NomeClasse.funzione() -> NomeClasse_funzione(...)
						return informations.get(4)+"_"+informations.get(2)+"("+informations.get(5)+")";
					}
					if(informations.get(1).equals("3")){
						//caso: v = istanza.funzione() -> ((NomeClasse)istanza).funzione(...)
						return "(("+informations.get(4)+")"+informations.get(6)+")."+informations.get(2)+"("+informations.get(5)+")";
					}
					
				}else{
					//caso con attributo
					if(informations.get(1).equals("1")){
						//caso: v = NomeClasse.attr
						return informations.get(4)+"_"+informations.get(2);
					}
					if(informations.get(1).equals("2")){
						//caso: v = istanza.attr
						return "(("+informations.get(4)+")"+informations.get(2)+")."+informations.get(3);
					}
				}
			}
			
			return null;
		}
		
		
		public String getTypeForStringWithPoint(String firstPoint, String afterPoint, int level){
			
			ArrayList<String> informations = managerStringWithPoint(firstPoint, afterPoint, level);
			
			if(informations.size()!=0){
				
				if(informations.get(0).equals("ATTRIBUTE-USED")){
					//caso con attributo
					if(informations.get(1).equals("1")){
						//caso: v = NomeClasse.attr
					}
					if(informations.get(1).equals("2")){
						//caso: v = istanza.attr
						String name = informations.get(2) + "." + informations.get(3) + "#" + informations.get(4);
						return UtilsToSymTable.getVariableType(name, level,parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
					}
				}
			}
			
			return null;
		}
		
		
		
		public String getLEN(String argoment, int level, String type){
			String lenArgumentType = new String();
			if(type==null)
				lenArgumentType = CheckType.check(argoment);
			else
				lenArgumentType = type;

			//System.out.println("TYPE getLEN: " +lenArgumentType);
			
			if(lenArgumentType.equals("Tupla")){
				//((Tupla)argoment.)getSize()
				return "((Tupla)"+argoment+").getSize()";
			}
			if(lenArgumentType.equals("GenericList")){
				return "((GenericList)"+argoment+").getSize()";
			}
			if(lenArgumentType.equals("PDictionary")){
				return "((PDictionary)"+argoment+").getSize()";
			}
			if(lenArgumentType.equals("String")){

				if(argoment.contains("\"") || argoment.contains("\'")){
					//sicuro Stringa
					return "((String)"+argoment+").length()";
				}else{
					//potrebbe esere p.attr o p.func()
					ArrayList<String> arrayWithouthPoint = UtilsToSymTable.tokenParameters(argoment, ".");
					if(arrayWithouthPoint.size()>1){
						ArrayList<String> informations = managerStringWithPoint(arrayWithouthPoint.get(0), arrayWithouthPoint.get(1), level);
						if(informations.size()!=0){
							String innerFunctionSet = getStringBuilderForStringWithPoint(arrayWithouthPoint.get(0), arrayWithouthPoint.get(1), level);
							if(informations.get(0).equals("FUNCTION-INVOCATION")){
								//le funzioni le tratto come STRINGHE perchè non so il tipo di ritorno
								return "((String)"+innerFunctionSet+".toString()"+").length()";
							}else{
								//caso p.attr
								String type_pAttr = getTypeForStringWithPoint(arrayWithouthPoint.get(0), arrayWithouthPoint.get(1), level);
								if(type_pAttr!=null){
									if(lenArgumentType.equals("Tupla")){
										return "((Tupla)"+innerFunctionSet+").getSize()";
									}
									if(lenArgumentType.equals("GenericList")){
										return "((GenericList)"+innerFunctionSet+").getSize()";
									}
									if(lenArgumentType.equals("PDictionary")){
										return "((PDictionary)"+innerFunctionSet+").getSize()";
									}
									if(lenArgumentType.equals("String")){
										return "((String)"+innerFunctionSet+").length()";
									}
								}
							}
						}
					}
					//System.out.println(" QUI ");
				}
			}
			if(lenArgumentType.equals("Object")){
				String objectType = UtilsToSymTable.getVariableType(argoment,level,parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
				String result = getLEN(argoment, level, objectType);
				//System.out.println("RESULT RICORSIONE: " + result) ;
				return result;
			}
			return null;
		}
		

		public String isLEN(String allString, int level){


			ArrayList<String> arrayWithouthParents = UtilsToSymTable.tokenParameters(allString.replace("self.",""), "()");
			//UtilsToSymTable.printArrayList(arrayWithouthParents, "isLEN - arrayWithouthParents: ");
			
			//verifico il nome della funzione
			if(arrayWithouthParents.get(0).equals("len") && arrayWithouthParents.size()>1){
				return getLEN(arrayWithouthParents.get(1), level, null);
			}//fine if(len)
			else if(arrayWithouthParents.get(0).equals("range") && arrayWithouthParents.size()>1){
				//TODO
				return null;
			}//fine if(len)
			
			
			return null;
		}

		

  private final TranslatorPy2JCup parser;

  /** Constructor */
  CUP$TranslatorPy2JCup$actions(TranslatorPy2JCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TranslatorPy2JCup$do_action(
    int                        CUP$TranslatorPy2JCup$act_num,
    java_cup.runtime.lr_parser CUP$TranslatorPy2JCup$parser,
    java.util.Stack            CUP$TranslatorPy2JCup$stack,
    int                        CUP$TranslatorPy2JCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TranslatorPy2JCup$result;

      /* select the action based on the action number */
      switch (CUP$TranslatorPy2JCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // comment ::= COMMENT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
		String tab=" ";
		for(int i=0; i<getIndentation(); i++){
			tab+="\t";
		}
		RESULT = tab+c.toString().replace("#","//")+"\n"; 
	
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comment",70, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // comp_if ::= IF test comp_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "if "+t.toString()+c.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_if",56, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // comp_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT="if "+t.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_if",56, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // comp_for ::= FOR exprlist IN test comp_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "for "+e.toString()+" in "+t.toString()+c.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_for",54, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // comp_for ::= FOR exprlist IN test 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "for "+e.toString()+" in "+t.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_for",54, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // comp_iter ::= comp_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_iter",55, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // comp_iter ::= comp_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comp_iter",55, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // list_if ::= IF test list_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "if "+t.toString()+l.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // list_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT="if "+t.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // list_for ::= FOR exprlist IN range_stmt list_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // list_for ::= FOR exprlist IN testlist list_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "for "+e.toString()+" in "+t.toString()+l.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // list_for ::= FOR exprlist IN testlist 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "for "+e.toString()+" in "+t.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // list_iter ::= list_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT=l.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // list_iter ::= list_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT=l.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // argument ::= test ASSIGN test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t1.toString()+assign.toString()+t2.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument",52, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // argument ::= test comp_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t.toString() + " " +c.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument",52, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // argument ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument",52, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // argument_rec ::= COMMA 
            {
              Object RESULT =null;
		RESULT = ",";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument_rec",53, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // argument_rec ::= COMMA argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = ","+a+ar;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument_rec",53, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // argument_rec ::= COMMA argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = ","+a;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("argument_rec",53, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // arglist ::= MULTMULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // arglist ::= MULT test argument_rec MULTMULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // arglist ::= MULT test COMMA MULTMULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // arglist ::= MULT test argument_rec 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // arglist ::= MULT test 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // arglist ::= argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = a + ar.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // arglist ::= argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = a;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("arglist",47, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // classdef ::= CLASS NAME LPAREN testlist RPAREN COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT = Classdef_stmt.classdef_stmt_3(n.toString(),s.toString(),t.toString(),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation, parser.InherSupport, parser.ignore);
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("classdef",64, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // classdef ::= CLASS NAME LPAREN RPAREN COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT = Classdef_stmt.classdef_stmt_2(n.toString(),s.toString(),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("classdef",64, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // classdef ::= CLASS NAME COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT = Classdef_stmt.classdef_stmt_1(n.toString(),s.toString(),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("classdef",64, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // sliceop ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("sliceop",51, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // sliceop ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("sliceop",51, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // subscript ::= COLON sliceop 
            {
              Object RESULT =null;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // subscript ::= COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+t.toString()+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // subscript ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // subscript ::= test COLON sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=t.toString()+":"+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // subscript ::= test COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString()+slice.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // subscript ::= test COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // subscript ::= test COLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		RESULT=t.toString()+":";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // subscript ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // subscript ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = t;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // subscript ::= TRIDOT 
            {
              Object RESULT =null;
		RESULT="...";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript",49, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // subscript_rec ::= subscript_rec COMMA subscript 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",50, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // subscript_rec ::= COMMA subscript 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",50, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // subscriptlist ::= subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",48, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // subscriptlist ::= subscript 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = s;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",48, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // trailer ::= DOT NAME LBRACK expr RBRACK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
								RESULT = "."+n.toString()+"["+a.toString()+"]";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // trailer ::= DOT NAME LBRACK RBRACK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
								RESULT = "."+n.toString()+"[]";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // trailer ::= DOT NAME LPAREN positional_arguments RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									RESULT = "."+n.toString()+"("+a.toString()+")";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // trailer ::= DOT NAME LPAREN RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
									RESULT = "."+n.toString()+"()";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // trailer ::= DOT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT = "."+n.toString();
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // trailer ::= LBRACK subscriptlist RBRACK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									RESULT = "[" + s.toString() + "]";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // trailer ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		
									RESULT = "[]";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // trailer ::= LPAREN arglist RPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									//System.out.println("STAMPO"+a);
									RESULT = "("+a.toString()+")";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		
									RESULT = "();";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // lambdef ::= LAMBDA varargslist COLON test 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							String message="THIS INSTRUCTION CAN'T CONVERT FROM PYTHON TO JAVA";
							semanticAlert( message);
							RESULT="//AUTO GENERATE COMMENT: ERROR FROM lambdef\n";
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // lambdef ::= LAMBDA COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							String message="THIS INSTRUCTION CAN'T CONVERT FROM PYTHON TO JAVA";
							semanticAlert( message);
							RESULT="//AUTO GENERATE COMMENT: ERROR FROM lambdef\n";	
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // exprlist ::= exprlist COMMA expr 
            {
              Object RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
									//*******************DA RIVEDERE:PROVVISORIO***********
									//System.out.println("I'M A exprlist con virgola: "+ getIndentation());
									parser.scopeHash.put(e.toString(),getIndentation());
									parser.symTable.putSymbol(getIndentation(),e.toString(), new SymbolType(e.toString(),"Object","0",null,null,getIndentation(),null));
									RESULT=explist+"+"+e;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // exprlist ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									int level = getIndentation();
									//System.out.println("I'M A exprlist: "+ level);
									parser.scopeHash.put(e.toString(),level);
									parser.symTable.putSymbol(level,e.toString(), new SymbolType(e.toString(),"Object","0",null,null,level,null));
									RESULT = e;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // testlist ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							boolean isAclass = UtilsToSymTable.isExistClass(t.toString(),0, parser.getSymbolTable());
							if(isAclass)
								parser.ereditClassToFunctionInvocation.add(t.toString());
							//System.out.println("I'M A TESTLIST: "+t.toString());
							RESULT = t;
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // testlist ::= testlist COMMA test 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							boolean isAclass = UtilsToSymTable.isExistClass(t.toString(),0, parser.getSymbolTable());
							if(isAclass)
								parser.ereditClassToFunctionInvocation.add(t.toString());
							RESULT =tl.toString()+","+t.toString();
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // testlist_comp ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								//System.out.println("test:t list_for:l ---- ");
								//DA FARE
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // testlist_comp ::= testlist 
            {
              Object RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object tlist = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT = tlist.toString();
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // dictorsetmaker ::= dictorsetmaker COMMA test COLON test 
            {
              Object RESULT =null;
		int dicleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int dicright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object dic = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								RESULT = dic.toString() + ","+ t1.toString()+ ":" + t2.toString();
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // dictorsetmaker ::= test COLON test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								RESULT = t1.toString() + ":" + t2.toString();
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // listmaker ::= 
            {
              Object RESULT =null;
		 
									RESULT = "";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // listmaker ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									//System.out.println(" ---------> LISTA! <------"); 
									RESULT = "";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // yield_expr ::= YIELD testlist 
            {
              Object RESULT =null;
		
									String message="YIELD: OPERAZIONE NON PERMESSA IN JAVA\n"; 
									semanticAlert(message);
									RESULT = "//ERROR ON YIELD: AUTO GENERATE COMMENT\n";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // yield_expr ::= YIELD 
            {
              Object RESULT =null;
		
									String message="YIELD: THIS OPERATION IN Java is different\n"; 
									semanticAlert(message);
									RESULT = "//ERROR ON YIELD: AUTO GENERATE COMMENT\n";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // number ::= BIN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = b.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // number ::= OCT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = o.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // number ::= HEX 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = h.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // number ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = Integer.parseInt(d.toString());
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // number ::= LONGINT 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = li.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // number ::= IMAGNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = i.toString();
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // number ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = Float.parseFloat(f.toString());
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // unop ::= TILDE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT=t;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // unop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT=p;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // unop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT=m;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // atom ::= LCURLY dictorsetmaker error 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
								semanticError("Error: Invalid syntax.");
								RESULT = "{";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // atom ::= LBRACK error 
            {
              Object RESULT =null;
		
								semanticError("Error: Invalid syntax -> Expected ']'.");
								RESULT = "[";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // atom ::= LPAREN testlist_comp error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
								semanticError("Error: Invalid syntax -> Expected ')'.");
								RESULT = "("+t.toString();
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // atom ::= LPAREN yield_expr error 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
								semanticAlert("Error: Invalid syntax: 'yeld' not supported yet.");
								RESULT = "//'yeld' not supported yet.\n";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // atom ::= LCURLY error 
            {
              Object RESULT =null;
		
								semanticError("Error: Invalid syntax.");
								RESULT = "{";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // atom ::= LPAREN error 
            {
              Object RESULT =null;
		
								//semanticError("Error: Invalid syntax.");
								RESULT = "(";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // atom ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									RESULT = "{"+d.toString()+"}";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // atom ::= LBRACK listmaker RBRACK 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									RESULT = "["+l.toString()+"]";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // atom ::= LBRACK testlist RBRACK 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									RESULT = "["+t.toString()+"]";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // atom ::= LPAREN testlist_comp RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									RESULT = "("+t.toString()+")";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // atom ::= LPAREN yield_expr RPAREN 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
									RESULT = y;							
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // atom ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		
									RESULT = "{}";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // atom ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		
									RESULT = "()";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // atom ::= unop atom 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT = u.toString() + a.toString();
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // atom ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT = s;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // atom ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT = n;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // atom ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT = n;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr ::= atom trailer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
									//System.out.println("SONO ENTRATO:"+a+t);
									RESULT=a.toString()+t.toString();
									
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr ::= atom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT = a;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // binop ::= DIVDIV 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // binop ::= ECOM 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=" && ";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // binop ::= PIPE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT=" || ";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // binop ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "!"; 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // binop ::= MULTMULT 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // binop ::= OR 
            {
              Object RESULT =null;
		RESULT = " || ";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // binop ::= AND 
            {
              Object RESULT =null;
		RESULT = " && ";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // binop ::= NEQ 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // binop ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = eq;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // binop ::= MAIEQ 
            {
              Object RESULT =null;
		int maieqleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int maieqright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object maieq = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = maieq;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // binop ::= MAIOR 
            {
              Object RESULT =null;
		int magleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int magright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object mag = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = mag;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // binop ::= MINEQ 
            {
              Object RESULT =null;
		int mineqleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mineqright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object mineq = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = mineq;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // binop ::= MINOR 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = min;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // binop ::= RSHIFT 
            {
              Object RESULT =null;
		int rshiftleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rshiftright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object rshift = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = rshift;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // binop ::= LSHIFT 
            {
              Object RESULT =null;
		int lshiftleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lshiftright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object lshift = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = lshift;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // binop ::= NOT IN 
            {
              Object RESULT =null;
		int notinleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int notinright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object notin = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = notin;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // binop ::= IS NOT 
            {
              Object RESULT =null;
		int isnotleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int isnotright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object isnot = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "!="; 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // binop ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = in;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // binop ::= IS 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = "==";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // binop ::= MOD 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = m;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // binop ::= EXPON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = ex;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // binop ::= DIVIDE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = d;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // binop ::= MULT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = m;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // binop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = m;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // binop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT = p;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // comparison ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									//System.out.println("comparison -> expr:e  "+e.toString());
									RESULT = e;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // comparison ::= comparison binop expr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									//System.out.println("comparison:c binop:b expr:e  ");
									RESULT = c.toString() + b.toString() + e.toString();
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // test ::= lambdef 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 	
									RESULT = l.toString();
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // test ::= comparison 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									parser.scopeHash.put(c.toString(),getIndentation());
									RESULT = c;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // assign_recoursive ::= ASSIGN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT = "="+t;
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",38, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // assign_recoursive ::= ASSIGN testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int ass_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int ass_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object ass_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT = "="+t+ass_rec;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",38, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // stmt_rec ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
						RESULT = s.toString();
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",67, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stmt_rec ::= stmt_rec stmt 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
						RESULT = sr.toString()+s.toString();
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",67, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // suite ::= NEWLINE INDENT stmt_rec DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
					RESULT = s;
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("suite",66, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // suite ::= simple_stmt 
            {
              Object RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object simple = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					//parser.scopeHash.put(simple.toString(),getIndentation());
					RESULT = simple;
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("suite",66, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // with_item_recoursive ::= with_item_recoursive COMMA with_item 
            {
              Object RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT="";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",75, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // with_item_recoursive ::= COMMA with_item 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT="";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",75, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // with_item ::= test AS expr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT="";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item",74, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // with_item ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT="";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_item",74, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // with_stmt ::= WITH with_item with_item_recoursive COLON suite 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								semanticAlert("WITH CONSTRUCT NOT SUPPORTED.");
								RESULT = "// WITH CONSTRUCT NOT SUPPORTED.\n"; 
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("with_stmt",62, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // except_clause ::= EXCEPT test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							RESULT="catch(Exception e)";
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // except_clause ::= EXCEPT test AS test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							if(t.toString().equals("IOError"))
								RESULT="catch(IOException "+t2.toString()+")";
							else
								RESULT="catch(Exception "+t2.toString()+")";
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // except_clause ::= EXCEPT test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							//Mi aspetto una forma del tipo: ValueError:
							if(t.toString().equals("IOError"))
								RESULT="catch(IOException e)";
							else RESULT="catch(Exception e)";
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // except_clause ::= EXCEPT 
            {
              Object RESULT =null;
		
							RESULT="catch(Exception e)";
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause",72, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // except_clause_recoursive ::= except_clause_recoursive except_clause COLON suite 
            {
              Object RESULT =null;
		int ecrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int ecrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object ecrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								RESULT="catch(IOException e)"+"{"+s.toString()+"}";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",73, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // except_clause_recoursive ::= except_clause COLON suite 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT=ec.toString()+"{"+s.toString()+"}";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",73, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
					if(getIndentation()==0){
						parser.arrayMain.add( "try{"+"\n"+s1.toString()+"\n"+s2.toString()+"\n}\n"+excrec.toString()+"\n"+"finally{\n"+s3.toString()+"\n}\n" );
						RESULT = "";
					}
					else
						RESULT="try{"+"\n"+s1.toString()+"\n"+s2.toString()+"\n}\n"+excrec.toString()+"\n"+"finally{\n"+s3.toString()+"\n}\n";
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-9)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // try_stmt ::= TRY COLON suite except_clause_recoursive FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
					
					if(getIndentation()==0){
						parser.arrayMain.add( "try{"+"\n"+s1.toString()+"\n}\n"+excrec.toString()+"\n"+"finally{\n"+s2.toString()+"\n}\n" );
						RESULT = "";
					}
					else
						RESULT="try{"+"\n"+s1.toString()+"\n}\n"+excrec.toString()+"\n"+"finally{\n"+s2.toString()+"\n}\n";

				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
					if(getIndentation()==0){
						parser.arrayMain.add( "try{"+"\n"+s1.toString()+"\n"+s2.toString()+"\n}\n"+excrec.toString() );
						RESULT = "";
					}
					else
						RESULT="try{"+"\n"+s1.toString()+"\n"+s2.toString()+"\n}\n"+excrec.toString();
				
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // try_stmt ::= TRY COLON suite except_clause_recoursive 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
				
					if(getIndentation()==0){
						parser.arrayMain.add( "try{"+"\n"+s1.toString()+"\n}\n"+excrec.toString() );
						RESULT = "";
					}
					else
						RESULT="try{"+"\n"+s1.toString()+"\n}\n"+excrec.toString();
				
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
					
					if(getIndentation()==0){
						parser.arrayMain.add( "try{"+"\n"+s1.toString()+"\n}\n"+"catch(Exception e){\n e.printStackTrace();\n}\n"+"finally{\n"+s2.toString()+"\n}\n" );
						RESULT = "";
					}
					else
						RESULT="try{"+"\n"+s1.toString()+"\n}\n"+"catch(Exception e){\n e.printStackTrace();\n}\n"+"finally{\n"+s2.toString()+"\n}\n";

				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("try_stmt",61, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_stmt ::= FOR exprlist IN range_stmt error suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					int level = parser.scopeHash.remove(e.toString()); 
					semanticError("INVALID SYNTAX IN FOR: IGNORING BODY!");
					if(level==0){
	            		parser.arrayMain.add("//INVALID SYNTAX IN FOR: IGNORING BODY;\n");
	                	RESULT = "";
	            	}
					else
						RESULT="//INVALID SYNTAX IN FOR: IGNORING BODY;\n";  
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_stmt ::= FOR exprlist IN testlist error suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					int level = parser.scopeHash.remove(e.toString()); 
					semanticError("INVALID SYNTAX IN FOR: IGNORING BODY!");
					if(level==0){
	            		parser.arrayMain.add("//INVALID SYNTAX IN FOR: IGNORING BODY;\n");
	                	RESULT = "";
	            	}
					else
						RESULT="//INVALID SYNTAX IN FOR: IGNORING BODY;\n"; 
				
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_stmt ::= FOR exprlist IN range_stmt COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					
					RESULT = For_stmt.for_stmt_2(s.toString(),r.toString(),e.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
					
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
				
					RESULT = For_stmt.for_stmt_1(t.toString(),s.toString(),e.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
					
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("for_stmt",60, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // while_stmt ::= WHILE test error suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					int level = parser.scopeHash.remove(t.toString()); 
					semanticError("INVALID CONDITION DEFINED!");
					if(level==0){
	            		parser.arrayMain.add("//INVALID SYNTAX IN WHILE: IGNORING BODY;\n");
	                	RESULT = "";
	            	}
					else
						RESULT="//INVALID SYNTAX IN WHILE: IGNORING BODY;\n";
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("while_stmt",59, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // while_stmt ::= WHILE test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					RESULT = While_stmt.while_stmt_2(t.toString(),s1.toString(),s2.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("while_stmt",59, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // while_stmt ::= WHILE test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					RESULT = While_stmt.while_stmt_1(t.toString(),s.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
										
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("while_stmt",59, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // else_recoursive ::= ELIF test error suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							int level = parser.scopeHash.remove(t.toString()); 
							semanticError("INVALID CONDITION DEFINED!");
							if(level==0){
	                    		parser.arrayMain.add("//INVALID SYNTAX! ELSE WITHOUT COLON: IGNORING BODY;\n");
		                    	RESULT = "";
	                    	}
							else
								RESULT="//INVALID SYNTAX! ELSE WITHOUT COLON: IGNORING BODY;\n";
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",71, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // else_recoursive ::= else_recoursive ELIF test COLON suite 
            {
              Object RESULT =null;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						
							RESULT = If_stmt.if_stmt_elif_2(t.toString(),s.toString(),else_rec.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
						
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",71, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // else_recoursive ::= ELIF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							
							RESULT = If_stmt.if_stmt_elif(t.toString(),s.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
							
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",71, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if_stmt ::= IF test COLON suite ELSE error suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					int level = parser.scopeHash.remove(t.toString()); 
					semanticError("INVALID SINTAX DEFINED!");
					if(level==0){
	            		parser.arrayMain.add("//INVALID SINTAX! IGNORING BODY;\n");
	                	RESULT = "";
	            	}
					else
						RESULT="//INVALID SINTAX! IGNORING BODY;\n";
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // if_stmt ::= IF test error suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					int level = parser.scopeHash.remove(t.toString()); 
					semanticError("INVALID SINTAX DEFINED!");
					if(level==0){
	            		parser.arrayMain.add("//INVALID SINTAX! IGNORING BODY;\n");
	                	RESULT = "";
	            	}
					else
						RESULT="//INVALID SINTAX! IGNORING BODY;\n";
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // if_stmt ::= IF test error suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					int level = parser.scopeHash.remove(t.toString()); 
					semanticError("INVALID SINTAX DEFINED!");
					if(level==0){
	            		parser.arrayMain.add("//INVALID SINTAX! IGNORING BODY;\n");
	                	RESULT = "";
	            	}
					else
						RESULT="//INVALID SINTAX! IGNORING BODY;\n";
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // if_stmt ::= IF test error suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					int level = parser.scopeHash.remove(t.toString()); 
					semanticError("INVALID SINTAX DEFINED!");
					if(level==0){
	            		parser.arrayMain.add("//INVALID SINTAX! IGNORING BODY;\n");
	                	RESULT = "";
	            	}
					else
						RESULT="//INVALID SINTAX! IGNORING BODY;\n";
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // if_stmt ::= IF test COLON suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						 			
					RESULT = If_stmt.if_stmt_4(t.toString(),s1.toString(),else_rec.toString(),s2.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
												
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // if_stmt ::= IF test COLON suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					
					RESULT = If_stmt.if_stmt_3(t.toString(),s.toString(),else_rec.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
												 
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						
					RESULT = If_stmt.if_stmt_2(t.toString(),s1.toString(),s2.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if_stmt ::= IF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						
					RESULT = If_stmt.if_stmt_1(t.toString(),s.toString(),parser.getSymbolTable(),parser.getScopeHash(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
						
				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("if_stmt",58, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // compound_stmt ::= decorated 
            {
              Object RESULT =null;
		 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // compound_stmt ::= classdef 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									
										RESULT = c;  
									
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // compound_stmt ::= funcdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									
										RESULT = f;
									
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // compound_stmt ::= with_stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
										RESULT=w;
										
									
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // compound_stmt ::= try_stmt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									 
										RESULT = t;
									
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
										RESULT = f;
									
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 

							RESULT = w;
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int if_stmtleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int if_stmtright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object if_stmt = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							RESULT = if_stmt;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",57, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // assert_stmt ::= ASSERT testlist COLON testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							
								String t2 = t1.toString().replace("'","\"");
								RESULT = "assert "+t.toString()+": "+t2.toString()+";\n";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("assert_stmt",9, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // assert_stmt ::= ASSERT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								RESULT = "assert "+t.toString()+ ";\n";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("assert_stmt",9, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exec_stmt ::= EXEC expr IN test COMMA test 
            {
              Object RESULT =null;
		
								semanticAlert("EXEC METHOD NOT SUPPORTED YET.");
								RESULT = "//EXEC METHOD NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exec_stmt ::= EXEC expr IN test 
            {
              Object RESULT =null;
		
								semanticAlert("EXEC METHOD NOT SUPPORTED YET.");
								RESULT = "//EXEC METHOD NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exec_stmt ::= EXEC expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								semanticAlert("EXEC METHOD NOT SUPPORTED YET.");
								RESULT = "//EXEC METHOD NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // name_recoursive ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT=n; 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // name_recoursive ::= name_recoursive COMMA NAME 
            {
              Object RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object nr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT=nr+","+n; 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // global_stmt ::= GLOBAL name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							ArrayList<String> tmp = UtilsToSymTable.tokenParameters(n.toString(),",");
							for(int i =0; i<tmp.size();i++){
								parser.symTable.putSymbol(0,tmp.get(i),new SymbolType(tmp.get(i),"Object",null,null,null,0,"DefaultClass"));
								parser.globVar.add(tmp.get(i));
							}
							RESULT="";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("global_stmt",10, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // dot_rec ::= DOT 
            {
              Object RESULT =null;
		RESULT=".";
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dot_rec",46, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // dot_rec ::= DOT dot_rec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		RESULT="."+d;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dot_rec",46, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // import_as_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_name",44, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // import_as_name ::= NAME AS NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_name",44, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // import_as_names ::= import_as_name 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_names",45, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // import_as_names ::= import_as_name COMMA import_as_names 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_as_names",45, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dotted_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_name",41, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dotted_name ::= NAME DOT dotted_name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_name",41, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dotted_as_name ::= dotted_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",42, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dotted_as_name ::= dotted_name AS NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",42, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dotted_as_names ::= dotted_as_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								semanticAlert("(dotted_as_name production)IMPORT NOT SUPPORTED YET.");
								RESULT="//(dotted_as_name production)IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",43, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dotted_as_names ::= dotted_as_names COMMA dotted_as_name 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								semanticAlert("(dotted_as_names production)IMPORT NOT SUPPORTED YET.");
								RESULT="//(dotted_as_names production)IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",43, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // import_stmt ::= FROM DOT dot_rec IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // import_stmt ::= FROM DOT dot_rec IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // import_stmt ::= FROM DOT dot_rec IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // import_stmt ::= FROM dot_rec dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // import_stmt ::= FROM dot_rec dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // import_stmt ::= FROM dot_rec dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // import_stmt ::= FROM dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // import_stmt ::= FROM dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // import_stmt ::= FROM dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // import_stmt ::= IMPORT dotted_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
							semanticAlert("IMPORT NOT SUPPORTED YET.");
							RESULT="//IMPORT NOT SUPPORTED YET.\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // raise_stmt ::= RAISE test COMMA test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								semanticAlert("RAISE NOT SUPPORTED YET.");
								RESULT="//RAISE NOT SUPPORTED YET.\n";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",40, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // raise_stmt ::= RAISE test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								semanticAlert("RAISE NOT SUPPORTED YET.");
								RESULT="//RAISE NOT SUPPORTED YET.\n";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",40, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // raise_stmt ::= RAISE test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
								semanticAlert("RAISE NOT SUPPORTED YET.");
								RESULT="//RAISE NOT SUPPORTED YET.\n";
							
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",40, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "return " + t.toString()+";"; 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("return_stmt",39, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // flow_stmt ::= yield_expr 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							RESULT = y; 
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // flow_stmt ::= raise_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							RESULT = r;
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								
									//CASI:
									//1) x+y+z+.....(tutti dello stesso tipo)
									//2) 3+4+6+1+...(tutte costanti dello stesso tipo)
									//3) chiamata di funzione
									//4)intero*tupla oppure tupla*intero
									//5)tupla+tupla+tupla+.....
									//6)lista+lista
									//7)istanza.attributo......FARE CAST DEL TIPO: return (NomeClasse)istanza.attributo
									//*********************************************************************************
									
									StringBuilder sb=new StringBuilder();
									
									//String returnS=array.get(0);
									String returnS = r.toString().replace("return ", "");
									returnS = returnS.replace(";", "");
									
									
									//Come prima cosa, verifichiamo se sul return c'è l'invocazione di una
									//funzione. Stiamo quindi considerando i seguenti tre casi:
									//1) return istanza.funzione(event param);
									//2) return funzione(paramentri);
									
									//arrayWithoutPoint.get(0) = variabile (se c'è), oppure direttamente funzione
									ArrayList<String> arrayWithoutPoint = UtilsToSymTable.tokenParameters(returnS,".");
									
									//array.get(0) = nome funzione invocata (al 100%)
									//array.get(1) = lista dei paramentri passati alla funzione (potrebbe non esistere, se non passo nulla)
									ArrayList<String> array=UtilsToSymTable.tokenParameters(arrayWithoutPoint.get(arrayWithoutPoint.size()-1),"()");
									
									int numFunctionParam = 0;
									if(array.size()>1){
										ArrayList<String> params = UtilsToSymTable.tokenParameters(array.get(1),",");
										numFunctionParam = params.size();
									}
									
									String className = new String();
									//vedo se arrayWithoutPoint.get(0) è una variabile
									boolean isAVariable = UtilsToSymTable.isExist(arrayWithoutPoint.get(0),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
									//System.out.println("UtilsToSymTable.isExist");
									if(isAVariable==true){
										className = UtilsToSymTable.getVariableType(arrayWithoutPoint.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
									}else{
										className = "DefaultClass";
									}
									
									boolean funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),className, getIndentation(),parser.getSymbolTable());
									//System.out.println("UtilsToSymTable.isCorrectFunctionInvocation -> " +array.get(0)+" - "+String.valueOf(numFunctionParam) +" - "+className);
									if(funcOK){
										if(UtilsToSymTable.functionHasReturn(array.get(0),String.valueOf(numFunctionParam),className, getIndentation(), parser.getSymbolTable())){
											if(arrayWithoutPoint.size()>1)
												sb.append("return (("+className+")"+arrayWithoutPoint.get(0)+")."+arrayWithoutPoint.get(1)+";\n");
											else
												sb.append("return DefaultClass."+returnS+";\n");
	
											SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
											parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
										}else{
											sb.append("//ERROR into Return - The Method invocated has not return value\n");
										}
										
									}
									else{
										//casi:
										//1) funzione che NON esiste -> quindi dare errore
										//2) tutti i possibili tipi di espressioni
										//3) variabile Singola o costante Singola
																			
										ArrayList<String> arrayLP = UtilsToSymTable.tokenParameters(returnS,"+\\-*/\\^&\\|<>=%");

										ArrayList<String> arrayOperator= getOperator(arrayLP, returnS);
					
										String newParameters = returnS.replace("self.","");
					            		ArrayList<String> arrayLP_senza_self = UtilsToSymTable.tokenParameters( newParameters,"+\\-*/\\^&\\|<>=%");
										
										if(arrayOperator==null || arrayOperator.isEmpty()){
										
											//non e' una espressione ma un singolo elemento
											//vedo se e' una variabile -> e se esiste
											//in caso positivo, inserisco "return" nella symTable
											
											String type = CheckType.check(returnS.replace("self.",""));
		
											if(type.equals("Object")){
												boolean flag_s = UtilsToSymTable.isExist(returnS.replace("self.",""),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
												
												if(flag_s==true){
													sb.append("return "+returnS+";\n");
													SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
													parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
												}else{
													sb.append("//ERROR ON RETURN STATEMENT - Variable does't exist\n");
												}
												
											}else if(type.equals("String")){
												//per gestire l'invocazione di funzioni che NON esistono:
												//per gestire oggettoClasse.attributo
												//per gestire Stringhe
																		
												//ArrayList<String> withoutPoint = UtilsToSymTable.tokenParameters(arrayLP.get(0),".");
												ArrayList<String> withoutPoint = UtilsToSymTable.tokenParameters(arrayLP_senza_self.get(0),".");
												if(withoutPoint.size()==2){
													//caso: return p.attr
													//withoutPoint.get(0) = p
													//withoutPoint.get(1) = attr
													//System.out.println("Return - Caso p.attr - singolo elemento");
													//pType sarebbe il nome della classe o null in caso di errore
													String pType = UtilsToSymTable.getVariableType(withoutPoint.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
													if(pType!=null){
														boolean flag_attr = UtilsToSymTable.isCorrectClassAttributeUsed(withoutPoint.get(1),pType,getIndentation(), parser.getSymbolTable());
														sb.append("return (("+pType+")"+withoutPoint.get(0)+")."+withoutPoint.get(1)+";\n");
														SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
														parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
														
													}else{
														sb.append("//ERROR ON RETURN STATEMENT - Variable dosn't exist\n");
													}
												
												}
												else{
													//array=UtilsToSymTable.tokenParameters(arrayLP.get(0),"()");
													array=UtilsToSymTable.tokenParameters(arrayLP_senza_self.get(0),"()");
													String type_per_string = CheckType.check(array.get(0));
													
													if(type_per_string.equals("Object")){
														//possibilmente è una funzione dentro lo stesso scope o una classe ereditata
														ArrayList<String> array2=UtilsToSymTable.tokenParameters(arrayLP_senza_self.get(0),"();");
                                                        
                                                        int numFunctionParam2 = 0;
                                                        if(array2.size()>1){
                                                                ArrayList<String> params = UtilsToSymTable.tokenParameters(array2.get(1),",");
                                                                numFunctionParam2 = params.size();
                                                        }

														 String className2 = null;
					                                     boolean funcOK2 = false;
					                                     if(parser.ereditClassToFunctionInvocation.size()!=0){
					                 						//UtilsToSymTable.printArrayList(parser.ereditClassToFunctionInvocation, "ereditClassToFunctionInvocation");
					                 						for(int qw=0; qw<parser.ereditClassToFunctionInvocation.size(); qw++){
					                 							funcOK2 = UtilsToSymTable.isCorrectFunctionInvocation(array2.get(0),String.valueOf(numFunctionParam),parser.ereditClassToFunctionInvocation.get(qw), getIndentation(),parser.getSymbolTable());
					                                            if(funcOK2){
					                                            	className2 = parser.ereditClassToFunctionInvocation.get(qw); 
					                                            	//System.out.println("parser.ereditClassToFunctionInvocation.get(qw)" + className2);
					                                            	break;
					                                            }
					                 						}
					                                     }else{
					                                        funcOK2 = UtilsToSymTable.isCorrectFunctionInvocation(array2.get(0),String.valueOf(numFunctionParam),null, getIndentation(),parser.getSymbolTable());
					                                     }

					                                     if(funcOK2){
					                                    	 //System.out.println("TROVATO METODO DENTOR RETURN");
					                                    	 
					                                    	 if(UtilsToSymTable.functionHasReturn(array2.get(0),String.valueOf(numFunctionParam),className2, getIndentation(), parser.getSymbolTable())){
					                                    		sb.append("return "+returnS+";\n");
																SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
																parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
                                                      		}else{
                                                      			sb.append("//ERROR ON RETURN STATEMENT - The method invocated has not return value\n");
                                                      		}
					                                     }else{
					                                    	 sb.append("//ERROR ON RETURN STATEMENT - Function does't exist\n");
					                                     }
														
													}else{
														//System.out.println("Return - Semplice Stringa - singolo elemento");
														sb.append("return "+returnS+";\n");
														SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
														parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
													}
												}
												
											}else if(type.equals("Tupla") || type.equals("GenericList") || type.equals("PDictionary")){
												sb.append("return "+"(new "+type+"(\""+returnS+"\"));\n");
												SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
												parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);

											}else{
												//System.out.println("Return - Tutto il resto - singolo elemento");
												sb.append("return "+returnS+";\n");
												SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
												parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
											}
										}
										else{
											//se sono qui, sicuro devo gestire una espressione											

											StringBuilder sb2 = new StringBuilder();
											
											boolean thereIsIstanceClass = false;
											ArrayList<Integer> positionIstanceClass = new ArrayList<Integer>();
											
											for(int w = 0; w<arrayLP.size(); w++){
												
												String ty = CheckType.check(arrayLP.get(w));
												
												if(ty.equals("Object")){
													String typeOfObject = UtilsToSymTable.getVariableType(arrayLP_senza_self.get(w),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
													
													if(typeOfObject!=null){
														if(!typeOfObject.equals("PDictionary")){
															String value = UtilsToSymTable.getValue(arrayLP_senza_self.get(w),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
															sb2.append(value);
															if(w!=arrayOperator.size()){
																sb2.append(arrayOperator.get(w));
															}
														}else{
															ty="ERROR";
															sb.append("//ERROR IN RETURN STATEMENT - Operation From Dictionary not allowed\n");
															break;
														}
													}else{
														//qui ho typeOfObject == null
														ty="ERROR";
														sb.append("//ERROR IN RETURN STATEMENT - Variable not delcared\n");
														break;
													}
												}else if(ty.equals("String")){
						
													ArrayList<String> withoutPoint = UtilsToSymTable.tokenParameters(arrayLP_senza_self.get(w),".");
													if(withoutPoint.size()==2){
														//caso: return p.attr+7
														//withoutPoint.get(0) = p
														//withoutPoint.get(1) = attr
														
														//pType sarebbe il nome della classe o null in caso di errore
														String pType = UtilsToSymTable.getVariableType(withoutPoint.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
														if(pType!=null){
															String nameAttr = arrayLP_senza_self.get(w) + "#" + pType;
															String value = UtilsToSymTable.getValue(nameAttr,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
															thereIsIstanceClass = true;
															positionIstanceClass.add(w);
															
															sb2.append(value);
															if(w!=arrayOperator.size()){
																sb2.append(arrayOperator.get(w));
															} 
															
														}else{
															sb.append("//ERROR ON RETURN STATEMENT - Variable dosn't exist\n");
														}
													}else{
													
														if(arrayLP.get(w).contains("self.")){
															//contiene self
															//System.out.println("contiene self.");
															
															sb2.append(arrayLP_senza_self.get(w));
															if(w!=arrayOperator.size()){
																sb2.append(arrayOperator.get(w));
															}
															
														}else{
															array=UtilsToSymTable.tokenParameters(arrayLP_senza_self.get(w),"()");
															String type_per_string = CheckType.check(array.get(0));
															
															if(type_per_string.equals("Object")){
																sb.append("//ERROR ON RETURN STATEMENT - Function does't exist\n");
															}else{
																sb2.append(arrayLP.get(w));
																if(w!=arrayOperator.size()){
																	sb2.append(arrayOperator.get(w));
																}
															}
														}
													}
					
												}else{
													sb2.append(arrayLP.get(w));
													if(w!=arrayOperator.size()){
														sb2.append(arrayOperator.get(w));
													}
												}
											}//fine for "w"
											
											//System.out.println("-- SB2 --- "+sb2.toString());
											
											if(sb2.toString().contains("[") && sb2.toString().contains("]") && sb2.toString().contains(",")){
												//sicuro GenericList
												sb.append("Object tmp_genericList = new GenericList();\n");
												sb.append("return "+"((GenericList)tmp_genericList).resultOperationsGenericList(\""+sb2.toString()+"\");\n");
												SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
												parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);	
											}else if(sb2.toString().contains("(") && sb2.toString().contains(")") && sb2.toString().contains(",")){
												//sicuro Tupla
												sb.append("Object tmp_Tupla = new Tupla();\n");
												sb.append("return "+"((Tupla)tmp_Tupla).resultOperationsTupla(\""+sb2.toString()+"\");\n");
												SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
												parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
											}else{
												
												String ty_pe=new String();
												ArrayList<String> arrayName = UtilsToSymTable.tokenParameters(sb2.toString(),"+\\-*/\\^&\\|<>=%");
												ArrayList<String> arrayNameOperator= getOperator(arrayName, sb2.toString());
												
												for(int k = 0; k<arrayName.size(); k++){
													//System.out.println("arrayName.get(k) "+arrayName.get(k));
													
													String tmpTYPE = CheckType.check(arrayName.get(k));
													
													//System.out.println("tmpTYPE "+tmpTYPE);
													
													if(tmpTYPE.equals("Object")){
														//System.out.println(" DENTRO OBJECT");
														
														String variableTYPE = UtilsToSymTable.getVariableType(arrayName.get(k),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
														
														//System.out.println("variableTYPE "+variableTYPE);
														if(variableTYPE!=null){
															if(!variableTYPE.equals("Object")){
																if(!ty_pe.equals(variableTYPE) && ty_pe.length()!=0)
																	ty_pe = "ERROR";
																else
																	ty_pe = variableTYPE;
															}
														}
													}else{
														if(!ty_pe.equals(tmpTYPE) && ty_pe.length()!=0)
															ty_pe = "ERROR";
														else
															ty_pe = tmpTYPE;
													}
												}//fine for "q"		
												
												if(ty_pe.equals("ERROR")){
													sb.append("//ERROR IN RETURN STATEMENT - Variable Types are different\n");
												}else{
													if(thereIsIstanceClass==false){
														//System.out.println("alla fine del return: " + returnS + " type_ " + ty_pe);
														sb.append("return ");
														boolean isNegativeNumber = false;
														if( newParameters.charAt(0) == '-'){
															sb.append(newParameters.charAt(0));
															isNegativeNumber = true;
														}
														for(int g=0; g<arrayLP_senza_self.size(); g++){
															sb.append( UtilsToSymTable.getFormattedStringToCastInRETURN(ty_pe,arrayLP.get(g)) );
															if(g!=arrayOperator.size() && isNegativeNumber==false)
																sb.append(arrayOperator.get(g));
															else if(g<arrayOperator.size()-1 && isNegativeNumber==true)
																sb.append(arrayOperator.get(g+1));
														}
														sb.append(";\n");
														SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
														parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
													}else{
														//c'è almeno un p.attr
														//la posizione in cui si trova p.att è data da positionIstanceClass.get(x)
														
														//System.out.println("alla fine del return: ThereIsIstanceClass==true");
														
														sb.append("return ");
														boolean isNegativeNumber = false;
														if( newParameters.charAt(0) == '-'){
															sb.append(newParameters.charAt(0));
															isNegativeNumber = true;
														}
														for(int f=0;f<arrayLP.size();f++){
															boolean isPAttr = false; 
															for(int d=0;d<positionIstanceClass.size();d++){
																if(positionIstanceClass.get(d)==f){
																	isPAttr = true;
																	//devo scrivere -> ((classe)p).attr
																	ArrayList<String> withoutPoint = UtilsToSymTable.tokenParameters(arrayLP_senza_self.get(f),".");
																	String className3 = UtilsToSymTable.getVariableType(withoutPoint.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
																	sb.append("(("+ty_pe+")(("+className3+")"+withoutPoint.get(0)+")."+withoutPoint.get(1)+")");
																	if(f!=arrayOperator.size() && isNegativeNumber==false)
																		sb.append(arrayOperator.get(f));
																	else if(f<arrayOperator.size()-1 && isNegativeNumber==true)
																		sb.append(arrayOperator.get(f+1));
																}
															}//for per d
															
															if(isPAttr==false){
																sb.append(arrayLP.get(f));
																if(f!=arrayOperator.size() && isNegativeNumber==false)
																	sb.append(arrayOperator.get(f));
																else if(f<arrayOperator.size()-1 && isNegativeNumber==true)
																	sb.append(arrayOperator.get(f+1));
															}
															
														}//fine fo per f
														
														sb.append(";\n");
														
														SymbolType symbolReturn=new SymbolType("return","Object",null,null,null,getIndentation(),null);
														parser.symTable.putSymbol(getIndentation(),"return",symbolReturn);
														
													}
												}
											}
										} //fine else per espressioni
									} //fine else che ci dice che non abbiamo funzioni accanto al return
									 RESULT=sb.toString();
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;
		 
									RESULT="continue;\n";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;
		 
									RESULT="break;\n";
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // del_stmt ::= DEL exprlist 
            {
              Object RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								RESULT="del "+explist;
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("del_stmt",6, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // range_stmt ::= RANGE LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
								
								
								StringBuilder rangeResult = new StringBuilder();
								
								String type1 = CheckType.check(e1.toString());
								String type2 = CheckType.check(e2.toString());
								String type3 = CheckType.check(e3.toString());
								
								if(type1.equals("Integer")){
									rangeResult.append(e1.toString()+"#");
								}else if(type1.equals("String")){
									String len = isLEN(e1.toString(),getIndentation());
									if(len!=null)
										rangeResult.append(len+"#");
									else
										rangeResult.append("//ERROR - range function not defined");
								}
								
								
								if(type2.equals("Integer")){
									rangeResult.append(e2.toString()+"#");
								}else if(type2.equals("String")){
									String len = isLEN(e2.toString(),getIndentation());
									if(len!=null)
										rangeResult.append(len+"#");
									else
										rangeResult.append("//ERROR - range function not defined");
								}
								
								
								if(type3.equals("Integer")){
									rangeResult.append(e3.toString());
								}else if(type3.equals("String")){
									String len = isLEN(e3.toString(),getIndentation());
									if(len!=null)
										rangeResult.append(len);
									else
										rangeResult.append("//ERROR - range function not defined");
								}

								RESULT = rangeResult.toString();
								
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("range_stmt",36, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-7)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // range_stmt ::= RANGE LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
								
								
								StringBuilder rangeResult = new StringBuilder();
								
								String type1 = CheckType.check(e1.toString());
								String type2 = CheckType.check(e2.toString());
								
								if(type1.equals("Integer")){
									rangeResult.append(e1.toString()+"#");
								}else if(type1.equals("String")){
									String len = isLEN(e1.toString(),getIndentation());
									if(len!=null)
										rangeResult.append(len+"#");
									else
										rangeResult.append("//ERROR - range function not defined");
								}
								
								
								if(type2.equals("Integer")){
									rangeResult.append(e2.toString());
								}else if(type2.equals("String")){
									String len = isLEN(e2.toString(),getIndentation());
									if(len!=null)
										rangeResult.append(len);
									else
										rangeResult.append("//ERROR - range function not defined");
								}

								RESULT = rangeResult.toString();
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("range_stmt",36, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // range_stmt ::= RANGE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
								
								StringBuilder rangeResult = new StringBuilder();
								
								String type = CheckType.check(e1.toString());
								if(type.equals("Integer")){
									rangeResult.append("0#");
									rangeResult.append(e1.toString());
								}else if(type.equals("String")){
									//devo verificare che si tratta di una funzione
									//ma noi gestiamo solo il caso sia una len(...)
									String len = isLEN(e1.toString(),getIndentation());
									if(len!=null){
										//è len
										rangeResult.append("0#");
										rangeResult.append(len);
									}else
										rangeResult.append("//ERROR - range function not defined");
								}

								RESULT = rangeResult.toString();
								
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("range_stmt",36, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print_stmt ::= PRINT RSHIFT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								String tab=" ";
								for(int i=0; i<getIndentation(); i++){
									tab+="\t";
								}
							    String message="PRINT: CANNOT EXECUTE THIS INSTRUCTION\n"; 
							    semanticAlert(message);
							    RESULT= tab+"//ERROR ON PRINT: AUTO GENERATE COMMENT\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print_stmt ::= PRINT testlist COMMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
								String tab=" ";
								for(int i=0; i<getIndentation(); i++){
									tab+="\t";
								}
								RESULT = tab+ Print_stmt.print_stmt(t.toString(), getIndentation(), parser.getSymbolTable(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_stmt ::= PRINT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								String tab=" ";
								for(int i=0; i<getIndentation(); i++){
									tab+="\t";
								}
							    RESULT = tab + Print_stmt.print_stmt(t.toString(), getIndentation(), parser.getSymbolTable(),parser.arrayMain, parser.ereditClassToFunctionInvocation);
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_stmt ::= PRINT 
            {
              Object RESULT =null;
		 	
								String tab=" ";
								for(int i=0; i<getIndentation(); i++){
									tab+="\t";
								}
								RESULT= tab+"System.out.println(\"\");\n";
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // augassign ::= LSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // augassign ::= RSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // augassign ::= EXPEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // augassign ::= OREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // augassign ::= ANDEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // augassign ::= MODEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // augassign ::= DIVEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // augassign ::= MULTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // augassign ::= MINUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // augassign ::= PLUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
						RESULT=op;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("augassign",37, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_stmt ::= testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		         
                    
/*                      
                        //l'ultimo parametro dell'ArrayList "parameters" puo' essere
                        //1) o un singolo valore [es:un numero, una stringa, etc...]
                        //2) o una tupla [es: (1,2,3,4,'ciao')] NB: anche di tipi diversi! :O
                        //3) o una lista [es: [1,2,"STR"]
                        //4) o un dizionario [es: {"ca":1, "sa":2} ]
                        //5) o una espressione....
                        //6) assegnazione del tipo p.x=y
                        //7) x=metodo()
                        //8) x=altraIstanza.attributo;
                        //9) p.attributo=x;     
                        //es: x = 3*4*(1,2) + y + y*3 -> risultato -> Object x = new Tupla();
                                                                                        //x.result("3*4*(1,2) + (4,5) + (4,5)*3");
                        //es: y = 3*2,2 -> definizio TUPLA (6,2) 
                        //es: c = (1,2) + y -> result
                        //es: c = y[1:2]
                        //es: x = 5*j -> con j=tupla o lista o Integer
                        //es: v = c[2] -> con c Tupla o Lista
                        //es: d['key'] = 34.78 -> con d dizionario
                        //es: v = x (con x Argomento di una Funzione) -> Object v = x;
                        //es: v = x + y (con x e y Argomenti di una Funzione) -> Object v = x.toString() + y.toString();
                        //es: x,y,z = t (con t tupla di dimensione 3)
                        //es: t = 1,2,3 -> t � tupla (cio� si possono anche NON mettere le parentesi tonde)
                        //es: ANNIDAMENTO! :O
                        //es: v = (1,2,x) -> Object v = new Tupla("1,2,x");
                        //es: c = {4,4} -> � un set
                        //es: lista = [1,2,3,4]
                        //es: k = set([1,2,3,2]) -> � un set
*/                      
                    
					String tab=" ";
			 		for(int i=0; i<getIndentation(); i++){
						tab+="\t";
					}
					                    
                    StringBuilder sb = new StringBuilder();

					
					String all = t.toString() + a.toString();
					String newParameters = all.replace("self.","");
					
                    ArrayList<String> parameters_with_self=UtilsToSymTable.tokenParameters( t.toString() + a.toString(), "=");
            		ArrayList<String> parameters=UtilsToSymTable.tokenParameters( newParameters, "=");
                    
                    String lastParameters = parameters.get(parameters.size()-1);

                    ArrayList<String> className = UtilsToSymTable.tokenParameters(lastParameters,"();");
                    
                    boolean isClass=UtilsToSymTable.isExistClass(className.get(0),getIndentation(), parser.getSymbolTable());
                    
                    if(isClass){
                    	//System.out.println("CLASSE TROVATA! " );
                    		boolean istanzaOK = true;
                    		
                            int numeroDiParam=0;
                            
                            if(className.size()>1){
                                    ArrayList<String> paramClass = UtilsToSymTable.tokenParameters(className.get(1),",");
                                    
                                    String constructor = className.get(0)+"#"+String.valueOf(paramClass.size())+"#"+className.get(0);
                                    //System.out.println("constructor: " +constructor );
                                    boolean isCorrectNumberParameters = UtilsToSymTable.isExistFunction(constructor,getIndentation(), parser.getSymbolTable());
                                    
                                    if(isCorrectNumberParameters==false){
                                    	istanzaOK = false; //is an ERROR
                                    }
                                    else{
                                        numeroDiParam=paramClass.size();
                                    }
                            }else{
                            	String constructor = className.get(0)+"#0#"+className.get(0);
                            	boolean isCorrectNumberParameters = UtilsToSymTable.isExistFunction(constructor,getIndentation(), parser.getSymbolTable());
                                
                                if(isCorrectNumberParameters==false){
                                	istanzaOK = false; //is an ERROR
                                }
                            }

                        
                            if(istanzaOK){
                            		//System.out.println("istanzaOK " );
                                    //ciclo for usato per assegnazione multipla
                                    for(int i = 0; i<parameters.size()-1;i++){
                                    		//className.get(1) = contiene i parametri dentro le (...)
                                    		//verifico che tutti i parametri passati al costruttore esistono
                                    		boolean isOKOK = true;
                                    		if(className.size()>1){
                                    			isOKOK = UtilsToSymTable.isCorrectListOfParametersInsideFunction(className.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                    		}
                                    		
                                    		if(isOKOK){
	                                            boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
	                                    
	                                            sb.append(tab);
	                                            if(flag==false){
	                                            	sb.append("Object ");
	                                            }
	                                    
	                                            sb.append(parameters.get(i));
	                                            sb.append(" = ");
	                                            sb.append("new "+className.get(0));
	                                            
	                                            if(numeroDiParam==0){
	                                               sb.append("();\n");
	                                            }
	                                            else{
	                                            	String allParamets = UtilsToSymTable.getStringBuilderOfParametersInsideFunction(className.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
	                                                sb.append("("+allParamets+");\n");
	                                            }
	                                            
	                                            parser.symTable.putSymbol(getIndentation(),parameters.get(i),new SymbolType(parameters.get(i),className.get(0),null,null,null,getIndentation(),null));
	                                            parser.symTable.setIstanceAttribute(parameters.get(i),className.get(0),getIndentation());
                                    
                                    		}
                                    		else
                                    			 sb.append(tab+"//ERROR IN METHOD INVOCATION: NUMERO DI PARAMETRI DEL COSTRUTTORE SBAGLIATI\n");
                                    }
                            }
                            else
                                    sb.append(tab+"//ERROR IN METHOD INVOCATION: NUMBER OF PARAMETERS MISMATCH\n");     
                    
                    
                    }else if(lastParameters.equals("[]")){
                    	//System.out.println("GENERIC-LIST-VUOTO");
                    	//per ogni parametro a sinistra (NB: l'assegnazione potrebbe essere ricorsiva)
                        for(int i = 0; i<parameters.size()-1;i++){
                        	StringBuilder sb2 = getTypeOfAssignator(parameters.get(i));
                        	ArrayList<String> splitStringBuilder = UtilsToSymTable.tokenParameters(sb2.toString(),"#");
                        	sb.append(tab);
                        	sb.append(UtilsToSymTable.getStringBuilderModelsEmpty("GenericList", splitStringBuilder, parameters_with_self.get(i), getIndentation(), parser.symTable, parser.ereditClassToFunctionInvocation));
                        }
                    }else if(lastParameters.equals("()")){
                    	//System.out.println("TUPLA-VUOATA");
                    	for(int i = 0; i<parameters.size()-1;i++){
                    		StringBuilder sb2 = getTypeOfAssignator(parameters.get(i));
                    		ArrayList<String> splitStringBuilder = UtilsToSymTable.tokenParameters(sb2.toString(),"#");
                    		sb.append(tab);
                    		sb.append(UtilsToSymTable.getStringBuilderModelsEmpty("Tupla", splitStringBuilder, parameters_with_self.get(i), getIndentation(), parser.symTable, parser.ereditClassToFunctionInvocation));
                        }
                    	
                    }else if(lastParameters.equals("{}")){
                    	//System.out.println("PDICTIONARY-VUOTO");
                    	for(int i = 0; i<parameters.size()-1;i++){
                    		StringBuilder sb2 = getTypeOfAssignator(parameters.get(i));
                    		ArrayList<String> splitStringBuilder = UtilsToSymTable.tokenParameters(sb2.toString(),"#");
                    		sb.append(tab);
                    		sb.append(UtilsToSymTable.getStringBuilderModelsEmpty("PDictionary", splitStringBuilder, parameters_with_self.get(i), getIndentation(), parser.symTable, parser.ereditClassToFunctionInvocation));
                        }
                    	
                    }else{
                            //per ogni parametro a sinistra (NB: l'assegnazione potrebbe essere ricorsiva)
                            for(int i = 0; i<parameters.size()-1;i++){
                            		
                            		
                                    StringBuilder sb2 = getTypeOfAssignator(parameters.get(i));
                                    
                                    //System.out.println("getTypeOfAssignator: "+sb2.toString());
                                    
                                    if(sb2!=null){
                                            ArrayList<String> splitStringBuilder = UtilsToSymTable.tokenParameters(sb2.toString(),"#");
                                            
                                            if(splitStringBuilder.get(0).equals("ERROR")){
                                                    
                                                    sb.append(tab+"//ERROR IN VARIABLE DEFINITION: AUTO GENERATE CODE\n");
                                                    
                                            }else if(splitStringBuilder.get(0).equals("TUPLA-UNPACKING")){
                                            
                                                    //in questo caso lastParameters deve essere per forza una TUPLA
                                                    //che contiene un numero di elementi pari a ci� che c'� a sinistra
                                                    //dell'operatore assegnazione
                                                    
                                                    //x,y,z = t
                                                    
                                                    ArrayList<String> values = UtilsToSymTable.getTuplaValue(lastParameters,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                    
                                                    if(values!=null){
                                                    
                                                    		ArrayList<String> parametersSX_with_self=UtilsToSymTable.tokenParameters( parameters_with_self.get(i), ",");
                                                        
                                                    		if(parametersSX_with_self.size()==values.size()){
	                                                            for(int x = 0; x<values.size(); x++){
	                                                                    boolean found = UtilsToSymTable.isExist(splitStringBuilder.get(x+1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);                                                                    
	                                                                    
	                                                                    if(found){
	                                                                            //sb.append(splitStringBuilder.get(x+1));
	                                                                    		sb.append(tab);
	                                                                    		sb.append(parametersSX_with_self.get(x));
	                                                                            sb.append("=");
	                                                                            sb.append(values.get(x)+";\n");
	                                                                    }else{
	                                                                            //Devo mettere "Object" davanti alla variabile
	                                                                            //Object x = value(x);
	                                                                    		sb.append(tab);
	                                                                            sb.append("Object ");
	                                                                            //sb.append(splitStringBuilder.get(x+1));
	                                                                            sb.append(parametersSX_with_self.get(x));
	                                                                            sb.append("=");
	                                                                            sb.append(values.get(x)+";\n");
	                                                                    }
	                                                                    
	                                                                    //parser.symTable.putSymbol(getIndentation(),splitStringBuilder.get(x+1),new SymbolType(splitStringBuilder.get(x+1),CheckType.check(values.get(x)),values.get(x),null,null,getIndentation(),null));
	                                                                    parser.symTable.putSymbol(getIndentation(),parametersSX_with_self.get(x),new SymbolType(parametersSX_with_self.get(x),CheckType.check(values.get(x)),values.get(x),null,null,getIndentation(),null));
	                                                                    
	                                                            }
                                                    		}else{
                                                    			sb.append(tab+"//ERROR IN VARIABLE DEFINITION on TUPLA UNPUCKING - Different numbers of parameters\n");
                                                    		}
                                                            
                                                    }else{
                                                            sb.append(tab+"//ERROR IN VARIABLE DEFINITION: AUTO GENERATE CODE\n");
                                                    }
                                                    
                                            
                                            }else if(splitStringBuilder.get(0).equals("DICTIONARY-ASSIGNAMENT")){
                                            
                                            
                                                    //**** gestione chiave... se e' una stringa: ****
                                                                    
                                                    String checkKey = CheckType.check(splitStringBuilder.get(2));
                                                    String newKey = new String();
                                                    if(checkKey.equals("String"))
                                                            newKey = formatString(splitStringBuilder.get(2));
                                                    else
                                                            newKey = splitStringBuilder.get(2);
                                                    
                                                    //***** fine gestione key ***********************
                                                    
                                                    
                                                    
                                                    //**** gestione Values... se e' una stringa: ****
                                                    
                                                    String checkValue = CheckType.check(lastParameters);
                                                    String newValue = new String();
                                                    if(checkValue.equals("String"))
                                                            newValue = formatString(lastParameters);
                                                    else
                                                            newValue = lastParameters;
                                                    
                                                    //***** fine gestione Value ***********************
                                            
                                                    
                                                    //ho la certezza che si tratta di un inserimento di un nuovo elemento
                                                    //dentro un dizionario... devo verificare per� che la variabile
                                                    //coinvolta a sinitra sia un dizionario
                                                    
                                                    boolean found = UtilsToSymTable.isExist(splitStringBuilder.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                    if(found){
                                                            //se esiste -> vedo se � gi� di tipo dizionario
                                                            String type = UtilsToSymTable.getVariableType(splitStringBuilder.get(1),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                            
                                                            if(type.equals("PDictionary")){
                                                            		sb.append(tab);
                                                                    sb.append("((PDictionary)"+splitStringBuilder.get(1)+")");
                                                                    sb.append(".insertNewObject("+newKey+","+newValue+");\n");
                                                                    
                                                            }else{
                                                            		sb.append(tab);
                                                                    sb.append( splitStringBuilder.get(1) + " = new PDictionary();\n");
                                                                    sb.append(tab);
                                                                    sb.append("((PDictionary)"+splitStringBuilder.get(1)+")");
                                                                    sb.append(".insertNewObject("+newKey+","+newValue+");\n");
                                                                    
                                                                    //sb.append(".insertNewObject("+splitStringBuilder.get(2)+","+lastParameters+");\n");
                                                                    
                                                            }
                                                            
                                                    }else{
                                                    		sb.append(tab);
                                                            sb.append("Object "+ splitStringBuilder.get(1) + " = new PDictionary();\n");
                                                            sb.append(tab);
                                                            sb.append("((PDictionary)"+splitStringBuilder.get(1)+")");
                                                            sb.append(".insertNewObject("+newKey+","+newValue+");\n");
                                                    }
                                                    
                                                    //String newValueToInsertInToSymTable = UtilsToSymTable.getValueModels("insertNewObject",splitStringBuilder.get(2),lastParameters,splitStringBuilder.get(1),getIndentation(), parser.getSymbolTable());
                                                    
                                                    String newValueToInsertInToSymTable = UtilsToSymTable.getValueModels("insertNewObject",newKey,newValue,splitStringBuilder.get(1),getIndentation(), parser.getSymbolTable());
                                                    
                                                    parser.symTable.putSymbol(getIndentation(),splitStringBuilder.get(1),new SymbolType(splitStringBuilder.get(1),"PDictionary",newValueToInsertInToSymTable,null,null,getIndentation(),null));
                                            
                                                    
                                            }else if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN") || splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")){
                                                    
                                                    //non posso dire nulla si che tipo di operazione si tratta
                                                    //devo vedere cosa e' contenuto dentro lastParameters
                                            	
                                            	String isSUM = UtilsToSymTable.isSumTuplaOrGenericList(parameters.get(i),lastParameters, splitStringBuilder, getIndentation(), parser.symTable, parser.ereditClassToFunctionInvocation);
                                            	if(!isSUM.equals("ERROR")){
                                            		sb.append(isSUM);
                                            	}
                                            	else{
                                            	String lenFunction = isLEN(lastParameters, getIndentation());
                                        		if(lenFunction!=null){
                                        			//sicuro ho una la funzione LEN
                                        			//System.out.println("LEN-FUNCTION: "+ lenFunction);

                                        			if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                        				
                                        				boolean flag = UtilsToSymTable.isExist(lastParameters, getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                        				sb.append(tab);
                                        				if(!flag)
                                        					sb.append("Object ");
                                        				//sb.append(parameters.get(i));
                                        				//parameters_with_self
                                        				sb.append(parameters_with_self.get(i));
                                        				sb.append(" = ");
                                        				sb.append(lenFunction);
                                        				sb.append(";\n");
                                        				
                                                        SymbolType symbol=new SymbolType(parameters.get(i),"Integer","0",null,null,getIndentation(),null);
                                                        parser.symTable.putSymbol(getIndentation(),parameters.get(i),symbol);
	                                                }else{
                                                        //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
                                                        String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                        
                                                        boolean flag = UtilsToSymTable.isExist(newNameVariable, getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                        sb.append(tab);
                                                        if(!flag)
                                        					sb.append("Object ");
                                        				ArrayList<String> arraySenzaPunti = UtilsToSymTable.tokenParameters(parameters.get(i),".");
                                        				String parameterSX = getStringBuilderForStringWithPoint(arraySenzaPunti.get(0), arraySenzaPunti.get(1), getIndentation());
                                        				//System.out.println("isLEN: parameterSX: " + parameterSX);
                                        				sb.append(parameterSX);
                                        				sb.append(" = ");
                                        				sb.append(lenFunction);
                                        				sb.append(";\n");
                                        				
                                                        SymbolType symbol=new SymbolType(parameters.get(i),"Integer","0",null,null,getIndentation(),null);
                                                        parser.symTable.putSymbol(getIndentation(),newNameVariable,symbol);
	                                                }

                                        		
                                        		}else{

                                                    ArrayList<String> arrayLP = UtilsToSymTable.tokenParameters(lastParameters,"+\\-*/\\^&\\|;<>=%");
                                                    
                                                    ArrayList<String> arrayLP_with_self = UtilsToSymTable.tokenParameters(parameters_with_self.get(parameters_with_self.size()-1),"+\\-*/\\^&\\|;<>=%");
                                                    
                                                    //UtilsToSymTable.printArrayList(arrayLP, "arrayLP");
                                                    
                                                    boolean isNegativeTupListDict = UtilsToSymTable.isSubTupLisDictNEGATIVEindex(lastParameters,getIndentation(), parser.symTable, parser.ereditClassToFunctionInvocation);
                                                    
                                                    if(arrayLP.size()>1 && !isNegativeTupListDict){
                                                            //abbiamo a che fare con una espressione

                                                            ArrayList<String> arrayOperator= getOperator(arrayLP, lastParameters);
                                                    
                                                            StringBuilder sb7 = new StringBuilder();
                                                            
                                                            boolean vaiAvanti = true;
                                                            
                                                            for(int w = 0; w<arrayLP.size(); w++){
                                                                    
                                                                    String ty = CheckType.check(arrayLP.get(w));
                                                                    
                                                                    if(ty.equals("Object")){
                                                                            String typeOfObject = UtilsToSymTable.getVariableType(arrayLP.get(w),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                            if(typeOfObject!=null){
                                                                                    if(!typeOfObject.equals("PDictionary")){
                                                                                            String value = UtilsToSymTable.getValue(arrayLP.get(w),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                            if(value==null){
                                                                                                    sb7.append(arrayLP.get(w));
                                                                                                    if(w!=arrayOperator.size()){
                                                                                                            sb7.append(arrayOperator.get(w));
                                                                                                    }
                                                                                            }else{
                                                                                                    sb7.append(value);
                                                                                                    if(w!=arrayOperator.size()){
                                                                                                            sb7.append(arrayOperator.get(w));
                                                                                                    }
                                                                                            }
                                                                                    }else{
                                                                                            sb.append(tab+"//ERROR IN VARIABLE DEFINITION: e' un PDictionary\n");
                                                                                            //break;
                                                                                    }
                                                                            }else{
                                                                                    //qui ho typeOfObject == null
                                                                                    sb.append(tab+"//ERROR IN VARIABLE DEFINITION: TYPE OBJECT NULL\n");
                                                                                    vaiAvanti = false;
                                                                            }
                                                                    }
                                                                    else{
                                                                            sb7.append(arrayLP.get(w));
                                                                            if(w!=arrayOperator.size()){
                                                                                    sb7.append(arrayOperator.get(w));
                                                                            }
                                                                    }
                                                            }
                                                            
                                                            //System.out.println("--------StringBuilder7: "+sb7.toString());
                                                            
                                                            if(sb7.toString().contains(",") && vaiAvanti==true){
	                                                            	String tmpSB7 = sb7.toString().replace("\"","\\\"");
	                                                        		sb7.delete(0,sb7.length());
	                                                        		sb7.append(tmpSB7);
                                                                    if(sb7.toString().contains("[") && sb7.toString().contains("]")){
                                                                            //sicuro generic list
                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                                    //parameters_with_self
                                                                            		StringBuilder sb8 = getStringBuilderResultOperationTuplaOrGenericList("GenericList",parameters_with_self.get(i),sb7.toString(),getIndentation()); 
                                                                                
                                                                            		//System.out.println("--------StringBuilder8: "+sb8.toString());
                                                                            		sb.append(tab);
                                                                            		sb.append(sb8.toString());
                                                                                    
                                                                                    String newValue = UtilsToSymTable.getValueModels("resultOperationsGenericList",null,sb7.toString(),null,-1, parser.getSymbolTable());
                                                                                    
                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),"GenericList",newValue,null,null,getIndentation(),null));
                                                                            }else{
                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT") 
                                                                                    //es: ((nomeClasse)p).attr
                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
                                                                                    sb.append(tab);
                                                                                    sb.append(parameterSX);
                                                                                    sb.append(" = ");
                                                                                    sb.append("new GenericList();\n");
                                                                                    sb.append(tab);
                                                                                    sb.append("((GenericList)" + parameterSX +").resultOperationsGenericList(\""+sb7.toString()+"\");\n");
                                                                                    
                                                                                    String newValue = UtilsToSymTable.getValueModels("resultOperationsGenericList",null,sb7.toString(),null,-1, parser.getSymbolTable());
                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable, new SymbolType(parameters.get(i),"GenericList",newValue,null,null,getIndentation(),null));
                                                                                    
                                                                            }
                                                                            
                                                                    }else{
                                                                            //sicuro tupla
                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                            		//parameters_with_self
                                                                            		//StringBuilder sb8 = getStringBuilderResultOperationTuplaOrGenericList("Tupla",parameters.get(i),sb7.toString(),getIndentation());
                                                                            		StringBuilder sb8 = getStringBuilderResultOperationTuplaOrGenericList("Tupla",parameters_with_self.get(i),sb7.toString(),getIndentation());
                                                                                    
                                                                            		//System.out.println("--------StringBuilder8: "+sb8.toString());
                                                                            		sb.append(tab);
                                                                            		sb.append(sb8.toString());
                                                                                    
                                                                                    String newValue = UtilsToSymTable.getValueModels("resultOperationsTupla",null,sb7.toString(),null,-1, parser.getSymbolTable());
                                                                                    
                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),"Tupla",newValue,null,null,getIndentation(),null));
                                                                            }else{
                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT") 
                                                                                    //es: ((nomeClasse)p).attr
                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
                                                                                    sb.append(tab);
                                                                                    sb.append(parameterSX);
                                                                                    sb.append(" = ");
                                                                                    sb.append("new Tupla();\n");
                                                                                    sb.append(tab);
                                                                                    sb.append("((Tupla)" + parameterSX +").resultOperationsTupla(\""+sb7.toString()+"\");\n");
                                                                                    
                                                                                    String newValue = UtilsToSymTable.getValueModels("resultOperationsTupla",null,sb7.toString(),null,-1, parser.getSymbolTable());
                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable, new SymbolType(parameters.get(i),"Tupla",newValue,null,null,getIndentation(),null));
                                                                            
                                                                            }
                                                                    }
                                                                            
                                                            }else if(vaiAvanti==true){
                                                                    //verificare che sono tutti dello stesso tipo!
                                                                    ArrayList<String> arrayFromSb7 = UtilsToSymTable.tokenParameters(sb7.toString(),"+\\-*/\\^&\\|;<>=%");
                                                                    //UtilsToSymTable.printArrayList(arrayFromSb7, "arrayFromSb7");
                                                                    
                                                                    ArrayList<String> arrayOperator2 = getOperator(arrayFromSb7,sb7.toString());
                                                                    //UtilsToSymTable.printArrayList(arrayOperator2, "arrayOperator2");
                                                                    
                                                                    String ty_pe = null;
                                                                    
                                                                    boolean thereIsAnObject = false;
                                                                    
                                                                    for(int u = 0; u<arrayFromSb7.size(); u++){
                                                                    
                                                                            //System.out.println("arrayFromSb7.get(u):"+ arrayFromSb7.get(u));
                                                                            
                                                                            String ty = CheckType.check(arrayFromSb7.get(u));
                                                                            //System.out.println("ty: " + ty);
                                                                            
                                                                            
                                                                            if(ty.equals("Object")){
                                                                                    String objectValue = UtilsToSymTable.getVariableType(arrayFromSb7.get(u),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                    //System.out.println("objectValue = "+objectValue);
                                                                                    if(objectValue!=null && !objectValue.equals("Object")){
                                                                                            if(!objectValue.equals(ty_pe) && ty_pe!=null){
                                                                                                    ty_pe = "ERROR";
                                                                                                    sb.append(tab+"//ERROR IN VARIABLE DEFINITION: con Object\n");
                                                                                                    //break;
                                                                                            }else{
                                                                                                    ty_pe = objectValue;
                                                                                            }
                                                                                    }else{
                                                                                            //objectValue == null -> perch� ad esempio
                                                                                            //in lastParameters c'� una variabile che ha come valore
                                                                                            //il tipo di ritorno di una funzione oppure � la variabile
                                                                                            //che compare come argomento della funzione stessa.
                                                                                            //es:
                                                                                            //1) x = ff(w,p) -> e sotto -> y = x + 1
                                                                                            //2) func(x):..... -> e dentro la funzione: y = x + 1
                                                                                                                                                                                    
                                                                                            //setto il flag a true
                                                                                            //System.out.println("thereIsAnObject = true");
                                                                                            thereIsAnObject = true;
                                                                                    
                                                                                    }
                                                                                    
                                                                            }else{
                                                                                    if(!ty.equals(ty_pe) && ty_pe!=null){
                                                                                    	if( (ty.equals("Integer") && (ty_pe.equals("Double") || ty_pe.equals("Float"))) || (ty_pe.equals("Integer") && (ty.equals("Double") || ty.equals("Float"))) ){
	                                                                            			//System.out.println(" TUTTO E' DA CASTARE A DOUBLE/FLOAT ");
	                                                                            			ty_pe = "Double"; //or Float?
	                                                                            		}else{
                                                                                            ty_pe = "ERROR";
                                                                                            sb.append(tab+"//ERROR IN VARIABLE DEFINITION: senza Object - uffa\n");
	                                                                            		}
                                                                                    }else{
                                                                                            ty_pe = ty;
                                                                                    }
                                                                            }

                                                                    }
                                                                    

                                                                    if(!ty_pe.equals("ERROR")){
                                                                    		
                                                                            StringBuilder parameterDX = new StringBuilder();
                                                                            if(thereIsAnObject==true){
                                                                                    //System.out.println("EBBENE SI -> HO OBJECT IN LASTPARAMETERS");
                                                                                    //se sono qui -> nella parte DX (cio� in lastParameters) ho un Object con value = null
                                                                                    //devo allora fare il cast a ty_pe
                                                                                    for(int r = 0; r<arrayLP.size(); r++){
                                                                                            String ty = CheckType.check(arrayLP.get(r));
                                                                                            if(ty.equals("Object")){
                                                                                                    //String objectValue = UtilsToSymTable.getVariableType(arrayLP.get(r),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                            		parameterDX.append(UtilsToSymTable.getStringBuilderToAssignamentWithExpression(arrayLP_with_self.get(r),ty_pe));
                                                                                            		if(r!=arrayOperator.size()){
                                                                                                            parameterDX.append(arrayOperator.get(r));
                                                                                                    }
                                                                                            }else{
                                                                                                    //caso in cui: if(!ty.equals("Object"))
                                                                                                    //parameterDX.append(arrayLP.get(r));
                                                                                            		parameterDX.append(arrayLP_with_self.get(r));
                                                                                                    if(r!=arrayOperator.size()){
                                                                                                            parameterDX.append(arrayOperator.get(r));
                                                                                                    }
                                                                                            }
                                                                                    }
                                                                            }else{
                                                                                    //System.out.println("NON HO OBJECT IN LASTPARAMETERS");
                                                                                    
                                                                                    for(int r = 0; r<arrayLP.size(); r++){
                                                                                            String ty = CheckType.check(arrayLP.get(r));
                                                                                            if(ty.equals("Object")){
                                                                                                    parameterDX.append("(("+ty_pe+")"+arrayLP_with_self.get(r)+")");
                                                                                                    if(r!=arrayOperator.size()){
                                                                                                            parameterDX.append(arrayOperator.get(r));
                                                                                                    }
                                                                                            }else{
                                                                                                    //parameterDX.append(arrayLP.get(r));
                                                                                                    parameterDX.append(arrayLP_with_self.get(r));
                                                                                                    if(r!=arrayOperator.size()){
                                                                                                            parameterDX.append(arrayOperator.get(r));
                                                                                                    }
                                                                                            }
                                                                                    }

                                                                                    //parameterDX.append(lastParameters);
                                                                            }
                                                                    
                                                                            //INSERISCO CODICE:
                                                                    
                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                                    boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                                    
                                                                                    sb.append(tab);
                                                                                    if(flag==false)
                                                                                            sb.append("Object ");
                                                                                    
                                                                                    //sb.append(parameters.get(i));
                                                                                    sb.append(parameters_with_self.get(i));
                                                                                    sb.append(" = ");
                                                                                    sb.append(parameterDX.toString());
                                                                                    sb.append(";\n");
                                                                                    
                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),ty_pe,lastParameters,null,null,getIndentation(),null));
                                                                            
                                                                            }else{
                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT") 
                                                                                    //es: ((nomeClasse)p).attr
                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
                                                                                    sb.append(tab);
                                                                                    sb.append(parameterSX);
                                                                                    sb.append(" = ");
                                                                                    sb.append(parameterDX.toString());
                                                                                    sb.append(";\n");
                                                                                    
                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable, new SymbolType(parameters.get(i),ty_pe,lastParameters,null,null,getIndentation(),null));
                                                                            }
                                                                    }
                                                                    
                                                            }
                                                            

                                                            
                                                    }else{
                                                            //abbiamo una singola assegnazione
                                                            
                                                            String typeLastParameters = CheckType.check(lastParameters);
                                                            
                                                            //System.out.println("typeLastParameters: "+typeLastParameters);
                                                            
                                                            if(typeLastParameters.equals("Object")){
                                                                    //vediamo che tipo ha la variabile

                                                            
                                                                    String ty_pe = UtilsToSymTable.getVariableType(lastParameters,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                    
                                                                    //System.out.println("ty_pe per Object: "+ty_pe);
                                                                    
                                                                    if(ty_pe!=null){
                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                                    //StringBuilder sb3 = getStringBuilderAssignament("Object",lastParameters,parameters.get(i),getIndentation());
                                                                            		StringBuilder sb3 = getStringBuilderAssignament("Object",parameters_with_self.get(parameters_with_self.size()-1),parameters_with_self.get(i),getIndentation());
                                                                            		sb.append(tab);
                                                                            		sb.append(sb3.toString());
                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),ty_pe,lastParameters,null,null,getIndentation(),null));
                                                                            }
                                                                            else{
                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
                                                                                    sb.append(tab);
                                                                                    sb.append(parameterSX);
                                                                                    sb.append(" = ");
                                                                                    //sb.append(lastParameters);
                                                                                    sb.append(parameters_with_self.get(parameters_with_self.size()-1));
                                                                                    sb.append(";\n");
                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable, new SymbolType(parameters.get(i),ty_pe,lastParameters,null,null,getIndentation(),null));
                                                                            }
                                                                            
                                                                    }else{
                                                                            //la variabile non esiste
                                                                            sb.append(tab+"//ERROR IN VARIABLE DEFINITION: AUTO GENERATE CODE\n");
                                                                    }
                                                                    

                                                                    
                                                            }else if(typeLastParameters.equals("String")){
                                                                    //se ci sono " oppure ' -> Stringa vera!
                                                                    //casi possibili:
                                                                    //1) d = p.attr
                                                                    //2) Normale Stringa
                                                                    //3) c = g[1:2] oppure c = g[4]
                                                                    //4) h = p.func()
                                                                    
                                                                    //arrayWithoutPoint.get(0) = variabile (se c'e'), oppure direttamente funzione
                                                            		String whithoutPointInsideParents = UtilsToSymTable.replaceCharInsideParents(lastParameters,'.');
                                                                    ArrayList<String> arrayWithoutPoint = UtilsToSymTable.tokenParameters(whithoutPointInsideParents,".");
                                                                    //UtilsToSymTable.printArrayList(arrayWithoutPoint,"arrayWithoutPoint - ASSIGNAMENT");
                                                                    
                                                                    if(arrayWithoutPoint.size()>1){
                                                                            //siamo nei seguenti due casi:
                                                                            // d = p.attr
                                                                            // h = p.func(...)
                                                                            
                                                                            //System.out.println("SENZA APICI MA CON PUNTI (No Quotes / Yes Points)");
                                                                            
                                                                            //array.get(0) = nome funzione invocata (al 100%)
                                                                            //array.get(1) = lista dei paramentri passati alla funzione (potrebbe non esistere, se non passo nulla)
                                                                            ArrayList<String> array=UtilsToSymTable.tokenParameters(arrayWithoutPoint.get(arrayWithoutPoint.size()-1),"()");
                                                                            
                                                                            int numFunctionParam = 0;
                                                                            if(array.size()>1){
                                                                                    ArrayList<String> params = UtilsToSymTable.tokenParameters(array.get(1),",");
                                                                                    numFunctionParam = params.size();
                                                                            }
                                                                            
                                                                            String className2 = new String();
                                                                            //vedo se arrayWithoutPoint.get(0) e' una variabile
                                                                            boolean isAVariable = UtilsToSymTable.isExist(arrayWithoutPoint.get(0),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                            //System.out.println("UtilsToSymTable.isExist");
                                                                            if(isAVariable==true){
                                                                            		//System.out.println("className2: "+className2);
                                                                                    className2 = UtilsToSymTable.getVariableType(arrayWithoutPoint.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                            }else{
                                                                                    className2 = "DefaultClass";
                                                                            }
                                                                            
                                                                            boolean funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),className2, getIndentation(),parser.getSymbolTable());
                                                                            
                                                                            String tf = UtilsToSymTable.getVariableType(arrayWithoutPoint.get(0),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                            if(!funcOK && tf!=null){
                                                                            	if(tf.equals("Object")){
                                                                            	String toSearch = array.get(0)+"#"+String.valueOf(numFunctionParam);
                                                                            	//System.out.println("toSearch: " +toSearch);
                                                                            	className2 = UtilsToSymTable.getClassNameOfFunction(toSearch,getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                            	//System.out.println("className2: " +className2);
                                                                            	if(className2!=null);
                                                                            		funcOK = true;
                                                                            	}
                                                                            }
                                                                            
                                                                            if(funcOK){
                                                                            		boolean hasReturn = UtilsToSymTable.functionHasReturn(array.get(0),String.valueOf(numFunctionParam),className2, getIndentation(), parser.getSymbolTable());
                                                                            		
                                                                            		if(hasReturn){
                                                                            			boolean isOKOK = true;
                                                                            			if(array.size()>1){
                                                                            				isOKOK = UtilsToSymTable.isCorrectListOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                            			}
                                                                            			
                                                                            			
                                                                            			if(isOKOK){
                                                                            				//System.out.println("funcOK____ TRUE");
    	                                                                                    boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
    	                                                                                    if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
    	                                                                                    		sb.append(tab);
    	                                                                                    		if(flag==false)
    	                                                                                                    sb.append("Object ");
    	                                                                                            sb.append(parameters.get(i));
    	                                                                                    }else{
    	                                                                                            String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
    	                                                                                            sb.append(tab);
    	                                                                                            sb.append(parameterSX);
    	                                                                                    }
    	                                                                                    
    	                                                                                    sb.append(" = ");
    	                                     /*                                               
    	                                                                                    if(arrayWithoutPoint.size()>1){
    	                                                                                            sb.append("(("+className2+")"+arrayWithoutPoint.get(0)+")."+arrayWithoutPoint.get(1)+";\n");
    	                                                                                    }
    	                                                                                    else{
    	                                                                                            sb.append("DefaultClass."+lastParameters+";\n");
    	                                                                                    }
    	                                   */                                                 
    	                                                                                    
    	                                                                                    if(className2.equals("DefaultClass")){
    	                                                                                    	sb.append("DefaultClass."+array.get(0));
    	                                                                                    	sb.append("(");
    	                                                                                    	String args = "";
    	                                                                                    	if(array.size()>1){
    	                                                                                    		args = UtilsToSymTable.getStringBuilderOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
    	                                                                                    	}
    	                                                                                    	sb.append(args);
    	                                                                                    	sb.append(")");
    	                                                                                    	sb.append(";\n");
    	                                                                                    }
    	                                                                                    else{
                                                                                                sb.append("(("+className2+")"+arrayWithoutPoint.get(0)+")."+array.get(0));
                                                                                                sb.append("(");
    	                                                                                    	String args = "";
    	                                                                                    	if(array.size()>1){
    	                                                                                    			args = UtilsToSymTable.getStringBuilderOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
    	                                                                                    	}
    	                                                                                    	sb.append(args);
    	                                                                                    	sb.append(")");
    	                                                                                    	sb.append(";\n");
    	                                                                                    }
    	                                                                                    
    	                                                                                    if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
    	                                                                                            SymbolType symbol=new SymbolType(parameters.get(i),"Object",null,null,null,getIndentation(),null);
    	                                                                                            parser.symTable.putSymbol(getIndentation(),parameters.get(i),symbol);
    	                                                                                    }else{
    	                                                                                            //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
    	                                                                                            String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
    	                                                                                            SymbolType symbol=new SymbolType(parameters.get(i),"Object",null,null,null,getIndentation(),null);
    	                                                                                            parser.symTable.putSymbol(getIndentation(),newNameVariable,symbol);
    	                                                                                    }	
                                                                            			}
                                                                            			else
                                                                            				sb.append(tab+"//ERROR into Assignament - Argoments of method invocated aren't correct\n");
                                                                            		}else{
                                                                            			sb.append(tab+"//ERROR into Assignament - The method has not return value\n");
                                                                            		}
                                                                                    
                                                                            }else{
                                                                                    
                                                                                    //caso:  p.attr#nomeClasse
                                                                                    
                                                                                    String classe  = UtilsToSymTable.getVariableType(arrayWithoutPoint.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                    
                                                                                    if(classe!=null){
                                                                                            String varibleToSearch =  arrayWithoutPoint.get(0)+"."+ arrayWithoutPoint.get(1) +"#"+ classe;
                                                                                            //System.out.println("varibleToSearch: "+ varibleToSearch);
                                                                                            
                                                                                            String typeVaribleToSearchs = UtilsToSymTable.getVariableType(varibleToSearch,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                            String valueVaribleToSearchs = UtilsToSymTable.getValue(varibleToSearch,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                            
                                                                                            if(typeVaribleToSearchs!=null){
                                                                                                    
                                                                                                    String parameterDX = "(("+classe+")"+arrayWithoutPoint.get(0)+")."+arrayWithoutPoint.get(1);

                                                                                                    if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                                                            boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                                                            sb.append(tab);
                                                                                                            if(flag==false)
                                                                                                                    sb.append("Object ");
                                                                                                            sb.append(parameters.get(i));
                                                                                                            sb.append(" = ");
                                                                                                            sb.append(parameterDX);
                                                                                                            sb.append(";\n");
                                                                                                            
                                                                                                            SymbolType symbol=new SymbolType(parameters.get(i),typeVaribleToSearchs,valueVaribleToSearchs,null,null,getIndentation(),null);
                                                                                                            parser.symTable.putSymbol(getIndentation(),parameters.get(i),symbol);
                                                                                                    }else{
                                                                                                            //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
                                                                                                            
                                                                                                            //gestione parametro di DX --> che a sua volta � del tipo d.attr
                                                                                                            ArrayList<String> arrayWithoutPointParameterSX = UtilsToSymTable.tokenParameters(parameters.get(i),".");
                                                                                                            String classeNameParameterSX = UtilsToSymTable.getVariableType(arrayWithoutPointParameterSX.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                                            
                                                                                                            if(classeNameParameterSX!=null){
                                                                                                                    String parameterSX = "(("+classeNameParameterSX+")"+arrayWithoutPointParameterSX.get(0)+")."+arrayWithoutPointParameterSX.get(1);
                                                                                                                    //System.out.println("parameterDX (caso DOPPIO): " + parameterSX );
                                                                                                                    
                                                                                                                    sb.append(tab);
                                                                                                                    sb.append(parameterSX);
                                                                                                                    sb.append(" = ");
                                                                                                                    sb.append(parameterDX);
                                                                                                                    sb.append(";\n");
                                                                                                                    
                                                                                                                    String newNameVariable = parameters.get(i)+"#"+classeNameParameterSX;
                                                                                                                    SymbolType symbol=new SymbolType(parameters.get(i),typeVaribleToSearchs,valueVaribleToSearchs,null,null,getIndentation(),null);
                                                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable,symbol);
                                                                                                            }else{
                                                                                                                    sb.append(tab+"//ERROR IN VARIABLE DEFINITION_1: Right Variable Not Defined\n");
                                                                                                            }
                                                                                                    }       
                                                                                                    
                                                                                                    
                                                                                            }else{
                                                                                                    sb.append(tab+"//ERROR IN VARIABLE DEFINITION_2: Right Variable Not Defined\n");
                                                                                            }
                                                                                            
                                                                                    }else{
                                                                                            sb.append(tab+"//ERROR IN VARIABLE DEFINITION_3: Right Variable Not Defined\n");
                                                                                    }
                                                                            }
                                                                            
                                                                    
                                                                    }else if(lastParameters.contains("(") && lastParameters.contains(")")){
                                                                    	//System.out.println("FUNZIONE DENTRO LA STESSA CLASSE! ");                         	
                                                                    	 
                                                                    	 String args_con_cancelletto_dentro_parentesi = UtilsToSymTable.replaceCharInsideParents(lastParameters,'.');
                                                                    	 ArrayList<String> array=UtilsToSymTable.tokenParameters(args_con_cancelletto_dentro_parentesi,"();");
                                                                    	 //UtilsToSymTable.printArrayList(array, "array - FUNZIONE DENTRO LA STESSA CLASSE");
                                                                         int numFunctionParam = 0;
                                                                         if(array.size()>1){
                                                                                 ArrayList<String> params = UtilsToSymTable.tokenParameters(array.get(1),",");
                                                                                 numFunctionParam = params.size();
                                                                         }
                                                                         //System.out.println("numFunctionParam: "+numFunctionParam);
                                                                         String className2 = null;
                                                                         //cerco nello stella stessa classe
											                             boolean funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),null, getIndentation(),parser.getSymbolTable());
											                             if(!funcOK){
											                            	 //cerco tra le classi ereditate
											                            	 int caught = -1;
											                            	 if(parser.ereditClassToFunctionInvocation.size()!=0){
												         						for(int qw=0; qw<parser.ereditClassToFunctionInvocation.size(); qw++){
												         							funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),parser.ereditClassToFunctionInvocation.get(qw), getIndentation(),parser.getSymbolTable());
												                                    if(funcOK)
												                                    	caught = qw;
												         						}
												                             }
											                            	 if(caught!=-1){
											                            		className2 = parser.ereditClassToFunctionInvocation.get(caught); 
											                                 	//System.out.println("parser.ereditClassToFunctionInvocation - first: " + className2);
											                            	 }else {
											                            		 //cerco nella classe di default
											                            		funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),"DefaultClass", getIndentation(),parser.getSymbolTable());
											                            		if(funcOK)
											                            			className2 = "DefaultClass";
											                            	 }
											                             }
											                          /*   
											                             boolean funcOK = false;
                                                                         if(parser.ereditClassToFunctionInvocation.size()!=0){
                                                     						UtilsToSymTable.printArrayList(parser.ereditClassToFunctionInvocation, "ereditClassToFunctionInvocation");
                                                     						for(int qw=0; qw<parser.ereditClassToFunctionInvocation.size(); qw++){
                                                     							funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),parser.ereditClassToFunctionInvocation.get(qw), getIndentation(),parser.getSymbolTable());
                                                                                if(funcOK){
                                                                                	className2 = parser.ereditClassToFunctionInvocation.get(qw); 
                                                                                	System.out.println("parser.ereditClassToFunctionInvocation.get(qw)" + className2);
                                                                                	break;
                                                                                }
                                                     						}
                                                                         }else{
                                                                            funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),null, getIndentation(),parser.getSymbolTable());
                                                                         }
                                                                         */

                                                                                                                                                  
                                                                         if(funcOK){
                                                                     		if(UtilsToSymTable.functionHasReturn(array.get(0),String.valueOf(numFunctionParam),className2, getIndentation(), parser.getSymbolTable())){
 	                                                                            boolean isOKOK = true;
 	                                                                            if(array.size()>1){
 	                                                                        	   isOKOK = UtilsToSymTable.isCorrectListOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
 	                                                                            }
                                                                     			if(isOKOK){
	                                                                     			boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
	 	                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
	 	                                                                            		sb.append(tab);
	 	                                                                                    if(flag==false)
	 	                                                                                            sb.append("Object ");
	 	                                                                                    sb.append(parameters_with_self.get(i));
	 	                                                                            }else{
	 	                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
	 	                                                                                    sb.append(tab);
	 	                                                                                    sb.append(parameterSX);
	 	                                                                            }
	 	                                                                            
	 	                                                                            sb.append(" = ");
	 	                                                                            sb.append(array.get(0));
	                                                                               	sb.append("(");
	                                                                               	String args = "";
	                                                                                if(array.size()>1){
	                                                                                	args = UtilsToSymTable.getStringBuilderOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
	                                                                                }
	                                                                               	sb.append(args);
	                                                                               	sb.append(")");
	                                                                               	sb.append(";\n");
	 	                                                                                                            
	 	                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
	 	                                                                                    SymbolType symbol=new SymbolType(parameters.get(i),"Object",null,null,null,getIndentation(),null);
	 	                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i),symbol);
	 	                                                                            }else{
	 	                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
	 	                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
	 	                                                                                    SymbolType symbol=new SymbolType(parameters.get(i),"Object",null,null,null,getIndentation(),null);
	 	                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable,symbol);
	 	                                                                            }
 	                                                                            }
 	                                                                            else
 	                                                                            	sb.append(tab+"//ERROR into Assignament - Parameters of functions have errors! \n");
 	                                                                            
                                                                     		}else{
                                                                     			sb.append(tab+"//ERROR into Assignament_1 - The method invocated "+ lastParameters +" has not return value\n");
                                                                     		}
                                                                             
                                                                     }else{
                                                                    	 sb.append(tab+"//ERROR into Assignament_2 - The method invocated "+ lastParameters +" has not exist\n");
                                                                     }
                                                                         
                                                                         
                                                                    }else if(lastParameters.contains("[") || lastParameters.contains("]")){
                                                                            //siamo nei seguenti due casi:
                                                                            // c = g[4]
                                                                            // c = g[1:2]
                                                                            
                                                                            //System.out.println("SENZA APICI NE PUNTI (No Quotes / No Points)");
                                                                                    
                                                                            ArrayList<String> arrayWhithoutBrackets = UtilsToSymTable.tokenParameters(lastParameters,"[]");
                                                                            //UtilsToSymTable.printArrayList(arrayWhithoutBrackets, "arrayWhithoutBrackets");
                                                                            
                                                                            String typeWhithoutBrackets = UtilsToSymTable.getVariableType(arrayWhithoutBrackets.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                            //System.out.println("typeWhithoutBrackets: "+ typeWhithoutBrackets + " indentazione attuale: " + getIndentation());
                                                                            
                                                                            if(typeWhithoutBrackets!=null){
                                                                                    if(typeWhithoutBrackets.equals("Tupla") || typeWhithoutBrackets.equals("GenericList")){
                                                                                            
                                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                                            		String type_dentro = CheckType.check(arrayWhithoutBrackets.get(1));
                                                                                            		if(type_dentro.equals("Object")){
                                                                                            			String resultToStamp = WhileIfCondition.getStringBuilderSingleCondition(lastParameters,"TupListDict","",getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                            			//System.out.println("resultToStamp: "+resultToStamp);
                                                                                            			boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                                		if(flag==false){
                                                                                                			sb.append(tab);
                                                                                                			sb.append("Object ");
                                                                                                			sb.append(parameters.get(i));
                                                                                                			sb.append(" = new ");
                                                                                                			sb.append(typeWhithoutBrackets);
                                                                                                			sb.append("();\n");
                                                                                                		}
                                                                                                		sb.append(tab);
                                                                                                		sb.append(parameters.get(i));
                                                                                                		sb.append(" = ");
                                                                                                		sb.append(resultToStamp);
                                                                                                		sb.append(";\n");
                                                                                                		
                                                                                                		//insert into SymTable:
                                                                                                		String val = UtilsToSymTable.getValue(arrayWhithoutBrackets.get(1),getIndentation(), parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                                		String newValues = UtilsToSymTable.getValueModels("sub"+typeWhithoutBrackets,null,val,arrayWhithoutBrackets.get(0),getIndentation(), parser.getSymbolTable());
                                                                                                		//System.out.println("newValues: "+newValues);
                                                                                                		ArrayList<String> senzaDuePunti = UtilsToSymTable.tokenParameters(arrayWhithoutBrackets.get(1),":");
                                                                                                		//UtilsToSymTable.printArrayList(senzaDuePunti, "senzaDuePunti");
                                                                                                		String newType = typeWhithoutBrackets;
                                                                                            			if(senzaDuePunti.size()==1){
                                                                                            				newValues = newValues.replace("[","");
                                                                                            				newValues = newValues.replace("]","");
                                                                                            				//System.out.println("newValues: "+newValues);
                                                                                            				newType = CheckType.check(newValues);
                                                                                            				//System.out.println("newType: "+newType);
                                                                                            			}
                                                                                                		
                                                                                                		parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),newType,newValues,null,null,getIndentation(),null));
                                                                                                		
                                                                                            		}else{
	                                                                                                    ArrayList<String> subString = UtilsToSymTable.tokenParameters(lastParameters,arrayWhithoutBrackets.get(0));
	                                                                                                    //UtilsToSymTable.printArrayList(subString, "subString");
	                                                                                                    StringBuilder sb4 = getStringBuilderSubTuplaOrGenericList(typeWhithoutBrackets,arrayWhithoutBrackets.get(0),parameters.get(i),subString.get(0),getIndentation());
	                                                                                                    sb.append(tab);
	                                                                                                    sb.append(sb4.toString());
	                                                                                                    String newValues = UtilsToSymTable.getValueModels("sub"+typeWhithoutBrackets,null,subString.get(0),arrayWhithoutBrackets.get(0),getIndentation(), parser.getSymbolTable());
	                                                                                                    
	                                                                                                    ArrayList<String> senzaDuePunti = UtilsToSymTable.tokenParameters(arrayWhithoutBrackets.get(1),":");
                                                                                                		//UtilsToSymTable.printArrayList(senzaDuePunti, "senzaDuePunti");
                                                                                                		String newType = typeWhithoutBrackets;
                                                                                            			if(senzaDuePunti.size()==1){
                                                                                            				//System.out.println("newValues: "+newValues);
                                                                                            				newValues = newValues.replace("[","");
                                                                                            				newValues = newValues.replace("]","");
                                                                                            				newType = CheckType.check(newValues);
                                                                                            				//System.out.println("newType: "+newType);
                                                                                            			}
	                                                                                                    
	                                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),newType,newValues,null,null,getIndentation(),null));
                                                                                            		}
                                                                                            }else{
                                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT") 
                                                                                                    //es: ((nomeClasse)p).attr
                                                                                                    ArrayList<String> subString = UtilsToSymTable.tokenParameters(lastParameters,arrayWhithoutBrackets.get(0));
                                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
                                                                                                    sb.append(tab);
                                                                                                    sb.append(parameterSX);
                                                                                                    sb.append(" = ");
                                                                                                    sb.append("new "+typeWhithoutBrackets+"();\n");
                                                                                                    
                                                                                                    sb.append(tab);
                                                                                                    sb.append(parameterSX);
                                                                                                    sb.append(" = ");
                                                                                                    sb.append("(("+typeWhithoutBrackets+")" + arrayWhithoutBrackets.get(0) +").sub"+typeWhithoutBrackets+"(\""+subString.get(0)+"\");\n");
                                                                                                    
                                                                                                    String newValues = UtilsToSymTable.getValueModels("sub"+typeWhithoutBrackets,null,subString.get(0),arrayWhithoutBrackets.get(0),getIndentation(), parser.getSymbolTable());
                                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable, new SymbolType(parameters.get(i),typeWhithoutBrackets,newValues,null,null,getIndentation(),null));
                                                                                                    
                                                                                            }                               
                                                                                            
                                                                                    }else if(typeWhithoutBrackets.equals("PDictionary")){
                                                                                            //System.out.println("SINGOLO ELEMENTO DIZIONARIO");
                                                                                            String type_dentro = CheckType.check(arrayWhithoutBrackets.get(1));
                                                                                            String resultToStamp = arrayWhithoutBrackets.get(1);
                                                                                    		if(type_dentro.equals("String")){
                                                                                    			resultToStamp = "\"\\\""+arrayWhithoutBrackets.get(1).replace("\"","")+"\\\"\"";
                                                                                    		}
                                                                                    		
                                                                                    		boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                                    		sb.append(tab);
                                                                                    		if(flag==false){
                                                                                    			sb.append("Object ");
                                                                                    		}
                                                                                    		sb.append(parameters.get(i));
                                                                                    		sb.append(" = ");
                                                                                    		sb.append("((PDictionary)"+arrayWhithoutBrackets.get(0)+").getSigleValue("+resultToStamp+");\n");
                                                                                            
                                                                                    		//Insert into SymTAble
                                                                                    		String newValues = UtilsToSymTable.getValueModels("getSigleValue",null,arrayWhithoutBrackets.get(1),arrayWhithoutBrackets.get(0),getIndentation(), parser.getSymbolTable());
                                                                                            //System.out.println("newValues - dic: " +newValues);
                                                                                    		String typeOfVariable = CheckType.check(newValues);
                                                                                    		//System.out.println("typeOfVariable - dic: " +typeOfVariable);
                                                                                    		parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),typeOfVariable,newValues,null,null,getIndentation(),null));
                                                                                            
                                                                                    }else {
                                                                                        sb.append(tab+"//ERROR IN VARIABLE DEFINITION\n");
                                                                                    }
                                                                            }else{
                                                                                    sb.append(tab+"//ERROR IN VARIABLE DEFINITION\n");
                                                                            }
                                                                    }else{
                                                                        //sicuro Stringa
                                                                        
                                                                        //System.out.println("CONTENGO GLI APICI (Quotes)");
                                                                        
                                                                        if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                                //parameters.get(parameters.size()-1)
                                                                        		//StringBuilder sb5 = getStringBuilderAssignament(typeLastParameters,lastParameters,parameters.get(i),getIndentation());
                                                                        		StringBuilder sb5 = getStringBuilderAssignament(typeLastParameters,parameters_with_self.get(parameters_with_self.size()-1),parameters_with_self.get(i),getIndentation());
                                                                        		sb.append(tab);
                                                                        		sb.append(sb5.toString());
                                                                                parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),typeLastParameters,lastParameters,null,null,getIndentation(),null));
                                                                        }else{
                                                                                //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
                                                                                String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
                                                                                sb.append(tab);
                                                                                sb.append(parameterSX);
                                                                                //sb.append(getDXAssignament(typeLastParameters,lastParameters));
                                                                                sb.append(getDXAssignament(typeLastParameters,parameters_with_self.get(parameters_with_self.size()-1)));
                                                                                String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                                                parser.symTable.putSymbol(getIndentation(),newNameVariable, new SymbolType(parameters.get(i),typeLastParameters,lastParameters,null,null,getIndentation(),null));
                                                                        }
                                                                    }


                                                                    
                                                            }else{
                                                            
                                                                    //System.out.println("ALTRRRRRRRRRRRRROOOOOOOOOOOOO");

                                                                    //arrayWithoutPoint.get(0) = variabile (se c'�), oppure direttamente funzione
                                                                    String args_con_cancelletto_dentro_parentesi = UtilsToSymTable.replaceCharInsideParents(lastParameters,'.');
                                                                    ArrayList<String> arrayWithoutPoint = UtilsToSymTable.tokenParameters(args_con_cancelletto_dentro_parentesi,".");
                                                                    
                                                                    //array.get(0) = nome funzione invocata (al 100%)
                                                                    //array.get(1) = lista dei paramentri passati alla funzione (potrebbe non esistere, se non passo nulla)
                                                                    ArrayList<String> array=UtilsToSymTable.tokenParameters(arrayWithoutPoint.get(arrayWithoutPoint.size()-1),"()");
                                                                    
                                                                    int numFunctionParam = 0;
                                                                    if(array.size()>1){
                                                                            ArrayList<String> params = UtilsToSymTable.tokenParameters(array.get(1),",");
                                                                            numFunctionParam = params.size();
                                                                    }
                                                                    
                                                                    String className2 = new String();
                                                                    //vedo se arrayWithoutPoint.get(0) � una variabile
                                                                    boolean isAVariable = UtilsToSymTable.isExist(arrayWithoutPoint.get(0),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                    //System.out.println("UtilsToSymTable.isExist");
                                                                    if(isAVariable==true){
                                                                            className2 = UtilsToSymTable.getVariableType(arrayWithoutPoint.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
                                                                    }else{
                                                                            className2 = "DefaultClass";
                                                                    }
                                                                    
                                                                    boolean funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),className2, getIndentation(),parser.getSymbolTable());
                                                                    
                                                                    if(funcOK){
                                                                    		if(UtilsToSymTable.functionHasReturn(array.get(0),String.valueOf(numFunctionParam),className2, getIndentation(), parser.getSymbolTable())){
                                                                    			boolean isOKOK = true;
                                                                    			if(array.size()>1){
                                                                    				isOKOK = UtilsToSymTable.isCorrectListOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
                                                                    			}
                                                                    			
                                                                    			if(isOKOK){
	                                                                    			//System.out.println("funcOK____ TRUE");
		                                                                            boolean flag = UtilsToSymTable.isExist(parameters.get(i),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
		                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
		                                                                            		sb.append(tab);
		                                                                                    if(flag==false)
		                                                                                            sb.append("Object ");
		                                                                                    sb.append(parameters.get(i));
		                                                                            }else{
		                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
		                                                                                    sb.append(tab);
		                                                                                    sb.append(parameterSX);
		                                                                            }
		                                                                            
		                                                                            sb.append(" = ");
		                                                                            
		                                                                            if(className2.equals("DefaultClass")){
	                                                                                	sb.append("DefaultClass."+array.get(0));
	                                                                                	sb.append("(");
	                                                                                	String args = "";
	                                                                                	if(array.size()>1){
	                                                                                		args = UtilsToSymTable.getStringBuilderOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
	                                                                                	}
	                                                                                	sb.append(args);
	                                                                                	sb.append(")");
	                                                                                	sb.append(";\n");
	                                                                                }
	                                                                                else{
	                                                                                    sb.append("(("+className2+")"+arrayWithoutPoint.get(0)+")."+array.get(0));
	                                                                                    sb.append("(");
	                                                                                	String args = "";
	                                                                                	if(array.size()>1){
	                                                                                		args = UtilsToSymTable.getStringBuilderOfParametersInsideFunction(array.get(1),getIndentation(), parser.getSymbolTable(),parser.ereditClassToFunctionInvocation);
	                                                                                	}
	                                                                                	sb.append(args);
	                                                                                	sb.append(")");
	                                                                                	sb.append(";\n");
	                                                                                }
		                                                                                                            
		                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
		                                                                                    SymbolType symbol=new SymbolType(parameters.get(i),"Object",null,null,null,getIndentation(),null);
		                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i),symbol);
		                                                                            }else{
		                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
		                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
		                                                                                    SymbolType symbol=new SymbolType(parameters.get(i),"Object",null,null,null,getIndentation(),null);
		                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable,symbol);
		                                                                            }
                                                                    			}
                                                                    		}else{
                                                                    			sb.append(tab+"//ERROR into Assignament - The method invocated has not return value\n");
                                                                    		}
                                                                            
                                                                    }else{
                                                                    
                                                                            //conosciamo gia' il tipo definitivo -> e NON � String
                                                                            if(splitStringBuilder.get(0).equals("NOTHING-CERTAIN")){
                                                                                    //StringBuilder sb6 = getStringBuilderAssignament(typeLastParameters,lastParameters,parameters.get(i),getIndentation());
                                                                            		StringBuilder sb6 = getStringBuilderAssignament(typeLastParameters,parameters_with_self.get(parameters_with_self.size()-1),parameters_with_self.get(i),getIndentation());
                                                                            		sb.append(tab);
                                                                            		sb.append(sb6.toString());
                                                                                    parser.symTable.putSymbol(getIndentation(),parameters.get(i), new SymbolType(parameters.get(i),typeLastParameters,lastParameters,null,null,getIndentation(),null));
                                                                            }else{
                                                                                    //qui splitStringBuilder.get(0).equals("OBJECT-ASSIGNMENT")
                                                                                    String parameterSX = "(("+splitStringBuilder.get(3)+")"+splitStringBuilder.get(1)+")."+splitStringBuilder.get(2);
                                                                                    sb.append(tab);
                                                                                    sb.append(parameterSX);
                                                                                    //sb.append(getDXAssignament(typeLastParameters,lastParameters));
                                                                                    sb.append(getDXAssignament(typeLastParameters,parameters_with_self.get(parameters_with_self.size()-1)));
                                                                                    String newNameVariable = parameters.get(i)+"#"+splitStringBuilder.get(3);
                                                                                    parser.symTable.putSymbol(getIndentation(),newNameVariable, new SymbolType(parameters.get(i),typeLastParameters,lastParameters,null,null,getIndentation(),null));
                                                                            }
                                                                    
                                                                    }//fine else if(funcOK)

                                                            }
                                                            
                                                    }
                                                    
                                                    
                                            }
                                    	}//fine else che indica che non è una LEN FUNCTION
                                        
                                        }
                                    
                                    }else{
                                            //if sb2==null -> ERROR!
                                            sb.append(tab+"//ERROR IN VARIABLE DEFINITION: ultimo\n");
                                    }
                            
                            }

                    }
                    
                    RESULT = sb.toString();
                    
                    
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_stmt ::= testlist augassign testlist 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
						
						String tab=" ";
				 		for(int i=0; i<getIndentation(); i++){
							tab+="\t";
						}
						
						StringBuilder sb = new StringBuilder();
						//System.out.println("#expr_stmt: 2___  "+t1+a+t2); //RIVEDEREEEEEEE*******************
						String options=new String();
						ArrayList<String> arrayVar1=UtilsToSymTable.tokenParameters(t1.toString(),".");
					    ArrayList<String> arrayVar2=UtilsToSymTable.tokenParameters(t2.toString(),".");
					    Boolean flag1=false,flag2=false;
						if(arrayVar1.size()>1){
							//probabile caso: p.attributo
							String classType=UtilsToSymTable.getVariableType(arrayVar1.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
							flag1=UtilsToSymTable.isCorrectClassAttributeUsed(arrayVar1.get(1),classType,getIndentation(),parser.getSymbolTable());
						}
						if(arrayVar2.size()>1){
							//probabile caso: p.attributo
							String classType=UtilsToSymTable.getVariableType(arrayVar1.get(0),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
							flag2=UtilsToSymTable.isCorrectClassAttributeUsed(arrayVar1.get(1),classType,getIndentation(), parser.getSymbolTable());	
							}
						if((flag1)&&(flag2))
						{
							//CASO: p.attributo+=q.attributo
							
							String var1=CheckType.check(arrayVar1.get(1));
							String var2=CheckType.check(arrayVar2.get(1));
							String value1 = UtilsToSymTable.getValue(var1,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
							String value2 = UtilsToSymTable.getValue(var2,getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
							String valueType1=CheckType.check(value1);
							String valueType2=CheckType.check(value2);
							if(valueType1.equals(valueType2))
								options=valueType1+"#VALUEATTRIBUTE";
							else
								options="ERROR";			
						}
						else if((flag1)&&(!flag2))
						{
							//CASO: p.attributo+=x oppure COSTANTE
						
						
						}
						else if((flag1)&&(!flag2))
						{
							//CASO: x+=p.attributo 
						
						
						}
						else if((!flag1)&&(!flag2))
						{
							String var1=CheckType.check(t1.toString());
							String var2=CheckType.check(t2.toString());
							if((var1.equals(var2))&&(!var1.equals("Object"))&&(!var2.equals("Object")))
							{
								options="SAME_TYPE_NO_OBJECT";
							}
							else{
								if((var1.equals("Object"))&&(var2.equals("Object")))
								{
									//CASO TIPO: x+=y (entrambi Object)
									String value1 = UtilsToSymTable.getValue(t1.toString(),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
									String value2 = UtilsToSymTable.getValue(t2.toString(),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
									String valueType1=CheckType.check(value1);
									String valueType2=CheckType.check(value2);
									if(valueType1.equals(valueType2)){
										options=valueType1+"#SAME_TYPE_OBJECT";
									}
										
									else
										options="ERROR";
								}
								else if((var1.equals("Object"))&&(!var2.equals("Object")))
								{
									String value1 = UtilsToSymTable.getValue(t1.toString(),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
									String valueType1=CheckType.check(value1);
									if(valueType1.equals(var2)){
										options=valueType1+"#SAME_TYPE_OBJECT";
									}
									else
										options="ERROR";
								}
								else if((var2.equals("Object"))&&(!var1.equals("Object")))
								{
									String value2 = UtilsToSymTable.getValue(t2.toString(),getIndentation(),parser.getSymbolTable(), parser.ereditClassToFunctionInvocation);
									String valueType2=CheckType.check(value2);
									if(valueType2.equals(var1)){
										options=valueType2+"#SAME_TYPE_OBJECT";
									}
									else
										options="ERROR";
								}
								
							}
						}
							
						
						
						//*********************************************************************
						
						if(a.equals("+="))
						{
							if(options.equals("SAME_TYPE_NO_OBJECT"))
							{
								RESULT= tab+t1+"="+t1+"+"+t2+";";
							}
							else if(options.contains("SAME_TYPE_OBJECT"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+"("+array.get(0)+")"+t1+"+"+"("+array.get(0)+")"+t2+";";
							}
							else if(options.contains("VALUEATTRIBUTE"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+t1+"+"+t2+";";
							}
							else if(options.equals("ERROR"))
							{
								semanticAlert("ERROR IN INSTRUCTION");
								RESULT= tab+"//ERROR IN INSTRUCTION";	
							}
							
						}
						if(a.equals("-="))
						{
							if(options.equals("SAME_TYPE_NO_OBJECT"))
							{
								RESULT= tab+t1+"="+t1+"-"+t2+";";
							}
							else if(options.contains("SAME_TYPE_OBJECT"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+"("+array.get(0)+")"+t1+"-"+"("+array.get(0)+")"+t2+";";
							}
							else if(options.contains("VALUEATTRIBUTE"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+t1+"-"+t2+";";
							}
							else if(options.equals("ERROR"))
							{
								semanticAlert("ERROR IN INSTRUCTION");
								RESULT= tab+"//ERROR IN INSTRUCTION";	
							}
						}
						if(a.equals("*="))
						{
							if(options.equals("SAME_TYPE_NO_OBJECT"))
							{
								RESULT= tab+t1+"="+t1+"*"+t2+";";
							}
							else if(options.contains("SAME_TYPE_OBJECT"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+"("+array.get(0)+")"+t1+"*"+"("+array.get(0)+")"+t2+";";
							}
							else if(options.contains("VALUEATTRIBUTE"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+t1+"*"+t2+";";
							}
							else if(options.equals("ERROR"))
							{
								semanticAlert("ERROR IN INSTRUCTION");
								RESULT= tab+"//ERROR IN INSTRUCTION";	
							}
						}
						if(a.equals("/="))
						{
							if(options.equals("SAME_TYPE_NO_OBJECT"))
							{
								RESULT= tab+t1+"="+t1+"/"+t2+";";
							}
							else if(options.contains("SAME_TYPE_OBJECT"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+"("+array.get(0)+")"+t1+"/"+"("+array.get(0)+")"+t2+";";
							}
							else if(options.contains("VALUEATTRIBUTE"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+t1+"/"+t2+";";
							}
							else if(options.equals("ERROR"))
							{
								semanticAlert("ERROR IN INSTRUCTION");
								RESULT= tab+"//ERROR IN INSTRUCTION";	
							}
						}
						if(a.equals("%="))
						{
							if(options.equals("SAME_TYPE_NO_OBJECT"))
							{
								RESULT= tab+t1+"="+t1+"%"+t2+";";
							}
							else if(options.contains("SAME_TYPE_OBJECT"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+"("+array.get(0)+")"+t1+"%"+"("+array.get(0)+")"+t2+";";
							}
							else if(options.contains("VALUEATTRIBUTE"))
							{
								ArrayList<String> array=UtilsToSymTable.tokenParameters(options,"#");
								RESULT= tab+t1+"="+t1+"%"+t2+";";
							}
							else if(options.equals("ERROR"))
							{
								semanticAlert("ERROR IN INSTRUCTION");
								RESULT= tab+"//ERROR IN INSTRUCTION";	
							}
						}
						
						
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_stmt ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
						
						String tab=" ";
						for(int i=0; i<getIndentation(); i++){
							tab+="\t";
						}
						
						boolean flag=false;
						boolean classCast=false;
						boolean classInit=false;
						int par=0;
						ArrayList<String> a = UtilsToSymTable.tokenParameters(t.toString(),".");
						
						if(a.size()>1){
							//System.out.println("TO SPLIT: "+t.toString());
							//System.out.println("SPLIT_1"+a.toString());
							ArrayList<String> b = UtilsToSymTable.tokenParameters(a.get(1),"(");
							//System.out.println("SPLIT_2"+b.toString());
						
							//Verifica sulla dichiarazione dell'oggetto..
							if(parser.symTable.checkObject(a.get(0))){
								if(parser.symTable.checkClass(a.get(0))){
									//System.out.println("IT'S A CLASS!");
									if(b.get(0).equals("__init__")){
										classInit=true;
										String argvs = "";
										String pas="";
										if(b.size()!=0){
											ArrayList<String> argv = UtilsToSymTable.tokenParameters(b.get(1),")");
											if(!(pas=(checkPar(argv,getIndentation(),a.get(0)))).equals("")){
											//argvs=argv.get(0);
											argvs=pas;
											RESULT = tab+"super("+argvs+");\n";
											//System.out.println("I SET: super("+argvs+");\n");
											//System.out.println("I SET (ARGVS): "+RESULT);
											}
											else{
												semanticAlert("Error Setting Constructor parameters!");
												RESULT = tab+"//ERROR SETTING CONSTRUCTOR PARAMETERS\n";
											}
										}else{
											//System.out.println("NO ARGVS!");
											RESULT = tab+"super("+argvs+");\n";
											//System.out.println("I SET: super("+argvs+");\n");
										}
									}
										
									else
										classCast=true;
								}
								if(b.size()<2 && !classInit){ //Si tratta di un attributo..
									//System.out.println("It's an attribute!");
									//Verifica sull'esistenza dell'entità (attributo o funzione)..
									//System.out.println("#I_SEARCH::: "+t.toString()+"#"+parser.symTable.getClass(a.get(0)));
									if(classCast){
										//String newt = t.toString().replace(".","_");
										//System.out.println("AAA:"+newt+";\n");
										semanticAlert("OPERATION NOT ALLOWED!");
										RESULT= tab+"//OPERATION NOT ALLOWED!\n";
									}
									else{
										if(parser.symTable.checkEntity(t.toString()+"#"+parser.symTable.getClass(a.get(0)))){
											 //Verifica appartenenza alla classe per effettuare il casting..
											if(parser.symTable.getClass(a.get(0))!=null){
													//System.out.println("AAA: ("+parser.symTable.getClass(a.get(0))+")"+t+";\n");
													RESULT= tab+"("+parser.symTable.getClass(a.get(0))+")"+t+";\n";
											}
											else{
												//System.out.println("ERROR GETTING OWNER\n");
												RESULT= tab+"//ERROR GETTING CLASS FOR CASTING IN ENTITY "+t.toString()+"\n";
											}
									}
									else{
										//System.out.println("ERROR RESOLVING ENTITY\n");
										RESULT= tab+"//ERROR ERROR RESOLVING ENTITY "+t.toString()+"\n";
									}	
									}
									
									
								}
								else if(b.size()>=2 && !classInit){ //b.size() >=2 quindi si tratta di un metodo..
									if(classCast){
										/*System.out.println("It's a method!!");
										String newt = t.toString().replace(".","_");
										System.out.println("AAAAAAAAAAAAAAAAAAA: "+newt);
										System.out.println("AAAMM:"+newt+";\n");
										RESULT=newt+";\n"; */
										semanticAlert("OPERATION NOT ALLOWED!");
										RESULT= tab+"//OPERATION NOT ALLOWED!\n";
									}
									else{
									//System.out.println("It's a method!!");
									ArrayList<String> c = UtilsToSymTable.tokenParameters(b.get(1),")");
									//System.out.println("SPLIT_3"+c.toString());
									if(!c.isEmpty()){ //Se non è vuoto significa che ho parametri..
										ArrayList<String> d = UtilsToSymTable.tokenParameters(c.get(0),",");
										//System.out.println("SPLIT_4 [Parameters]"+d.toString()+" SIZE: "+d.size());
										//Verifica sull'esistenza dell'entità (funzione)..
										//System.out.println("Checking: "+b.get(0)+"#"+d.size()+"#"+parser.symTable.getClass(a.get(0)));
										if(parser.symTable.checkMethod(b.get(0)+"#"+d.size()+"#"+parser.symTable.getClass(a.get(0)))){
											//System.out.println("PAR!=: "+d.toString());
											
											
											//Eseguo un check sui parametri che ho passato per vedere se esistono..

											/*TODO: Implementare algoritmo per controllare i parametri passati al metodo:
											 * Se si tratta di valori lasciamoli passare, se passo variabili devo controllare
											 * che esistono!! :D:D
											 */
											
											for(int i=0;i<d.size();i++){
												//COMMENTATO CHECK SUI PARAMETRI..
											//	if(parser.symTable.checkEntity(d.get(i))){
													//System.out.println("aaaa: (("+parser.symTable.getClass(a.get(0))+")"+a.get(0)+")."+a.get(1));
													//RESULT="("+parser.symTable.getClass(a.get(0))+")"+t+";\n";
													RESULT= tab+"(("+parser.symTable.getClass(a.get(0))+")"+a.get(0)+")."+a.get(1) + ";\n";
												//}
												//else{
												//	RESULT="//ERROR RESOLVING METHOD "+b.get(0)+"\n"; 
												//}
											}
											//RESULT="("+parser.symTable.getClass(a.get(0))+")"+t+";\n";
										}else{
											//System.out.println("Function not found!");
										  	//System.out.println("//ERROR RESOLVING METHOD "+b.get(0)+"\n");
											RESULT= tab+"//ERROR RESOLVING METHOD "+b.get(0)+"\n";
										}
									
									}else{
										 //System.out.println("No parameters: I search: "+b.get(0)+"#0#"+parser.symTable.getClass(a.get(0)));
										 //Verifica sull'esistenza dell'entità (funzione)..
										 if(parser.symTable.checkMethod(b.get(0)+"#0#"+parser.symTable.getClass(a.get(0)))){
										 		//System.out.println("FOUND!!");
										 		//System.out.println("tttt: (("+parser.symTable.getClass(a.get(0))+")"+a.get(0)+")."+a.get(1));
										 		//RESULT="("+parser.symTable.getClass(a.get(0))+")"+t+";\n";
										 		RESULT = tab+"(("+parser.symTable.getClass(a.get(0))+")"+a.get(0)+")."+a.get(1) + ";\n";
										 }
										 else{
										  	//System.out.println("Function not found!");
										  	//System.out.println("//ERROR RESOLVING METHOD "+b.get(0)+"\n");
											RESULT= tab+"//ERROR RESOLVING METHOD "+b.get(0)+"\n"; 
										 }
										 
										 } 
									}	 
										 
								}//Chiude b.size()
							}else{
								//System.out.println("//ERROR RESOLVING OBJECT "+a.get(0)+"\n");
								RESULT= tab+"//ERROR RESOLVING OBJECT "+a.get(0)+"\n"; 
							}
								
						}else{
							//caso in cui NON CI SONO PUNTI....
							//es: invoco funzione -> func(c,v,b)
							 ArrayList<String> array=UtilsToSymTable.tokenParameters(a.get(0),"();");
                                                                         
                             int numFunctionParam = 0;
                             if(array.size()>1){
                                     ArrayList<String> params = UtilsToSymTable.tokenParameters(array.get(1),",");
                                     numFunctionParam = params.size();
                             }
                             //System.out.println("numFunctionParam: " +numFunctionParam);
                             
                             String className2 = null;
                             //cerco nello stella stessa classe
                             boolean funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),null, getIndentation(),parser.getSymbolTable());;
                             if(!funcOK){
                            	 //cerco tra le classi ereditate
                            	 int caught = -1;
                            	 if(parser.ereditClassToFunctionInvocation.size()!=0){
	         						for(int qw=0; qw<parser.ereditClassToFunctionInvocation.size(); qw++){
	         							funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),parser.ereditClassToFunctionInvocation.get(qw), getIndentation(),parser.getSymbolTable());
	                                    if(funcOK)
	                                    	caught = qw;
	         						}
	                             }
                            	 if(caught!=-1){
                            		className2 = parser.ereditClassToFunctionInvocation.get(caught); 
                            	 }else {
                            		 //cerco nella classe di default
                            		funcOK = UtilsToSymTable.isCorrectFunctionInvocation(array.get(0),String.valueOf(numFunctionParam),"DefaultClass", getIndentation(),parser.getSymbolTable());
                            		if(funcOK)
                            			className2 = "DefaultClass";
                            	 }
                             }
                             //System.out.println("className2: " +className2);
                                                                   
                             if(funcOK && className2.equals("DefaultClass"))
                             	RESULT = tab+"DefaultClass."+t.toString()+";\n";
                             else if(funcOK && !className2.equals("DefaultClass"))
                            	RESULT = tab+t.toString()+";\n";
                             else
                             	RESULT = tab+"//ERROR - Istruction dont'allowed! \n ";
							 
						}

					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // small_stmt ::= comment 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
 		                   if(getIndentation()==0){
	                    		parser.arrayMain.add(c.toString());
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT=c.toString();
		                    } 
         				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // small_stmt ::= exec_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
         					 if(getIndentation()==0){
 	                    		parser.arrayMain.add(e.toString());
 		                    	RESULT = "";
 	                    	}
 	                    	else{
 	                    		RESULT=e.toString();
 		                    } 
         				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // small_stmt ::= global_stmt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
		                    if(getIndentation()==0){
	                    		parser.arrayMain.add(g.toString());
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT=g.toString();
		                    }   
         				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // small_stmt ::= assert_stmt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
		                    if(getIndentation()==0){
	                    		parser.arrayMain.add(a.toString());
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT=a.toString();
		                    } 
         				
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // small_stmt ::= import_stmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
							if(getIndentation()==0){
	                    		parser.arrayMain.add(i.toString());
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT=i.toString();
		                    } 
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							String tab=" ";
							for(int i=0; i<getIndentation(); i++)
			 				{
								tab+="\t";
							}  
							
							if(getIndentation()==0){
	                    		parser.arrayMain.add(tab.toString()+f.toString());
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT=tab.toString()+f.toString();
		                    } 
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // small_stmt ::= PASS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							if(getIndentation()==0){
	                    		parser.arrayMain.add("{ };");
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT="{ };";
		                    } 
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // small_stmt ::= del_stmt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							String message="DEL: CANNOT RESOLVE THIS INSTRUCTION\n"; 
							semanticAlert(message);
							
							if(getIndentation()==0){
	                    		parser.arrayMain.add("//ERROR ON DEL: AUTO GENERATE COMMENT\n");
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT="//ERROR ON DEL: AUTO GENERATE COMMENT\n"; 
		                    } 					
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // small_stmt ::= range_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							String message="RANGE: CANNOT RESOLVE THIS INSTRUCTION\n"; 
							semanticAlert(message);
							if(getIndentation()==0){
	                    		parser.arrayMain.add("//ERROR ON RANGE: AUTO GENERATE COMMENT\n");
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT="//ERROR ON RANGE: AUTO GENERATE COMMENT\n";
		                    } 
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							if(getIndentation()==0){
	                    		parser.arrayMain.add(p.toString());
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT = p; 
		                    } 	
					    
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							if(getIndentation()==0){
	                    		parser.arrayMain.add(e.toString());
		                    	RESULT = "";
	                    	}
	                    	else{
	                    		RESULT = e; 
		                    } 
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt",68, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // small_stmt_kleine ::= small_stmt_kleine SEMI small_stmt 
            {
              Object RESULT =null;
		int skleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int skright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object sk = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
					
					    RESULT=sk.toString()+s.toString();
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt_kleine",69, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // small_stmt_kleine ::= SEMI small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
						RESULT=s;
					
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("small_stmt_kleine",69, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_stmt ::= small_stmt small_stmt_kleine SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int skleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int skright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object sk = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
					    RESULT = s.toString()+sk.toString();
					
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_stmt ::= small_stmt small_stmt_kleine NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int skleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int skright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object sk = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
					    RESULT = s.toString()+sk.toString();
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_stmt ::= small_stmt SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		
					 	
					  	RESULT=s;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		
						RESULT = s;
					
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
							RESULT = c;	
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= simple_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 	
							RESULT = s;	
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // fplist ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT =f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fplist ::= fplist COMMA fpdef 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT = fl+","+f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fpdef ::= NAME DOT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								RESULT = n+d+n2;
							
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fpdef ::= LPAREN fplist RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
									
									RESULT=f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fpdef ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT = s;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fpdef ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT = n;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fpdef ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		
									RESULT=n;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // single_parameter ::= fpdef ASSIGN test 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									semanticAlert("Funzione con parametro ed assegnazione nel prototipo non supportata in JAVA");
									RESULT=f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("single_parameter",32, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // single_parameter ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT=f;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("single_parameter",32, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // positional_arguments ::= single_parameter 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT=d;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",31, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // positional_arguments ::= positional_arguments COMMA single_parameter 
            {
              Object RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
									RESULT=dr+","+d;
								
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",31, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varargslist ::= MULTMULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								parser.symTable.putSymbol(getIndentation()+1,n,new SymbolType(n,"PDictionary",null,null,null,getIndentation()+1,null));								
								RESULT="Object "+n;
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varargslist ::= MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								
								StringBuilder sb = new StringBuilder();
								
								//inserisco pure *name
								parser.symTable.putSymbol(getIndentation()+1,n1,new SymbolType(n1,"Tupla",null,null,null,getIndentation()+1,null));
								sb.append("Object "+n1 +",");
								
								//inserisco pure **name
								parser.symTable.putSymbol(getIndentation()+1,n2,new SymbolType(n2,"PDictionary",null,null,null,getIndentation()+1,null));
								sb.append("Object "+n2);
								
								RESULT=sb;
						
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varargslist ::= MULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		  
								//inserisco pure *name
								parser.symTable.putSymbol(getIndentation()+1,n,new SymbolType(n,"Tupla",null,null,null,getIndentation()+1,null));
								
								RESULT="Object "+n;
									
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varargslist ::= positional_arguments COMMA MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								
								StringBuilder sb = new StringBuilder();
								ArrayList<String> argoments = UtilsToSymTable.tokenParameters(d.toString(),",");
								for(int i=0; i<argoments.size(); i++){
								//	parser.symTable.putSymbol(getIndentation()+1,argoments.get(i),new SymbolType(argoments.get(i),"Object",null,null,null,getIndentation()+1,null));
									sb.append("Object "+argoments.get(i));
									sb.append(",");
								}
								
								//inserisco pure *name
								parser.symTable.putSymbol(getIndentation()+1,n1,new SymbolType(n1,"Tupla",null,null,null,getIndentation()+1,null));
								sb.append("Object "+n1 +",");
								
								//inserisco pure **name
								parser.symTable.putSymbol(getIndentation()+1,n2,new SymbolType(n2,"PDictionary",null,null,null,getIndentation()+1,null));
								sb.append("Object "+n2);

								RESULT=sb;
														
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-6)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varargslist ::= positional_arguments COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								
								StringBuilder sb = new StringBuilder();
								ArrayList<String> argoments = UtilsToSymTable.tokenParameters(d.toString(),",");
								for(int i=0; i<argoments.size(); i++){
									parser.symTable.putSymbol(getIndentation()+1,argoments.get(i),new SymbolType(argoments.get(i),"Object",null,null,null,getIndentation()+1,null));
									sb.append("Object "+argoments.get(i));
									sb.append(",");
								}
								
								//inserisco pure **name
								parser.symTable.putSymbol(getIndentation()+1,n,new SymbolType(n,"PDictionary",null,null,null,getIndentation()+1,null));
								sb.append("Object "+n);


								RESULT=sb;
							
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varargslist ::= positional_arguments COMMA MULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								StringBuilder sb = new StringBuilder();
								ArrayList<String> argoments = UtilsToSymTable.tokenParameters(d.toString(),",");
								for(int i=0; i<argoments.size(); i++){
									parser.symTable.putSymbol(getIndentation()+1,argoments.get(i),new SymbolType(argoments.get(i),"Object",null,null,null,getIndentation()+1,null));
									sb.append("Object "+argoments.get(i));
									sb.append(",");
								}
								
								//inserisco pure *name
								parser.symTable.putSymbol(getIndentation()+1,n,new SymbolType(n,"Tupla",null,null,null,getIndentation()+1,null));
								sb.append("Object "+n);
								
								RESULT=sb;
														 
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varargslist ::= positional_arguments 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
								StringBuilder sb = new StringBuilder();
								ArrayList<String> argoments = UtilsToSymTable.tokenParameters(d.toString(),",");
								for(int i=0; i<argoments.size(); i++){
									parser.symTable.putSymbol(getIndentation()+1,argoments.get(i),new SymbolType(argoments.get(i),"Object",null,null,null,getIndentation()+1,null));
									sb.append("Object "+argoments.get(i));
									if(i!=argoments.size()-1){
										sb.append(",");
									}
								}
								RESULT=sb;
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= LPAREN varargslist RPAREN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		 
							//System.out.println("#CUP - parameters: Argomenti Funzione: "+ v);
							//String[] var = (String[])v; PER TIRARE FUORI LE SINGOLE VARIABILI
							RESULT=String.valueOf(getIndentation())+"#"+v;	
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("parameters",78, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 
							//System.out.println("#CUP - parameters:Funzione senza argomenti ");  
							RESULT = String.valueOf(getIndentation())+"#"+"null";
						
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("parameters",78, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcdef ::= DEF NAME parameters COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
					
					String corpoFunzione = s.toString().replace("self.", "this.");
					
					StringBuilder sb = new StringBuilder();
					ArrayList<String> pr = UtilsToSymTable.tokenParameters(p.toString(),"#");
			 		String tab=" ";
			 		for(int i=0; i<Integer.parseInt(pr.get(0)); i++){
						tab+="\t";
					}
					
			 		if(n.toString().equals("__init__")){
			 			//costruttore per la funzione
			 			ArrayList<String> par = UtilsToSymTable.tokenParameters(pr.get(1),",");
			 			
			 			for(int i = 0; i < par.size(); i++){
			 				if(par.get(i).equals("Object self")){
			 					par.remove(i);
			 				}
			 			}
			 			
						String functionName = n.toString()+"#"+par.size();
			  			if(Integer.parseInt(pr.get(0))==0)
							functionName = functionName + "#DefaultClass";
			  			//Metto in value il corpo del costruttore..
			  			//SymbolType symbolType=new SymbolType(n,"constructor",corpoFunzione,parWhitoutSELF,"",Integer.parseInt(pr.get(0)),null);
			  			SymbolType symbolType=new SymbolType(n,"constructor",corpoFunzione,par,"",Integer.parseInt(pr.get(0)),null);
			 			parser.symTable.putSymbol(Integer.parseInt(pr.get(0)),functionName,symbolType);
			 			if(Integer.parseInt(pr.get(0))==0) parser.StaticSupport.put(functionName,corpoFunzione);
			  			
			 		}else{
				 		
						//VERIFICO IL TIPO DI RITORNO D1
						int flag=0;
						String firstType=null;
						boolean flag_2 = false;
						//System.out.println("VERIFICA PRESENZA RETURN: ");
						ArrayList<Integer> allKeys = parser.symTable.getAllScope();	
						Iterator<Integer> it = allKeys.iterator();
						while(it.hasNext()){
							Integer numberScoper = it.next();
							//System.out.println("LEVEL VERIFICATED: "+numberScoper);
							Hashtable<String,SymbolType> all = parser.symTable.getSymTable(numberScoper);
							Enumeration<String> k = all.keys();
							while(k.hasMoreElements()){
								String singleK = k.nextElement();
								//System.out.println("KEY::: "+singleK);
								if(singleK.equals("return") || singleK.equals("return ")){
									flag_2 = true;
								}
									
							}
						}
						if(flag_2)
							firstType =  "Object ";
						else
							firstType =  "void ";
						//System.out.println("VERIFICA - PRESENZA RETURN_2: "+firstType);
						
						//VERIFICO LA PRESENZA DI EVENTUALI ARGOMENTI NELLA FUNZIONE
						
				 		if(pr.get(1).equals("null")) //se non ci sono argomenti inserisco solo le parentesi
				 		{
				 			
							ArrayList<String> parameters = new ArrayList<String>();
							ArrayList<Hashtable<String,SymbolType>> array= parser.symTable.getAllSymbol(Integer.parseInt(pr.get(0)));
							
							
							String functionName = n+"#0";
							if(Integer.parseInt(pr.get(0))==0)
								functionName = functionName + "#DefaultClass";
								
							//System.out.println("functionName: " +functionName);
							
							SymbolType symbolType=new SymbolType(n,"function",null,new ArrayList<String>(),firstType,Integer.parseInt(pr.get(0)),null);
				 			parser.symTable.putSymbol(Integer.parseInt(pr.get(0)),functionName,symbolType);
				 			if(Integer.parseInt(pr.get(0))==0) parser.StaticSupport.put(functionName,corpoFunzione);
				 			//System.out.println("GETINDENTATION funzione"+pr.get(0));
				 			sb.append(tab);
				 			sb.append(UtilsToSymTable.getFunctionModifier(n));
				 			sb.append(firstType);
				 			sb.append(" ");
				 			sb.append(symbolType.getName());
				 			sb.append("(");
				 			sb.append(")");
				 			sb.append("{");
				 			sb.append("\n");
				 			sb.append(corpoFunzione);
				 			sb.append("\n");
				 			sb.append(tab);
				 			sb.append("}");
				 			sb.append("\n");
				 		}
				 		else
				 		{
				  			
				  			
				  			ArrayList<String> par = UtilsToSymTable.tokenParameters(pr.get(1),",");
				  			String par_ametri = new String();
				 			
				  			for(int i = 0; i < par.size(); i++){
				 				if(par.get(i).equals("Object self")){
				 					par.remove(i);
				 				}
				 			}
				  			
				  			for(int i = 0; i < par.size(); i++){
				  				par_ametri = par_ametri + par.get(i);
				  				if(i!=par.size()-1)
				 					par_ametri = par_ametri + ",";
				  			}
				 			
							String functionName = n.toString()+"#"+par.size();
							if(Integer.parseInt(pr.get(0))==0)
								functionName = functionName + "#DefaultClass";
				  			
				  			//System.out.println("funcName: " + functionName);
				  			//System.out.println("par_ametri: " + par_ametri);
				  			
				    		SymbolType symbolType=new SymbolType(n,"function",null,par,firstType, Integer.parseInt(pr.get(0)),null);
				 			parser.symTable.putSymbol(Integer.parseInt(pr.get(0)),functionName,symbolType);
				    		if(Integer.parseInt(pr.get(0))==0) parser.StaticSupport.put(functionName,corpoFunzione);
				 						    		
				    		sb.append(tab);
				    		sb.append(UtilsToSymTable.getFunctionModifier(n));
				 			sb.append(firstType);
				 			sb.append(" ");
				 			sb.append(symbolType.getName());
				 			sb.append("(");
				 			sb.append(par_ametri);
				 			sb.append(")");
				 			sb.append("{");
				 			sb.append("\n");
				 			sb.append(corpoFunzione);
				 			sb.append("\n");
				 			sb.append(tab);
				 			sb.append("}");
				 			sb.append("\n");
				 			
				    	}
			 		}
			    	
			    	//Cancello gli eventuali scope di livello inferiore al mio
					Enumeration et = parser.symTable.getScopeSym().keys();
					while(et.hasMoreElements()){
						int currLev = (Integer)et.nextElement();
						//System.out.println("CurrLev: "+currLev);
						//System.out.println("IndentLev: "+pr.get(0));
						if(currLev > Integer.parseInt(pr.get(0))){
							Enumeration ez = parser.symTable.getSymTable(currLev).keys();
							while(ez.hasMoreElements()){
								String currKeyz= (String)ez.nextElement();
								if(parser.symTable.getSymbol(currLev, currKeyz).getOwner()==null){
											//System.out.println("Removing - "+parser.symTable.getSymbol(currLev, currKeyz).getName()+" - frome DEF function");
											parser.symTable.getSymTable(currLev).remove(currKeyz);
								}										
							}
						}
					}
					
					//rimuovo elementi anche dalla parser.scopeHash
					parser.scopeHash.clear();
					
					if(parser.InherSupport.get(n)!=null){
						//System.out.println("METHOD PRESENT!");
					}
					else{
						//System.out.println("I PUT METHOD: "+n.toString());
						//System.out.println("CORPO: "+corpoFunzione);
						parser.InherSupport.put(n,corpoFunzione);
					}
					
					if(Integer.parseInt(pr.get(0))==0){
						RESULT = "";
					}else{
						RESULT = sb.toString();		
					}
			
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("funcdef",63, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decorated ::= decorators funcdef 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorated",65, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decorated ::= decorators classdef 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorated",65, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decorators ::= decorators decorator 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorators",77, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decorators ::= decorator 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorators",77, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decorator ::= AT dotted_name LPAREN arglist RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorator",76, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-5)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decorator ::= AT dotted_name LPAREN RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorator",76, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-4)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decorator ::= AT dotted_name NEWLINE 
            {
              Object RESULT =null;

              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("decorator",76, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-2)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog_manager ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog_manager",1, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog_manager ::= stmt prog_manager 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = s.toString() + p.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog_manager",1, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog_manager ::= NEWLINE prog_manager 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 RESULT = "\n"+p.toString(); 
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog_manager",1, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= prog_manager 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.peek()).value;
		 
				//Creo la classe statica associata alle eventuali variabili globali
				String globVariables = getStaticVar();
				
				System.out.println("\n###############################\n");
				System.out.println(p.toString());
				System.out.println("\n###############################\n");
				
				RESULT = p.toString();
			
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          return CUP$TranslatorPy2JCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)).value;
		RESULT = start_val;
              CUP$TranslatorPy2JCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.elementAt(CUP$TranslatorPy2JCup$top-1)), ((java_cup.runtime.Symbol)CUP$TranslatorPy2JCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TranslatorPy2JCup$parser.done_parsing();
          return CUP$TranslatorPy2JCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

